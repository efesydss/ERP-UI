{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI definition",
    "version": "v0"
  },
  "servers": [
    {
      "url": "https://falcons-erp-api-dev.sd.iafl.net",
      "description": "Generated server url"
    }
  ],
  "paths": {
    "/api/storage/unit/{id}": {
      "get": {
        "tags": [
          "Storage / Unit"
        ],
        "description": "Get Unit",
        "operationId": "getUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Storage / Unit"
        ],
        "description": "Update Unit",
        "operationId": "updateUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Unit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Storage / Unit"
        ],
        "description": "Delete Unit",
        "operationId": "deleteUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/shelf/{id}": {
      "get": {
        "tags": [
          "Storage / Shelf"
        ],
        "description": "Get Shelf",
        "operationId": "getShelf",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shelf"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Storage / Shelf"
        ],
        "description": "Update Shelf",
        "operationId": "updateShelf",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shelf"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shelf"
                }
              }
            }
          },
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Storage / Shelf"
        ],
        "description": "Delete Shelf",
        "operationId": "deleteShelf",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shelf"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/serviceGroup/{id}": {
      "get": {
        "tags": [
          "Storage / Service Group"
        ],
        "description": "Get ServiceGroup",
        "operationId": "getServiceGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceGroup"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Storage / Service Group"
        ],
        "description": "Update ServiceGroup",
        "operationId": "updateServiceGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceGroup"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Storage / Service Group"
        ],
        "description": "Delete ServiceGroup",
        "operationId": "deleteServiceGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceGroup"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/serviceCard/{id}": {
      "get": {
        "tags": [
          "Storage / Service Card"
        ],
        "description": "Get ServiceCard",
        "operationId": "getServiceCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceCard"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Storage / Service Card"
        ],
        "description": "Update ServiceCard",
        "operationId": "updateServiceCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceCard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceCard"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Storage / Service Card"
        ],
        "description": "Delete ServiceCard",
        "operationId": "deleteServiceCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceCard"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/productGroup/{id}": {
      "get": {
        "tags": [
          "Storage / ProductGroup"
        ],
        "description": "Get ProductGroup",
        "operationId": "getProductGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductGroup"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Storage / ProductGroup"
        ],
        "description": "Update ProductGroup",
        "operationId": "updateProductGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductGroup"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Storage / ProductGroup"
        ],
        "description": "Delete ProductGroup",
        "operationId": "deleteProductGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductGroup"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/productCard/{id}": {
      "get": {
        "tags": [
          "Storage / ProductCard"
        ],
        "description": "Get ProductCard",
        "operationId": "getProductCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCard"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Storage / ProductCard"
        ],
        "description": "Update ProductCard",
        "operationId": "updateProductCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCard"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Storage / ProductCard"
        ],
        "description": "Delete ProductCard",
        "operationId": "deleteProductCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCard"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/materialGroup/{id}": {
      "get": {
        "tags": [
          "Storage / Material Group"
        ],
        "description": "Get MaterialGroup",
        "operationId": "getMaterialGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaterialGroup"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Storage / Material Group"
        ],
        "description": "Update MaterialGroup",
        "operationId": "updateMaterialGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaterialGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaterialGroup"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Storage / Material Group"
        ],
        "description": "Delete MaterialGroup",
        "operationId": "deleteMaterialGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaterialGroup"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/materialCard/{id}": {
      "get": {
        "tags": [
          "Storage / Material Card"
        ],
        "description": "Get MaterialCard",
        "operationId": "getMaterialCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaterialCard"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Storage / Material Card"
        ],
        "description": "Update MaterialCard",
        "operationId": "updateMaterialCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaterialCard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaterialCard"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Storage / Material Card"
        ],
        "description": "Delete MaterialCard",
        "operationId": "deleteMaterialCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaterialCard"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/fixtureGroup/{id}": {
      "get": {
        "tags": [
          "Storage / Fixture Group"
        ],
        "description": "Get FixtureGroup",
        "operationId": "getFixtureGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixtureGroup"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Storage / Fixture Group"
        ],
        "description": "Update FixtureGroup",
        "operationId": "updateFixtureGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FixtureGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixtureGroup"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Storage / Fixture Group"
        ],
        "description": "Delete FixtureGroup",
        "operationId": "deleteFixtureGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixtureGroup"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/fixtureCard/{id}": {
      "get": {
        "tags": [
          "Storage / Fixture Card"
        ],
        "description": "Get FixtureCard",
        "operationId": "getFixtureCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixtureCard"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Storage / Fixture Card"
        ],
        "description": "Update FixtureCard",
        "operationId": "updateFixtureCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FixtureCard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixtureCard"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Storage / Fixture Card"
        ],
        "description": "Delete FixtureCard",
        "operationId": "deleteFixtureCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixtureCard"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/assignmentTransaction/{id}": {
      "get": {
        "tags": [
          "Storage / AssignmentTransaction"
        ],
        "description": "Get AssignmentTransaction",
        "operationId": "getAssignmentTransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentTransaction"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Storage / AssignmentTransaction"
        ],
        "description": "Update AssignmentTransaction",
        "operationId": "updateAssignmentTransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignmentTransaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentTransaction"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Storage / AssignmentTransaction"
        ],
        "description": "Delete AssignmentTransaction",
        "operationId": "deleteAssignmentTransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentTransaction"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/assignmentCard/{id}": {
      "get": {
        "tags": [
          "Storage / AssignmentCard"
        ],
        "description": "Get AssignmentCard",
        "operationId": "getAssignmentCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentCard"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Storage / AssignmentCard"
        ],
        "description": "Update AssignmentCard",
        "operationId": "updateAssignmentCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignmentCard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentCard"
                }
              }
            }
          },
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Storage / AssignmentCard"
        ],
        "description": "Delete AssignmentCard",
        "operationId": "deleteAssignmentCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentCard"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/sales/proposal/{id}": {
      "get": {
        "tags": [
          "Sales / Proposal"
        ],
        "description": "Get Proposal",
        "operationId": "getProposal",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Proposal"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Sales / Proposal"
        ],
        "description": "Update Proposal",
        "operationId": "updateProposal",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Proposal"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Proposal"
                }
              }
            }
          },
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sales / Proposal"
        ],
        "description": "Delete Proposal",
        "operationId": "deleteProposal",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Proposal"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/purchaseOrder/{id}": {
      "get": {
        "tags": [
          "Purchasing / PurchaseOrder"
        ],
        "description": "Get Purchase Order",
        "operationId": "getPurchaseOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Purchasing / PurchaseOrder"
        ],
        "description": "Update PurchaseOrder",
        "operationId": "updatePurchaseOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Purchasing / PurchaseOrder"
        ],
        "description": "Delete PurchaseOrder",
        "operationId": "deletePurchaseOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrder"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/invoice/{id}": {
      "get": {
        "tags": [
          "Purchasing / Invoice"
        ],
        "description": "Get Invoice",
        "operationId": "getInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Purchasing / Invoice"
        ],
        "description": "Update Invoice",
        "operationId": "updateInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Purchasing / Invoice"
        ],
        "description": "Delete Invoice by document reference",
        "operationId": "deleteInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/currentAccountTransaction/{id}": {
      "get": {
        "tags": [
          "Purchasing / Current Account Transaction"
        ],
        "description": "Get Current Account Transaction",
        "operationId": "getCurrentAccountTransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentAccountTransaction"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Purchasing / Current Account Transaction"
        ],
        "description": "Update Current Account Transaction",
        "operationId": "updateCurrentAccountTransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrentAccountTransaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentAccountTransaction"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Purchasing / Current Account Transaction"
        ],
        "description": "Delete Current Account Transaction by document reference",
        "operationId": "deleteCurrentAccountTransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentAccountTransaction"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/currentAccountBankAccount/{id}": {
      "get": {
        "tags": [
          "Purchasing / CurrentAccountBankAccount"
        ],
        "description": "Get CurrentAccountBankAccount",
        "operationId": "getCurrentAccountBankAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentAccountBankAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Purchasing / CurrentAccountBankAccount"
        ],
        "description": "Update CurrentAccountBankAccount",
        "operationId": "updateCurrentAccountBankAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrentAccountBankAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentAccountBankAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Purchasing / CurrentAccountBankAccount"
        ],
        "description": "Delete CurrentAccountBankAccount",
        "operationId": "deleteCurrentAccountBankAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentAccountBankAccount"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/currentAccount/{id}": {
      "get": {
        "tags": [
          "Purchasing / Current Account"
        ],
        "description": "Get Current Account",
        "operationId": "getCurrentAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentAccount"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Purchasing / Current Account"
        ],
        "description": "Update Current Account",
        "operationId": "updateCurrentAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrentAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentAccount"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Purchasing / Current Account"
        ],
        "description": "Delete Current Account by document reference",
        "operationId": "deleteCurrentAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/additionalcost/{id}": {
      "get": {
        "tags": [
          "Purchasing / AdditionalCost"
        ],
        "description": "Get AdditionalCost",
        "operationId": "getAdditionalCost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalCost"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Purchasing / AdditionalCost"
        ],
        "description": "Update AdditionalCost",
        "operationId": "updateAdditionalCost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdditionalCost"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalCost"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Purchasing / AdditionalCost"
        ],
        "description": "Delete AdditionalCost",
        "operationId": "deleteAdditionalCost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalCost"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/production/project/{id}": {
      "get": {
        "tags": [
          "Production / Project"
        ],
        "description": "Get Project",
        "operationId": "getProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Production / Project"
        ],
        "description": "Update Project",
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Production / Project"
        ],
        "description": "Delete Project",
        "operationId": "deleteProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/timekeeping/{id}": {
      "get": {
        "tags": [
          "Human Resources / Time Keeping"
        ],
        "description": "Get Time Keeping",
        "operationId": "getTimeKeeping",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeKeeping"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Human Resources / Time Keeping"
        ],
        "description": "Update Time Keeping",
        "operationId": "updateTimeKeeping",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeKeeping"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeKeeping"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Human Resources / Time Keeping"
        ],
        "description": "Delete Time Keeping by document reference",
        "operationId": "deleteTimeKeeping",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeKeeping"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/employee/{id}": {
      "get": {
        "tags": [
          "Human Resources / Employee"
        ],
        "description": "Get Employee",
        "operationId": "getEmployee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Human Resources / Employee"
        ],
        "description": "Update Employee",
        "operationId": "updateEmployee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Human Resources / Employee"
        ],
        "description": "Delete Employee by document reference",
        "operationId": "deleteEmployee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/employee/{id}/timeoff/{timeOffId}": {
      "get": {
        "tags": [
          "Human Resources / TimeOff"
        ],
        "description": "Get TimeOff",
        "operationId": "getTimeOff",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "timeOffId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "200": {
            "description": "TimeOff deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeOff"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "404": {
            "description": "TimeOff not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Human Resources / TimeOff"
        ],
        "description": "Update Timeoff",
        "operationId": "updateTimeoff",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "timeOffId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeOff"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeOff"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Human Resources / TimeOff"
        ],
        "description": "Delete TimeOff",
        "operationId": "deleteTimeOff",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "timeOffId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "200": {
            "description": "TimeOff deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeOff"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "404": {
            "description": "TimeOff not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/employee/{id}/payment": {
      "put": {
        "tags": [
          "Human Resources / Employee Payment"
        ],
        "description": "Update Employee Payment",
        "operationId": "updateEmployeePayments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EmployeePayment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeePayment"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "post": {
        "tags": [
          "Human Resources / Employee Payment"
        ],
        "description": "Add new Employee Payments",
        "operationId": "addEmployeePayment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EmployeePayment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeePayment"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/employee/{id}/overtime": {
      "put": {
        "tags": [
          "Human Resources / Employee Overtime"
        ],
        "description": "Update Employee Overtime",
        "operationId": "updateEmployeeOvertimes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EmployeeOvertime"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeOvertime"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "post": {
        "tags": [
          "Human Resources / Employee Overtime"
        ],
        "description": "Add new Employee Overtimes",
        "operationId": "addEmployeeOvertimes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EmployeeOvertime"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeOvertime"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/finance/bankBranch/{id}": {
      "get": {
        "tags": [
          "Finance / Bank Branch"
        ],
        "description": "Get Bank Branch",
        "operationId": "getBankBranch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankBranch"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Finance / Bank Branch"
        ],
        "description": "Update Bank Branch",
        "operationId": "updateBankbranch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankBranch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankBranch"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Finance / Bank Branch"
        ],
        "description": "Delete Bank Branch",
        "operationId": "deleteBankBranch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "404": {
            "description": "Bank Branch not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "204": {
            "description": "Bank Branch deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankBranch"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/finance/bankAccount/{id}": {
      "get": {
        "tags": [
          "Finance / Bank Account"
        ],
        "description": "Get Bank Account",
        "operationId": "getBankAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Finance / Bank Account"
        ],
        "description": "Update Bank Account",
        "operationId": "updateBankAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Finance / Bank Account"
        ],
        "description": "Delete Bank Account",
        "operationId": "deleteBankAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "404": {
            "description": "Bank Branch not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "204": {
            "description": "Bank Account deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/finance/bank/{id}": {
      "get": {
        "tags": [
          "Finance / Bank"
        ],
        "description": "Get Bank",
        "operationId": "getDepartment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bank"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Finance / Bank"
        ],
        "description": "Update Bank",
        "operationId": "updateBank",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Bank"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bank"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Finance / Bank"
        ],
        "description": "Delete bank",
        "operationId": "deleteBank",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bank"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/company/department/{id}": {
      "get": {
        "tags": [
          "Company / Department"
        ],
        "description": "Get Department",
        "operationId": "getDepartment_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Company / Department"
        ],
        "description": "Update Department",
        "operationId": "updateDepartment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Department"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Company / Department"
        ],
        "description": "Delete Department",
        "operationId": "deleteDepartment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/company/branch/{id}": {
      "get": {
        "tags": [
          "Company / Branch"
        ],
        "description": "Get Branch",
        "operationId": "getBranch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Branch"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Company / Branch"
        ],
        "description": "Update Branch",
        "operationId": "updateBranch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Branch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Branch"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Company / Branch"
        ],
        "description": "Delete Branch",
        "operationId": "deleteBranch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Branch"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/section/{id}": {
      "get": {
        "tags": [
          "Admin / Section"
        ],
        "description": "Get Section",
        "operationId": "getSection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Section"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Admin / Section"
        ],
        "description": "Update Section",
        "operationId": "updateSection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Section"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Section"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Admin / Section"
        ],
        "description": "Delete Section",
        "operationId": "deleteSection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Section"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/role/{id}": {
      "get": {
        "tags": [
          "Admin / Role"
        ],
        "description": "Get Role",
        "operationId": "getRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Admin / Role"
        ],
        "description": "Update Role",
        "operationId": "updateRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Admin / Role"
        ],
        "description": "Delete Role",
        "operationId": "deleteRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/publicHoliday/{id}": {
      "get": {
        "tags": [
          "Admin / Public Holiday"
        ],
        "description": "Get Public Holiday",
        "operationId": "getPublicHoliday",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicHoliday"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Admin / Public Holiday"
        ],
        "description": "Update Public Holiday",
        "operationId": "updatePublicHoliday",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicHoliday"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicHoliday"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Admin / Public Holiday"
        ],
        "description": "Delete PublicHoliday",
        "operationId": "deletePublicHoliday",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicHoliday"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/paymentMethod/{id}": {
      "get": {
        "tags": [
          "Admin / PaymentMethod"
        ],
        "description": "Get PaymentMethod",
        "operationId": "getPaymentMethod",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Admin / PaymentMethod"
        ],
        "description": "Update PaymentMethod",
        "operationId": "updatePaymentMethod",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Admin / PaymentMethod"
        ],
        "description": "Delete PaymentMethod",
        "operationId": "deletePaymentMethod",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/machine/{id}": {
      "get": {
        "tags": [
          "Admin / Machine"
        ],
        "description": "Get Machine",
        "operationId": "getMachine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Machine"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Admin / Machine"
        ],
        "description": "Update Machine",
        "operationId": "updateMachine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Machine"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Machine"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Admin / Machine"
        ],
        "description": "Delete Machine",
        "operationId": "deleteMachine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Machine"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/depot/{id}": {
      "get": {
        "tags": [
          "Admin / Depot"
        ],
        "description": "Get Depot",
        "operationId": "getDepot",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Depot"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Admin / Depot"
        ],
        "description": "Update Depot",
        "operationId": "updateDepot",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Depot"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Depot"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Admin / Depot"
        ],
        "description": "Delete Depot",
        "operationId": "deleteDepot",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Depot"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/company/{id}": {
      "get": {
        "tags": [
          "Admin / Company"
        ],
        "description": "Get Company",
        "operationId": "getCompany",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Admin / Company"
        ],
        "description": "Update Company",
        "operationId": "updateCompany",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Company"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Admin / Company"
        ],
        "description": "Delete Company",
        "operationId": "deleteCompany",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/accounting/expenseInvoice/{id}": {
      "get": {
        "tags": [
          "Accounting / ExpenseInvoice"
        ],
        "description": "Get ExpenseInvoice",
        "operationId": "getExpenseInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseInvoice"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Accounting / ExpenseInvoice"
        ],
        "description": "Update ExpenseInvoice",
        "operationId": "updateExpenseInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseInvoice"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Accounting / ExpenseInvoice"
        ],
        "description": "Delete ExpenseInvoice",
        "operationId": "deleteExpenseInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseInvoice"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/accounting/expenseCard/{id}": {
      "get": {
        "tags": [
          "Accounting / ExpenseCard"
        ],
        "description": "Get ExpenseCard",
        "operationId": "getExpenseCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseCard"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Accounting / ExpenseCard"
        ],
        "description": "Update ExpenseCard",
        "operationId": "updateExpenseCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseCard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseCard"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Accounting / ExpenseCard"
        ],
        "description": "Delete ExpenseCard",
        "operationId": "deleteExpenseCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseCard"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/accounting/cashAccountTransaction/{id}": {
      "get": {
        "tags": [
          "Accounting / CashAccountTransaction"
        ],
        "description": "Get CashAccountTransaction",
        "operationId": "getCashAccountTransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashAccountTransaction"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Accounting / CashAccountTransaction"
        ],
        "description": "Update CashAccountTransaction",
        "operationId": "updateCashAccountTransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CashAccountTransaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashAccountTransaction"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Accounting / CashAccountTransaction"
        ],
        "description": "Delete CashAccountTransaction",
        "operationId": "deleteCashAccountTransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashAccountTransaction"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/accounting/cashAccount/{id}": {
      "get": {
        "tags": [
          "Accounting / CashAccount"
        ],
        "description": "Get CashAccount",
        "operationId": "getCashAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "put": {
        "tags": [
          "Accounting / CashAccount"
        ],
        "description": "Update CashAccount",
        "operationId": "updateCashAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CashAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Accounting / CashAccount"
        ],
        "description": "Delete CashAccount",
        "operationId": "deleteCashAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashAccount"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/user/users": {
      "post": {
        "tags": [
          "ERP / User"
        ],
        "description": "List Users. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "users",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/user/refresh": {
      "post": {
        "tags": [
          "ERP / User"
        ],
        "operationId": "refresh",
        "parameters": [
          {
            "name": "refresh_token",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/user/logout": {
      "post": {
        "tags": [
          "ERP / User"
        ],
        "operationId": "logout",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/user/login": {
      "post": {
        "tags": [
          "ERP / User"
        ],
        "description": "Login erp user",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/units": {
      "post": {
        "tags": [
          "Storage / Unit"
        ],
        "description": "List Units. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "units",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Units"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/unit": {
      "post": {
        "tags": [
          "Storage / Unit"
        ],
        "description": "Add new Unit",
        "operationId": "addUnit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Unit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/shelves": {
      "post": {
        "tags": [
          "Storage / Shelf"
        ],
        "description": "List Shelves. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "shelves",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shelves"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/shelf": {
      "post": {
        "tags": [
          "Storage / Shelf"
        ],
        "description": "Add new Shelf",
        "operationId": "addShelf",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shelf"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shelf"
                }
              }
            }
          },
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/serviceGroups": {
      "post": {
        "tags": [
          "Storage / Service Group"
        ],
        "description": "List ServiceGroups. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "ServiceGroups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceGroups"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/serviceGroup": {
      "post": {
        "tags": [
          "Storage / Service Group"
        ],
        "description": "Add new ServiceGroup",
        "operationId": "addServiceGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceGroup"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/serviceCards": {
      "post": {
        "tags": [
          "Storage / Service Card"
        ],
        "description": "List ServiceCards. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "serviceCards",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceCards"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/serviceCard": {
      "post": {
        "tags": [
          "Storage / Service Card"
        ],
        "description": "Add new ServiceCard",
        "operationId": "addServiceCard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceCard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceCard"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/productGroups": {
      "post": {
        "tags": [
          "Storage / ProductGroup"
        ],
        "description": "List ProductGroups. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "productGroups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductGroups"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/productGroup": {
      "post": {
        "tags": [
          "Storage / ProductGroup"
        ],
        "description": "Add new ProductGroup",
        "operationId": "addProductGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductGroup"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/productCards": {
      "post": {
        "tags": [
          "Storage / ProductCard"
        ],
        "description": "List ProductCards. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "productCards",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCards"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/productCard": {
      "post": {
        "tags": [
          "Storage / ProductCard"
        ],
        "description": "Add new ProductCard",
        "operationId": "addProductCard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCard"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/materialGroups": {
      "post": {
        "tags": [
          "Storage / Material Group"
        ],
        "description": "List MaterialGroups. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "MaterialGroups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaterialGroups"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/materialGroup": {
      "post": {
        "tags": [
          "Storage / Material Group"
        ],
        "description": "Add new MaterialGroup",
        "operationId": "addMaterialGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaterialGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaterialGroup"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/materialCards": {
      "post": {
        "tags": [
          "Storage / Material Card"
        ],
        "description": "List MaterialCards. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "materialCards",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaterialCards"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/materialCard": {
      "post": {
        "tags": [
          "Storage / Material Card"
        ],
        "description": "Add new MaterialCard",
        "operationId": "addMaterialCard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaterialCard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaterialCard"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/fixtureGroups": {
      "post": {
        "tags": [
          "Storage / Fixture Group"
        ],
        "description": "List Fixture Groups. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "fixtureGroups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixtureGroups"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/fixtureGroup": {
      "post": {
        "tags": [
          "Storage / Fixture Group"
        ],
        "description": "Add new FixtureGroup",
        "operationId": "addFixtureGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FixtureGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixtureGroup"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/fixtureCards": {
      "post": {
        "tags": [
          "Storage / Fixture Card"
        ],
        "description": "List FixtureCards. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "fixtureCards",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixtureCards"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/fixtureCard": {
      "post": {
        "tags": [
          "Storage / Fixture Card"
        ],
        "description": "Add new FixtureCard",
        "operationId": "addFixtureCard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FixtureCard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixtureCard"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/assignmentTransactions": {
      "post": {
        "tags": [
          "Storage / AssignmentTransaction"
        ],
        "description": "List AssignmentTransactions. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "assignmentTransactions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentTransactions"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/assignmentTransaction": {
      "post": {
        "tags": [
          "Storage / AssignmentTransaction"
        ],
        "description": "Add new AssignmentTransaction",
        "operationId": "addAssignmentTransaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignmentTransaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentTransaction"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/assignmentCards": {
      "post": {
        "tags": [
          "Storage / AssignmentCard"
        ],
        "description": "List AssignmentCards. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "assignmentCards",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentCards"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/assignmentCard": {
      "post": {
        "tags": [
          "Storage / AssignmentCard"
        ],
        "description": "Add new AssignmentCard",
        "operationId": "addAssignmentCard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignmentCard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentCard"
                }
              }
            }
          },
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/sales/proposals": {
      "post": {
        "tags": [
          "Sales / Proposal"
        ],
        "description": "List Proposals. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "proposals",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Proposals"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/sales/proposal": {
      "post": {
        "tags": [
          "Sales / Proposal"
        ],
        "description": "Add new Proposal",
        "operationId": "addProposal",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Proposal"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Proposal"
                }
              }
            }
          },
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/purchaseOrders": {
      "post": {
        "tags": [
          "Purchasing / PurchaseOrder"
        ],
        "description": "List PurchaseOrders. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "purchaseOrders",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrders"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/purchaseOrder": {
      "post": {
        "tags": [
          "Purchasing / PurchaseOrder"
        ],
        "description": "Add new PurchaseOrder",
        "operationId": "addPurchaseOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/invoices": {
      "post": {
        "tags": [
          "Purchasing / Invoice"
        ],
        "description": "List Invoices. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "getInvoices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoices"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/invoice": {
      "post": {
        "tags": [
          "Purchasing / Invoice"
        ],
        "description": "Add new Invoice",
        "operationId": "addInvoice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/invoice/calculateTotal": {
      "post": {
        "tags": [
          "Purchasing / Invoice"
        ],
        "description": "Calculate Invoice Total",
        "operationId": "calculateInvoiceTotal",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceCalculationResult"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/currentAccounts": {
      "post": {
        "tags": [
          "Purchasing / Current Account"
        ],
        "description": "List Current Accounts. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "currentAccounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentAccounts"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/currentAccount": {
      "post": {
        "tags": [
          "Purchasing / Current Account"
        ],
        "description": "Add new Current Account",
        "operationId": "addCurrentAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrentAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentAccount"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/currentAccountTransactions": {
      "post": {
        "tags": [
          "Purchasing / Current Account Transaction"
        ],
        "description": "List Current Account Transactions. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "getCurrentAccountTransactions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentAccountTransactions"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/currentAccountTransaction": {
      "post": {
        "tags": [
          "Purchasing / Current Account Transaction"
        ],
        "description": "Add new Current Account Transaction",
        "operationId": "addCurrentAccountTransaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrentAccountTransaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentAccountTransaction"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/currentAccountBankAccounts": {
      "post": {
        "tags": [
          "Purchasing / CurrentAccountBankAccount"
        ],
        "description": "List CurrentAccountBankAccounts. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "currentAccountBankAccounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentAccountBankAccounts"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/currentAccountBankAccount": {
      "post": {
        "tags": [
          "Purchasing / CurrentAccountBankAccount"
        ],
        "description": "Add new CurrentAccountBankAccount",
        "operationId": "addCurrentAccountBankAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrentAccountBankAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentAccountBankAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/additionalcosts": {
      "post": {
        "tags": [
          "Purchasing / AdditionalCost"
        ],
        "description": "List AdditionalCosts. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "additionalcosts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalCosts"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/purchasing/additionalcost": {
      "post": {
        "tags": [
          "Purchasing / AdditionalCost"
        ],
        "description": "Add new AdditionalCost",
        "operationId": "addAdditionalCost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdditionalCost"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalCost"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/production/projects": {
      "post": {
        "tags": [
          "Production / Project"
        ],
        "description": "List Projects. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "projects",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Projects"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/production/project": {
      "post": {
        "tags": [
          "Production / Project"
        ],
        "description": "Add new Project",
        "operationId": "addProject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/timekeepings": {
      "post": {
        "tags": [
          "Human Resources / Time Keeping"
        ],
        "description": "List TimeKeepings. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "timeKeepings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeKeepings"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/timekeeping": {
      "post": {
        "tags": [
          "Human Resources / Time Keeping"
        ],
        "description": "Create new Time Keeping",
        "operationId": "createTimeKeeping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeKeeping"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeKeeping"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/timekeeping/calculateTotal": {
      "post": {
        "tags": [
          "Human Resources / Time Keeping"
        ],
        "description": "Calculate Time Keeping Total",
        "operationId": "calculateTimeKeepingTotal",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeKeeping"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeKeepingCalculationResult"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/employees": {
      "post": {
        "tags": [
          "Human Resources / Employee"
        ],
        "description": "List Employees. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "Employees",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employees"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/employees/timeoffstatuses": {
      "post": {
        "tags": [
          "Human Resources / TimeOff"
        ],
        "description": "List Employee TimeOff Statuses. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "employeeTimeOffStatuses",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeOffStatuses"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/employee": {
      "post": {
        "tags": [
          "Human Resources / Employee"
        ],
        "description": "Add new Employee",
        "operationId": "addEmployee",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/employee/{id}/timeoffs": {
      "post": {
        "tags": [
          "Human Resources / TimeOff"
        ],
        "description": "List Employee timeoffs. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "timeoffs",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeOffs"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/employee/{id}/timeoff": {
      "post": {
        "tags": [
          "Human Resources / TimeOff"
        ],
        "description": "Add new TimeOff",
        "operationId": "addTimeOff",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeOff"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeOff"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/employee/{id}/payments": {
      "post": {
        "tags": [
          "Human Resources / Employee Payment"
        ],
        "description": "List Employee - Employee Payments. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "employeePayments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePayments"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/employee/{id}/overtimes": {
      "post": {
        "tags": [
          "Human Resources / Employee Overtime"
        ],
        "description": "List Employee - Employee Overtimes. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "employeeOvertimes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeOvertimes"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/employee/payments": {
      "post": {
        "tags": [
          "Human Resources / Employee Payment"
        ],
        "description": "EmployeePayments view. Supports filtering via rsql using Employee.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "employeePaymentsStatusView",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePayments"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/employee/overtimes": {
      "post": {
        "tags": [
          "Human Resources / Employee Overtime"
        ],
        "description": "EmployeeOvertimes view. Supports filtering via rsql using Employee.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "employeeOvertimesStatusView",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeOvertimes"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/finance/banks": {
      "post": {
        "tags": [
          "Finance / Bank"
        ],
        "description": "List Banks. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "banks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Banks"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/finance/bank": {
      "post": {
        "tags": [
          "Finance / Bank"
        ],
        "description": "Add new Bank",
        "operationId": "addBank",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Bank"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bank"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/finance/bankBranches": {
      "post": {
        "tags": [
          "Finance / Bank Branch"
        ],
        "description": "List Bank Branches. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "bankBranches",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankBranches"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/finance/bankBranch": {
      "post": {
        "tags": [
          "Finance / Bank Branch"
        ],
        "description": "Add new Bank Branch",
        "operationId": "addBankBranch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankBranch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankBranch"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/finance/bankAccounts": {
      "post": {
        "tags": [
          "Finance / Bank Account"
        ],
        "description": "List Bank Accounts. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "bankAccounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccounts"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/finance/bankAccount": {
      "post": {
        "tags": [
          "Finance / Bank Account"
        ],
        "description": "Add new Bank Account",
        "operationId": "addBankBranch_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/company/departments": {
      "post": {
        "tags": [
          "Company / Department"
        ],
        "description": "List Departments. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "departments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Departments"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/company/department": {
      "post": {
        "tags": [
          "Company / Department"
        ],
        "description": "Add new Department",
        "operationId": "addDepartment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Department"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/company/branches": {
      "post": {
        "tags": [
          "Company / Branch"
        ],
        "description": "List Branches. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "Branches",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Branches"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/company/branch": {
      "post": {
        "tags": [
          "Company / Branch"
        ],
        "description": "Add new Branch",
        "operationId": "addBranch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Branch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Branch"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/sections": {
      "post": {
        "tags": [
          "Admin / Section"
        ],
        "description": "List Sections. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "sections",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sections"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/section": {
      "post": {
        "tags": [
          "Admin / Section"
        ],
        "description": "Add new Section",
        "operationId": "addSection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Section"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Section"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/roles": {
      "post": {
        "tags": [
          "Admin / Role"
        ],
        "description": "List Roles. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "roles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roles"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/role": {
      "post": {
        "tags": [
          "Admin / Role"
        ],
        "description": "Add new Role",
        "operationId": "addRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/publicHolidays": {
      "post": {
        "tags": [
          "Admin / Public Holiday"
        ],
        "description": "List Public Holidays. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "publicHolidays",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicHolidays"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/publicHoliday": {
      "post": {
        "tags": [
          "Admin / Public Holiday"
        ],
        "description": "Add new Public Holiday",
        "operationId": "addPublicHoliday",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicHoliday"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicHoliday"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/paymentMethods": {
      "post": {
        "tags": [
          "Admin / PaymentMethod"
        ],
        "description": "List PaymentMethods. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "paymentMethods",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethods"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/paymentMethod": {
      "post": {
        "tags": [
          "Admin / PaymentMethod"
        ],
        "description": "Add new PaymentMethod",
        "operationId": "addPaymentMethod",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/machines": {
      "post": {
        "tags": [
          "Admin / Machine"
        ],
        "description": "List Machines. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "machines",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Machines"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/machine": {
      "post": {
        "tags": [
          "Admin / Machine"
        ],
        "description": "Add new Machine",
        "operationId": "addMachine",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Machine"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Machine"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/depots": {
      "post": {
        "tags": [
          "Admin / Depot"
        ],
        "description": "List Depots. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "depots",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Depots"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/depot": {
      "post": {
        "tags": [
          "Admin / Depot"
        ],
        "description": "Add new Depot",
        "operationId": "addDepot",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Depot"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Depot"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/company": {
      "post": {
        "tags": [
          "Admin / Company"
        ],
        "description": "Add new Company",
        "operationId": "addCompany",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Company"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/admin/companies": {
      "post": {
        "tags": [
          "Admin / Company"
        ],
        "description": "List Companies. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "companies",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Companies"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/accounting/expenseInvoices": {
      "post": {
        "tags": [
          "Accounting / ExpenseInvoice"
        ],
        "description": "List ExpenseInvoices. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "expenseInvoices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseInvoices"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/accounting/expenseInvoice": {
      "post": {
        "tags": [
          "Accounting / ExpenseInvoice"
        ],
        "description": "Add new ExpenseInvoice",
        "operationId": "addExpenseInvoice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseInvoice"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/accounting/expenseInvoice/calculateTotal": {
      "post": {
        "tags": [
          "Accounting / ExpenseInvoice"
        ],
        "description": "Calculate Invoice Total",
        "operationId": "calculateInvoiceTotal_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseInvoiceCalculationResult"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/accounting/expenseCards": {
      "post": {
        "tags": [
          "Accounting / ExpenseCard"
        ],
        "description": "List ExpenseCards. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "expenseCards",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseCards"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/accounting/expenseCard": {
      "post": {
        "tags": [
          "Accounting / ExpenseCard"
        ],
        "description": "Add new ExpenseCard",
        "operationId": "addExpenseCard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseCard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseCard"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/accounting/cashAccounts": {
      "post": {
        "tags": [
          "Accounting / CashAccount"
        ],
        "description": "List CashAccounts. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "cashAccounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashAccounts"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/accounting/cashAccount": {
      "post": {
        "tags": [
          "Accounting / CashAccount"
        ],
        "description": "Add new CashAccount",
        "operationId": "addCashAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CashAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/accounting/cashAccountTransactions": {
      "post": {
        "tags": [
          "Accounting / CashAccountTransaction"
        ],
        "description": "List CashAccountTransactions. Supports filtering via rsql.",
        "externalDocs": {
          "description": "Rsql JPA Syntax",
          "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
        },
        "operationId": "cashAccountTransactions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteringRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashAccountTransactions"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/accounting/cashAccountTransaction": {
      "post": {
        "tags": [
          "Accounting / CashAccountTransaction"
        ],
        "description": "Add new CashAccountTransaction",
        "operationId": "addCashAccountTransaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CashAccountTransaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashAccountTransaction"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/accounting/accounting/calculateBalance": {
      "post": {
        "tags": [
          "Accounting / CashAccountTransaction"
        ],
        "description": "Calculate Balance",
        "operationId": "calculateBalance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CashAccountTransactionEntity"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashAccountBalanceResult"
                }
              }
            }
          },
          "405": {
            "description": "Invalid Input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/serviceGroup/tree": {
      "get": {
        "tags": [
          "Storage / Service Group"
        ],
        "description": "Get ServiceGroup Tree",
        "operationId": "getServiceGroupTree",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceGroupTree"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/productGroup/tree": {
      "get": {
        "tags": [
          "Storage / ProductGroup"
        ],
        "description": "Get ProductGroup Tree",
        "operationId": "getProductGroupTree",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductGroupTree"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/materialGroup/tree": {
      "get": {
        "tags": [
          "Storage / Material Group"
        ],
        "description": "Get MaterialGroup Tree",
        "operationId": "getMaterialGroupTree",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaterialGroupTreeDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/storage/fixtureGroup/tree": {
      "get": {
        "tags": [
          "Storage / Fixture Group"
        ],
        "description": "Get FixtureGroup Tree",
        "operationId": "getFixtureGroupTree",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixtureGroupTree"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/timekeeping/draft/employee/{id}/year/{year}/month/{month}": {
      "get": {
        "tags": [
          "Human Resources / Time Keeping"
        ],
        "description": "Get Draft Time Keeping for Employee",
        "operationId": "getTimeKeepingDraft",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "year",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeKeeping"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Already Exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/employee/{id}/timeoffstatus": {
      "get": {
        "tags": [
          "Human Resources / TimeOff"
        ],
        "description": "Get TimeOff Status",
        "operationId": "getTimeOffStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeOffStatus"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/employee/{id}/payment/{employeePaymentId}": {
      "get": {
        "tags": [
          "Human Resources / Employee Payment"
        ],
        "description": "Get Employee Payment",
        "operationId": "getEmployeePayment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "employeePaymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePayment"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Human Resources / Employee Payment"
        ],
        "description": "Delete Employee Payment",
        "operationId": "deleteEmployeePayment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "employeePaymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "404": {
            "description": "TimeOff not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "200": {
            "description": "Employee Payment deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePayment"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/api/hr/employee/{id}/overtime/{overtimeId}": {
      "get": {
        "tags": [
          "Human Resources / Employee Overtime"
        ],
        "description": "Get Employee Overtime",
        "operationId": "getEmployeeOvertime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "overtimeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeOvertime"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Human Resources / Employee Overtime"
        ],
        "description": "Delete Employee Overtime",
        "operationId": "deleteEmployeeOvertime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "overtimeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "200": {
            "description": "Employee Overtime deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeOvertime"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "404": {
            "description": "TimeOff not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseBase"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Unit": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "KG"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "fieldErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Shelf": {
        "required": [
          "description",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Shelf First"
          },
          "description": {
            "type": "string",
            "example": "This is a First Shelf"
          }
        }
      },
      "ServiceGroup": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 13
          },
          "name": {
            "type": "string",
            "example": "metal"
          },
          "code": {
            "type": "string",
            "example": "m.01"
          },
          "parent": {
            "$ref": "#/components/schemas/ServiceGroup"
          }
        }
      },
      "MaterialGroupRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 13
          }
        },
        "example": {
          "id": 13
        }
      },
      "ServiceCard": {
        "required": [
          "defaultUnit",
          "serviceCode",
          "serviceGroup",
          "serviceName",
          "serviceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 101
          },
          "serviceCode": {
            "type": "string",
            "example": "01.001"
          },
          "serviceName": {
            "type": "string",
            "example": "Steel Plate"
          },
          "serviceGroup": {
            "$ref": "#/components/schemas/MaterialGroupRef"
          },
          "defaultUnit": {
            "$ref": "#/components/schemas/UnitEnum"
          },
          "serviceType": {
            "$ref": "#/components/schemas/ServiceTypeEnum"
          },
          "optimalLevel": {
            "type": "number",
            "nullable": true,
            "example": 100
          },
          "minimumLevel": {
            "type": "number",
            "nullable": true,
            "example": 10
          },
          "specialCode": {
            "type": "string",
            "nullable": true,
            "example": "SPEC123"
          },
          "shelfLocation": {
            "type": "string",
            "nullable": true,
            "example": "A1-01"
          },
          "serviceCardUnits": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ServiceCardUnit"
            }
          }
        }
      },
      "ServiceCardUnit": {
        "required": [
          "multiplier",
          "unit"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "unit": {
            "$ref": "#/components/schemas/UnitEnum"
          },
          "multiplier": {
            "type": "number"
          }
        },
        "nullable": true
      },
      "ServiceTypeEnum": {
        "type": "string",
        "example": "MAIN_SERVICE",
        "enum": [
          "MAIN_SERVICE",
          "CONSUMPTION_SERVICE"
        ]
      },
      "UnitEnum": {
        "type": "string",
        "example": "KG",
        "enum": [
          "KG",
          "GR",
          "METER",
          "M2",
          "M3",
          "LITRE",
          "PIECE",
          "PACKAGE",
          "PAIR",
          "PLATE",
          "MM"
        ]
      },
      "ProductGroup": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 17
          },
          "name": {
            "type": "string",
            "example": "Humanoid Armed Security Robot"
          },
          "code": {
            "type": "string",
            "example": "m.01"
          },
          "parent": {
            "$ref": "#/components/schemas/ProductGroup"
          }
        }
      },
      "ProductCard": {
        "required": [
          "defaultUnit",
          "productCode",
          "productGroup",
          "productName",
          "productType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 101
          },
          "productCode": {
            "type": "string",
            "example": "01.001"
          },
          "productName": {
            "type": "string",
            "example": "Steel Plate"
          },
          "productGroup": {
            "$ref": "#/components/schemas/ProductGroupRef"
          },
          "defaultUnit": {
            "$ref": "#/components/schemas/UnitEnum"
          },
          "productType": {
            "$ref": "#/components/schemas/ProductTypeEnum"
          },
          "optimalLevel": {
            "type": "number",
            "nullable": true,
            "example": 100
          },
          "minimumLevel": {
            "type": "number",
            "nullable": true,
            "example": 10
          },
          "specialCode": {
            "type": "string",
            "nullable": true,
            "example": "SPEC123"
          },
          "shelfLocation": {
            "type": "string",
            "nullable": true,
            "example": "A1-01"
          },
          "productCardUnits": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ProductCardUnit"
            }
          }
        }
      },
      "ProductCardRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          }
        },
        "description": "Product Card"
      },
      "ProductCardUnit": {
        "required": [
          "multiplier",
          "productCard"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "productCard": {
            "$ref": "#/components/schemas/ProductCardRef"
          },
          "multiplier": {
            "type": "number"
          }
        },
        "nullable": true
      },
      "ProductGroupRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 13
          }
        },
        "example": {
          "id": 13
        }
      },
      "ProductTypeEnum": {
        "type": "string",
        "example": "PRODUCT",
        "enum": [
          "PRODUCT",
          "SEMI_PRODUCT"
        ]
      },
      "MaterialGroup": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 13
          },
          "name": {
            "type": "string",
            "example": "metal"
          },
          "code": {
            "type": "string",
            "example": "m.01"
          },
          "parent": {
            "$ref": "#/components/schemas/MaterialGroup"
          }
        }
      },
      "MaterialCard": {
        "required": [
          "defaultUnit",
          "materialCode",
          "materialGroup",
          "materialName",
          "materialType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 101
          },
          "materialCode": {
            "type": "string",
            "example": "01.001"
          },
          "materialName": {
            "type": "string",
            "example": "Steel Plate"
          },
          "materialGroup": {
            "$ref": "#/components/schemas/MaterialGroupRef"
          },
          "defaultUnit": {
            "$ref": "#/components/schemas/UnitEnum"
          },
          "materialType": {
            "$ref": "#/components/schemas/MaterialTypeEnum"
          },
          "optimalLevel": {
            "type": "number",
            "nullable": true,
            "example": 100
          },
          "minimumLevel": {
            "type": "number",
            "nullable": true,
            "example": 10
          },
          "specialCode": {
            "type": "string",
            "nullable": true,
            "example": "SPEC123"
          },
          "shelfLocation": {
            "type": "string",
            "nullable": true,
            "example": "A1-01"
          },
          "materialCardUnits": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MaterialCardUnit"
            }
          }
        }
      },
      "MaterialCardUnit": {
        "required": [
          "multiplier",
          "unit"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "unit": {
            "$ref": "#/components/schemas/UnitEnum"
          },
          "multiplier": {
            "type": "number"
          }
        },
        "nullable": true
      },
      "MaterialTypeEnum": {
        "type": "string",
        "example": "MAIN_MATERIAL",
        "enum": [
          "MAIN_MATERIAL",
          "CONSUMPTION_MATERIAL"
        ]
      },
      "FixtureGroup": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 17
          },
          "name": {
            "type": "string",
            "example": "Humanoid Armed Security Robot"
          },
          "code": {
            "type": "string",
            "example": "m.01"
          },
          "parent": {
            "$ref": "#/components/schemas/FixtureGroup"
          }
        }
      },
      "FixtureCard": {
        "required": [
          "defaultUnit",
          "fixtureCode",
          "fixtureGroup",
          "fixtureName",
          "fixtureType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 101
          },
          "fixtureCode": {
            "type": "string",
            "example": "01.001"
          },
          "fixtureName": {
            "type": "string",
            "example": "Steel Plate"
          },
          "fixtureGroup": {
            "$ref": "#/components/schemas/FixtureGroupRef"
          },
          "defaultUnit": {
            "$ref": "#/components/schemas/UnitEnum"
          },
          "fixtureType": {
            "$ref": "#/components/schemas/FixtureTypeEnum"
          },
          "optimalLevel": {
            "type": "number",
            "nullable": true,
            "example": 100
          },
          "minimumLevel": {
            "type": "number",
            "nullable": true,
            "example": 10
          },
          "specialCode": {
            "type": "string",
            "nullable": true,
            "example": "SPEC123"
          },
          "shelfLocation": {
            "type": "string",
            "nullable": true,
            "example": "A1-01"
          },
          "fixtureCardUnits": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/FixtureCardUnit"
            }
          }
        }
      },
      "FixtureCardUnit": {
        "required": [
          "multiplier",
          "unit"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "unit": {
            "$ref": "#/components/schemas/UnitEnum"
          },
          "multiplier": {
            "type": "number"
          }
        },
        "nullable": true
      },
      "FixtureGroupRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 13
          }
        },
        "example": {
          "id": 13
        }
      },
      "FixtureTypeEnum": {
        "type": "string",
        "example": "MAIN_MATERIAL",
        "enum": [
          "MAIN_MATERIAL",
          "CONSUMPTION_MATERIAL"
        ]
      },
      "AssignmentCard": {
        "required": [
          "assignmentStatusEnum",
          "code",
          "fixtureCard",
          "info",
          "insurance",
          "insuranceCompany",
          "insuranceDuration",
          "insurancePolicyNo",
          "invoice",
          "maintenanceDuration",
          "maintenancePeriodEnum",
          "name",
          "underMaintenance",
          "warrantyDay",
          "warrantyPeriodEnum"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "assignmentStatusEnum": {
            "$ref": "#/components/schemas/AssignmentStatusEnum"
          },
          "code": {
            "type": "string",
            "example": "123"
          },
          "name": {
            "type": "string",
            "example": "Assignment"
          },
          "fixtureCard": {
            "$ref": "#/components/schemas/FixtureCard"
          },
          "insuranceCompany": {
            "type": "string",
            "example": "Apple"
          },
          "insurance": {
            "type": "boolean",
            "example": true
          },
          "insurancePolicyNo": {
            "type": "string",
            "example": "567890"
          },
          "insuranceDuration": {
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "info": {
            "type": "string",
            "example": "Information"
          },
          "invoice": {
            "$ref": "#/components/schemas/Invoice"
          },
          "warrantyPeriodEnum": {
            "$ref": "#/components/schemas/WarrantyPeriodEnum"
          },
          "warrantyDay": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "underMaintenance": {
            "type": "boolean",
            "example": true
          },
          "maintenanceDuration": {
            "type": "integer",
            "format": "int32"
          },
          "maintenancePeriodEnum": {
            "$ref": "#/components/schemas/MaintenancePeriodEnum"
          }
        }
      },
      "AssignmentStatusEnum": {
        "type": "string",
        "example": "Status",
        "enum": [
          "ASSIGNED",
          "UNASSIGNED",
          "IN_MAINTENANCE",
          "OUT_OF_SERVICE"
        ]
      },
      "AssignmentTransaction": {
        "required": [
          "assignmentCard",
          "assignmentStatusEnum",
          "employee",
          "transactionDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "assignmentCard": {
            "$ref": "#/components/schemas/AssignmentCard"
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "transactionDate": {
            "type": "string",
            "format": "date",
            "example": "2024-11-30"
          },
          "assignmentStatusEnum": {
            "$ref": "#/components/schemas/AssignmentStatusEnum"
          }
        }
      },
      "Branch": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Tuzla"
          }
        }
      },
      "CurrencyEnum": {
        "type": "string",
        "example": "USD",
        "enum": [
          "TRY",
          "USD",
          "EUR",
          "AUD",
          "GBP"
        ]
      },
      "Department": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 13
          },
          "name": {
            "type": "string",
            "example": "Management"
          }
        }
      },
      "Employee": {
        "required": [
          "companyBranch",
          "department",
          "identificationNumber",
          "name",
          "profession",
          "startDate",
          "surname"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 13
          },
          "passive": {
            "type": "boolean"
          },
          "identificationNumber": {
            "maxLength": 128,
            "minLength": 5,
            "type": "string",
            "example": "3488334523450"
          },
          "name": {
            "type": "string",
            "example": "John"
          },
          "surname": {
            "type": "string",
            "example": "Doe"
          },
          "companyBranch": {
            "$ref": "#/components/schemas/Branch"
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          },
          "profession": {
            "type": "string",
            "example": "Software Developer"
          },
          "emergencyPhone": {
            "type": "string",
            "nullable": true,
            "example": "555-555-5555"
          },
          "emergencyName": {
            "type": "string",
            "nullable": true,
            "example": "Jane Doe"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "example": "2023-07-01"
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2024-11-30"
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "example": "555-555-5555"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "example": "john.doe@example.com"
          },
          "serialNumber": {
            "type": "string",
            "nullable": true,
            "example": "123456789"
          },
          "fathersName": {
            "type": "string",
            "nullable": true,
            "example": "Ahmet"
          },
          "mothersName": {
            "type": "string",
            "nullable": true,
            "example": "Fatma"
          },
          "birthPlace": {
            "type": "string",
            "nullable": true,
            "example": "Istanbul"
          },
          "birthDate": {
            "type": "string",
            "nullable": true,
            "example": "1990-01-01"
          },
          "civilStatus": {
            "type": "string",
            "nullable": true,
            "example": "Married"
          },
          "city": {
            "type": "string",
            "nullable": true,
            "example": "Istanbul"
          },
          "province": {
            "type": "string",
            "nullable": true,
            "example": "Kadikoy"
          },
          "state": {
            "type": "string",
            "nullable": true,
            "example": "Marmara"
          },
          "street": {
            "type": "string",
            "nullable": true,
            "example": "Ataturk Street"
          },
          "volumeNumber": {
            "type": "string",
            "nullable": true,
            "example": "10"
          },
          "familySerial": {
            "type": "string",
            "nullable": true,
            "example": "A123456"
          },
          "payrollData": {
            "$ref": "#/components/schemas/PayrollData"
          }
        }
      },
      "Invoice": {
        "required": [
          "code",
          "currency",
          "date",
          "finalTotal",
          "fixedCurrency",
          "fixedCurrencyValue",
          "generalDiscount",
          "invoiceItems",
          "invoiceTypeEnum",
          "subTotal",
          "totalAdditionalCosts",
          "totalVat",
          "unitDiscount",
          "warehouseBranch"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "code": {
            "type": "string",
            "example": "A-001"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "warehouseBranch": {
            "$ref": "#/components/schemas/WarehouseBranchEnum"
          },
          "specialCode": {
            "type": "string",
            "example": "SP-001"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyEnum"
          },
          "fixedCurrency": {
            "type": "boolean",
            "example": true
          },
          "fixedCurrencyValue": {
            "type": "number",
            "example": 257.6
          },
          "invoiceItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItem"
            }
          },
          "generalDiscount": {
            "type": "number",
            "example": 3567.5
          },
          "unitDiscount": {
            "type": "number",
            "example": 3000
          },
          "totalVat": {
            "type": "number",
            "example": 200
          },
          "totalAdditionalCosts": {
            "type": "number",
            "example": 2000
          },
          "subTotal": {
            "type": "number",
            "example": 15000
          },
          "finalTotal": {
            "type": "number",
            "example": 259
          },
          "invoiceTypeEnum": {
            "$ref": "#/components/schemas/InvoiceTypeEnum"
          }
        }
      },
      "InvoiceItem": {
        "required": [
          "code",
          "discount",
          "invoiceItemType",
          "invoiceItemTypeEntityId",
          "name",
          "price",
          "quantity",
          "rowTotal",
          "tax",
          "unit"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "invoiceItemType": {
            "$ref": "#/components/schemas/InvoiceItemTypeEnum"
          },
          "invoiceItemTypeEntityId": {
            "type": "string",
            "example": "1"
          },
          "code": {
            "type": "string",
            "example": "C11"
          },
          "name": {
            "type": "string",
            "example": "Name"
          },
          "unit": {
            "$ref": "#/components/schemas/UnitEnum"
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "price": {
            "type": "number",
            "example": 1
          },
          "discount": {
            "type": "number",
            "example": 1
          },
          "tax": {
            "type": "number",
            "example": 1
          },
          "rowTotal": {
            "type": "number",
            "example": 1
          }
        }
      },
      "InvoiceItemTypeEnum": {
        "type": "string",
        "example": "FIXTURE",
        "enum": [
          "ADDITIONAL_COST",
          "SERVICE",
          "MATERIAL",
          "FIXTURE"
        ]
      },
      "InvoiceTypeEnum": {
        "type": "string",
        "example": "RECEIPT_INVOICE",
        "enum": [
          "RECEIPT_INVOICE",
          "RETURN_INVOICE"
        ]
      },
      "MaintenancePeriodEnum": {
        "type": "string",
        "example": "Status",
        "enum": [
          "DAY",
          "WEEK",
          "MONTH",
          "YEAR"
        ]
      },
      "PayrollData": {
        "required": [
          "iban",
          "salary"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 7
          },
          "currency": {
            "type": "string",
            "nullable": true,
            "example": "TRY"
          },
          "salary": {
            "type": "number",
            "example": 20000.75
          },
          "includedInCost": {
            "type": "boolean",
            "nullable": true,
            "example": true
          },
          "monthlyProgress": {
            "type": "number",
            "nullable": true,
            "example": 17
          },
          "monthlyHour": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 160
          },
          "iban": {
            "type": "string",
            "example": "TR123498765431122"
          },
          "children": {
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 3
          },
          "spouseWorking": {
            "type": "boolean",
            "example": false
          }
        },
        "nullable": true
      },
      "WarehouseBranchEnum": {
        "type": "string",
        "example": "TUZLA",
        "enum": [
          "DUZCE",
          "TUZLA",
          "TERSANE"
        ]
      },
      "WarrantyPeriodEnum": {
        "type": "string",
        "example": "Status",
        "enum": [
          "DAY",
          "WEEK",
          "MONTH",
          "YEAR"
        ]
      },
      "Bank": {
        "required": [
          "bankName",
          "bankShortName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "bankName": {
            "type": "string",
            "example": "Schweizerische Nationalbank"
          },
          "bankShortName": {
            "type": "string",
            "example": "SNB BNS"
          },
          "swiftCode": {
            "type": "string",
            "example": "SNBZCHZZXXX"
          }
        }
      },
      "BankAccount": {
        "required": [
          "accountNumber",
          "branch",
          "currency",
          "iban"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "accountNumber": {
            "type": "string",
            "example": "999999999999"
          },
          "branch": {
            "$ref": "#/components/schemas/BankBranch"
          },
          "iban": {
            "type": "string",
            "example": "TR00010001000200020002000"
          },
          "currency": {
            "type": "object",
            "properties": {
              "currencyCode": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "symbol": {
                "type": "string"
              },
              "defaultFractionDigits": {
                "type": "integer",
                "format": "int32"
              },
              "numericCode": {
                "type": "integer",
                "format": "int32"
              },
              "numericCodeAsString": {
                "type": "string"
              }
            },
            "example": "USD"
          }
        }
      },
      "BankBranch": {
        "required": [
          "bank",
          "name",
          "relatedEmployee"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "bank": {
            "$ref": "#/components/schemas/Bank"
          },
          "name": {
            "type": "string",
            "example": "BankBranch"
          },
          "relatedEmployee": {
            "type": "string",
            "example": "1"
          }
        }
      },
      "CurrentAccount": {
        "required": [
          "active",
          "bankAccount",
          "code",
          "contactInformation",
          "currentAccountBankAccounts",
          "sector",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "code": {
            "type": "string",
            "example": "A-001"
          },
          "title": {
            "type": "string",
            "example": "Apple Inc. California"
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "sector": {
            "$ref": "#/components/schemas/SectorEnum"
          },
          "contactInformation": {
            "$ref": "#/components/schemas/CurrentContactInformation"
          },
          "bankAccount": {
            "$ref": "#/components/schemas/BankAccount"
          },
          "currentAccountBankAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrentAccountBankAccount"
            }
          }
        }
      },
      "CurrentAccountBankAccount": {
        "required": [
          "accountNumber",
          "bank",
          "branch",
          "currency",
          "currentAccount",
          "iban"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "currentAccount": {
            "$ref": "#/components/schemas/CurrentBankAccountRef"
          },
          "bank": {
            "$ref": "#/components/schemas/Bank"
          },
          "branch": {
            "type": "string",
            "example": "TUZLA"
          },
          "accountNumber": {
            "type": "string",
            "example": "999999999999"
          },
          "iban": {
            "type": "string",
            "example": "TR00010001000200020002000"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyEnum"
          }
        }
      },
      "CurrentAccountType": {
        "type": "string",
        "example": "SELLER",
        "enum": [
          "CUSTOMER",
          "SELLER",
          "OFFICIAL",
          "RUNNING"
        ]
      },
      "CurrentBankAccountRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 13
          }
        }
      },
      "CurrentContactInformation": {
        "required": [
          "accountType",
          "address",
          "authorizedPerson",
          "currency",
          "email",
          "faxNo",
          "invoicedWithCurrency",
          "number",
          "taxAdmin",
          "taxNo"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "address": {
            "type": "string",
            "example": "221B Baker Street"
          },
          "authorizedPerson": {
            "type": "string",
            "example": "Ef"
          },
          "faxNo": {
            "type": "string",
            "example": "+44 161 999 8888"
          },
          "webAddress": {
            "type": "string",
            "example": "www.apple.com"
          },
          "email": {
            "type": "string",
            "example": "steve@mac.com"
          },
          "specialCode": {
            "type": "string",
            "example": "S001"
          },
          "number": {
            "type": "string",
            "example": "+90 555 444 33 22"
          },
          "backupNumber": {
            "type": "string",
            "example": "+90 888 777 66 55"
          },
          "taxAdmin": {
            "type": "string",
            "example": "Tuzla Vergi Dairesi"
          },
          "taxNo": {
            "type": "integer",
            "format": "int64",
            "example": 12345678901
          },
          "invoicedWithCurrency": {
            "type": "boolean",
            "example": false
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyEnum"
          },
          "accountType": {
            "$ref": "#/components/schemas/CurrentAccountType"
          }
        }
      },
      "EmployeeExtendedRef": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "John"
          },
          "surname": {
            "type": "string",
            "example": "Doe"
          },
          "companyBranch": {
            "$ref": "#/components/schemas/Branch"
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          },
          "email": {
            "type": "string",
            "example": "stevejobs@mac.com"
          }
        }
      },
      "Extras": {
        "required": [
          "deliveryDate",
          "employee",
          "paymentMethod"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "deliveryDate": {
            "type": "string",
            "description": "Delivery Date",
            "format": "date",
            "example": "2025-07-01"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment Method",
            "example": "Cash"
          },
          "employee": {
            "$ref": "#/components/schemas/EmployeeExtendedRef"
          },
          "bankAccounts": {
            "type": "array",
            "description": "Bank Accounts",
            "items": {
              "$ref": "#/components/schemas/BankAccount"
            }
          },
          "technicalDetails": {
            "type": "array",
            "description": "Technical Details",
            "items": {
              "type": "string",
              "description": "Technical Details"
            }
          },
          "designFileRequired": {
            "type": "boolean"
          },
          "materialRequestRequired": {
            "type": "boolean"
          }
        },
        "description": "Proposal Extras"
      },
      "LaborCost": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "employee": {
            "$ref": "#/components/schemas/EmployeeExtendedRef"
          },
          "description": {
            "type": "string",
            "description": "Description",
            "example": "Description"
          },
          "manHour": {
            "type": "number",
            "description": "Man / Hour",
            "example": 0
          },
          "manHourCost": {
            "type": "number",
            "description": "Man Hour Cost",
            "example": 0
          },
          "cost": {
            "type": "number",
            "description": "Cost",
            "example": 0
          }
        },
        "description": "Proposal Labor Cost Items"
      },
      "ProductRowItem": {
        "required": [
          "discount",
          "expense",
          "price",
          "productCard",
          "profit",
          "profitMargin"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "productCard": {
            "$ref": "#/components/schemas/ProductCardRef"
          },
          "discount": {
            "type": "number",
            "description": "Discount",
            "example": 0
          },
          "expense": {
            "type": "number",
            "description": "Expense",
            "example": 0
          },
          "profit": {
            "type": "number",
            "description": "Profit",
            "example": 0
          },
          "profitMargin": {
            "type": "number",
            "description": "Profit Margin %",
            "example": 0
          },
          "price": {
            "type": "number",
            "description": "Price",
            "example": 0
          },
          "rowTotal": {
            "type": "number",
            "description": "Row Total",
            "example": 0
          }
        },
        "description": "Proposal Product Rows"
      },
      "Proposal": {
        "required": [
          "additionalCosts",
          "currentAccount",
          "date",
          "description",
          "discount",
          "expense",
          "extras",
          "finalTotal",
          "products",
          "proposalNo",
          "proposalState",
          "tax",
          "total",
          "totalTax",
          "unitDiscount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "date": {
            "type": "string",
            "description": "Purchase Order Date",
            "format": "date",
            "example": "2021-07-01"
          },
          "proposalState": {
            "$ref": "#/components/schemas/ProposalStateEnum"
          },
          "proposalNo": {
            "type": "string",
            "description": "Proposal Number",
            "example": "PO-2021-07-01"
          },
          "currentAccount": {
            "$ref": "#/components/schemas/CurrentAccount"
          },
          "discount": {
            "type": "number",
            "description": "Proposal Discount",
            "example": 0
          },
          "expense": {
            "type": "number",
            "description": "Proposal Expense",
            "example": 0
          },
          "tax": {
            "type": "number",
            "description": "Proposal Tax",
            "example": 0
          },
          "total": {
            "type": "number",
            "description": "Proposal Total",
            "example": 0
          },
          "description": {
            "type": "string",
            "description": "Proposal Description",
            "example": "Proposal Description"
          },
          "products": {
            "type": "array",
            "description": "Proposal Product Rows",
            "items": {
              "$ref": "#/components/schemas/ProductRowItem"
            }
          },
          "laborCosts": {
            "type": "array",
            "description": "Proposal Labor Cost Items",
            "items": {
              "$ref": "#/components/schemas/LaborCost"
            }
          },
          "materialCards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MaterialCard"
            }
          },
          "unitDiscount": {
            "type": "number",
            "description": "Proposal Unit Discount",
            "example": 0
          },
          "totalTax": {
            "type": "number",
            "description": "Proposal Total Tax",
            "example": 0
          },
          "additionalCosts": {
            "type": "number",
            "description": "Proposal Additional Costs",
            "example": 0
          },
          "finalTotal": {
            "type": "number",
            "description": "Proposal Final Total",
            "example": 0
          },
          "extras": {
            "$ref": "#/components/schemas/Extras"
          }
        }
      },
      "ProposalStateEnum": {
        "type": "string",
        "description": "Purchase Order Name",
        "example": "CREATED",
        "enum": [
          "CREATED",
          "FORWARDED_TO_CUSTOMER",
          "CUSTOMER_ACCEPTED",
          "CUSTOMER_PARTIALLY_ACCEPTED",
          "PRODUCTION_STARTED",
          "CUSTOMER_REJECTED",
          "CANCELLED",
          "DELIVERED"
        ]
      },
      "SectorEnum": {
        "type": "string",
        "example": "IT",
        "enum": [
          "METAL",
          "YACHTING",
          "ALUMINIUM",
          "IT",
          "FOOD"
        ]
      },
      "Project": {
        "required": [
          "code",
          "currentAccount",
          "employee",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "currentAccount": {
            "$ref": "#/components/schemas/CurrentAccount"
          },
          "code": {
            "type": "string",
            "example": "A-001"
          },
          "name": {
            "type": "string",
            "example": "Apple Inc. California"
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          }
        }
      },
      "PurchaseOrder": {
        "required": [
          "currentAccount",
          "date",
          "description",
          "employee",
          "name",
          "project"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Purchase Order ID",
            "format": "int64",
            "example": 1
          },
          "date": {
            "type": "string",
            "description": "Purchase Order Date",
            "format": "date",
            "example": "2021-07-01"
          },
          "name": {
            "type": "string",
            "description": "Purchase Order Name",
            "example": "PO-2021-07-01"
          },
          "employee": {
            "$ref": "#/components/schemas/EmployeeExtendedRef"
          },
          "description": {
            "type": "string",
            "description": "Purchase Order Description",
            "example": "Purchase Order Description"
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "currentAccount": {
            "$ref": "#/components/schemas/CurrentAccount"
          },
          "purchaseOrderItems": {
            "type": "array",
            "description": "Purchase Order Items",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderItem"
            }
          }
        }
      },
      "PurchaseOrderItem": {
        "required": [
          "materialCard",
          "quantity",
          "unit"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "materialCard": {
            "$ref": "#/components/schemas/MaterialCard"
          },
          "quantity": {
            "type": "number"
          },
          "unit": {
            "type": "string",
            "enum": [
              "KG",
              "GR",
              "METER",
              "M2",
              "M3",
              "LITRE",
              "PIECE",
              "PACKAGE",
              "PAIR",
              "PLATE",
              "MM"
            ]
          }
        },
        "description": "Purchase Order Items"
      },
      "CurrentAccountTransaction": {
        "required": [
          "amount",
          "bankAccount",
          "currency",
          "currentAccount",
          "date",
          "debtType",
          "description",
          "paymentType",
          "transactionFee",
          "transactionType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "date": {
            "type": "string",
            "format": "date",
            "example": "0035-05-23"
          },
          "currentAccount": {
            "$ref": "#/components/schemas/CurrentAccount"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Description"
          },
          "transactionType": {
            "$ref": "#/components/schemas/TransactionTypeEnum"
          },
          "paymentType": {
            "$ref": "#/components/schemas/PaymentTypeEnum"
          },
          "bankAccount": {
            "$ref": "#/components/schemas/BankAccount"
          },
          "transactionFee": {
            "type": "number",
            "example": 105.06
          },
          "debtType": {
            "$ref": "#/components/schemas/DebtTypeEnum"
          },
          "amount": {
            "type": "number",
            "example": 110.1
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyEnum"
          }
        }
      },
      "DebtTypeEnum": {
        "type": "string",
        "example": "DEBIT",
        "enum": [
          "DEBIT",
          "CREDIT"
        ]
      },
      "PaymentTypeEnum": {
        "type": "string",
        "example": "CASH",
        "enum": [
          "NO_PAYMENT",
          "CASH",
          "CHECK",
          "BOND",
          "EFT",
          "BANK_CARD"
        ]
      },
      "TransactionTypeEnum": {
        "type": "string",
        "example": "ORDER",
        "enum": [
          "ORDER",
          "INVOICE",
          "PAYMENT",
          "COLLECTION",
          "EXPENSE",
          "EMPLOYEE_ADVANCE",
          "EMPLOYEE_SALARY",
          "TAX",
          "SOCIAL_SECURITY",
          "FREELANCE_RECEIPT",
          "RENT",
          "TRANSFER",
          "DOCUMENT_CANCELLATION"
        ]
      },
      "AdditionalCost": {
        "required": [
          "code",
          "description",
          "unit"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "code": {
            "type": "string",
            "example": "M-1"
          },
          "description": {
            "type": "string",
            "example": "Description for Additional Costs"
          },
          "unit": {
            "$ref": "#/components/schemas/UnitEnum"
          },
          "specialCode": {
            "type": "string",
            "example": "SPEC001"
          }
        }
      },
      "EmployeeOvertime": {
        "required": [
          "overTimePercentage",
          "overtimeDate",
          "workingHours"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "description": {
            "type": "string"
          },
          "overtimeDate": {
            "type": "string",
            "format": "date",
            "example": "2024-06-28"
          },
          "workingHours": {
            "type": "number",
            "example": 3.5
          },
          "overTimePercentage": {
            "$ref": "#/components/schemas/OverTimePercentage"
          },
          "employee": {
            "$ref": "#/components/schemas/EmployeeRef"
          }
        }
      },
      "EmployeePayment": {
        "required": [
          "amount",
          "amountCurrency",
          "bankAccount",
          "description",
          "paymentDate",
          "paymentType",
          "transactionCost"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "paymentDate": {
            "type": "string",
            "format": "date",
            "example": "2024-06-28"
          },
          "paymentType": {
            "$ref": "#/components/schemas/EmployeePaymentType"
          },
          "description": {
            "type": "string",
            "example": "Salary payment for June"
          },
          "bankAccount": {
            "$ref": "#/components/schemas/BankAccount"
          },
          "transactionCost": {
            "type": "number",
            "example": 50
          },
          "amount": {
            "type": "number",
            "example": 1500
          },
          "amountCurrency": {
            "type": "object",
            "properties": {
              "currencyCode": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "symbol": {
                "type": "string"
              },
              "defaultFractionDigits": {
                "type": "integer",
                "format": "int32"
              },
              "numericCode": {
                "type": "integer",
                "format": "int32"
              },
              "numericCodeAsString": {
                "type": "string"
              }
            },
            "example": "USD"
          },
          "employee": {
            "$ref": "#/components/schemas/EmployeeRef"
          }
        }
      },
      "EmployeePaymentType": {
        "type": "string",
        "example": "SALARY",
        "enum": [
          "SALARY",
          "SALARY_PAYMENT",
          "OVERTIME",
          "ADVANCE",
          "DEDUCTION",
          "TRANSFER",
          "SEIZURE",
          "ADDITIONAL_PAYMENT",
          "TRAVEL_PAYMENT"
        ]
      },
      "EmployeeRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 13
          },
          "name": {
            "type": "string",
            "example": "John"
          },
          "surname": {
            "type": "string",
            "example": "Doe"
          },
          "companyBranch": {
            "$ref": "#/components/schemas/Branch"
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          }
        }
      },
      "OverTimePercentage": {
        "type": "string",
        "example": "50",
        "enum": [
          "P50",
          "P100",
          "P150",
          "P200"
        ]
      },
      "TimeKeeping": {
        "required": [
          "additionalPayments",
          "deductions",
          "employee",
          "month",
          "netSalary",
          "normalWorkingDays",
          "overtimes",
          "timeOffs",
          "title",
          "total",
          "unpaidTimeOffHours",
          "weekendWorkingHours",
          "year"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "employee": {
            "$ref": "#/components/schemas/EmployeeRef"
          },
          "year": {
            "type": "integer",
            "format": "int32",
            "example": 2024
          },
          "month": {
            "type": "integer",
            "format": "int32",
            "example": 12
          },
          "netSalary": {
            "type": "number",
            "example": 12
          },
          "normalWorkingDays": {
            "type": "number",
            "example": 100
          },
          "weekendWorkingHours": {
            "type": "number",
            "example": 60
          },
          "unpaidTimeOffHours": {
            "type": "number",
            "example": 12
          },
          "timeOffs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeOff"
            }
          },
          "total": {
            "type": "number",
            "example": 140
          },
          "title": {
            "type": "string",
            "example": "Şubat Ayı Puantajı"
          },
          "deductions": {
            "type": "array",
            "example": 100,
            "items": {
              "$ref": "#/components/schemas/EmployeePayment"
            }
          },
          "additionalPayments": {
            "type": "array",
            "example": 100,
            "items": {
              "$ref": "#/components/schemas/EmployeePayment"
            }
          },
          "overtimes": {
            "type": "array",
            "example": 40,
            "items": {
              "$ref": "#/components/schemas/EmployeeOvertime"
            }
          }
        }
      },
      "TimeOff": {
        "required": [
          "endDateTime",
          "startDateTime",
          "timeOffType",
          "workingDays",
          "workingHours"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "startDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "endDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "workingDays": {
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "workingHours": {
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "timeOffType": {
            "$ref": "#/components/schemas/TimeOffType"
          },
          "unPaid": {
            "type": "boolean"
          }
        }
      },
      "TimeOffType": {
        "type": "string",
        "example": "MARRIAGE",
        "enum": [
          "SICK_LEAVE",
          "VACATION",
          "ON_DEMAND",
          "MARRIAGE",
          "CHILD_BIRTH"
        ]
      },
      "Section": {
        "required": [
          "employee",
          "name",
          "sectionType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Malzeme Tedarik"
          },
          "sectionType": {
            "$ref": "#/components/schemas/SectionTypeEnum"
          },
          "employee": {
            "$ref": "#/components/schemas/EmployeeExtendedRef"
          }
        }
      },
      "SectionTypeEnum": {
        "type": "string",
        "example": "IT",
        "enum": [
          "MANAGEMENT",
          "IT",
          "PRODUCTION",
          "FINANCE",
          "DESIGN",
          "ACCOUNTING",
          "PURCHASING"
        ]
      },
      "Role": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Developer"
          }
        }
      },
      "PublicHoliday": {
        "required": [
          "endDate",
          "startDate",
          "year"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "year": {
            "type": "integer",
            "format": "int32",
            "example": 2024
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Ataturk Street"
          }
        }
      },
      "PaymentMethod": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "code": {
            "type": "string",
            "example": "P1"
          },
          "name": {
            "type": "string",
            "example": "Credit"
          }
        }
      },
      "Machine": {
        "required": [
          "code",
          "description",
          "employee"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "code": {
            "type": "string",
            "example": "M-1"
          },
          "description": {
            "type": "string",
            "example": "M-1"
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          }
        }
      },
      "Depot": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Tuzla Deposu"
          }
        }
      },
      "Company": {
        "required": [
          "address",
          "branch",
          "code",
          "phone",
          "phoneBackup",
          "taxAdmin",
          "taxNumber",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "code": {
            "type": "string",
            "example": "1234"
          },
          "title": {
            "type": "string",
            "example": "Falcons SpaceShipping"
          },
          "address": {
            "type": "string",
            "example": "The interior of the third crater on the planet Mars."
          },
          "phone": {
            "type": "string",
            "example": "+90 555 444 33 22"
          },
          "phoneBackup": {
            "type": "string",
            "example": "+90 999 888 66 55"
          },
          "taxAdmin": {
            "type": "string",
            "example": "Tuzla Vergi Dairesi"
          },
          "taxNumber": {
            "type": "string",
            "example": "9987 8886 4433 12 12"
          },
          "branch": {
            "$ref": "#/components/schemas/Branch"
          }
        }
      },
      "ExpenseCard": {
        "required": [
          "code",
          "description",
          "unit"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "code": {
            "type": "string",
            "example": "C-1"
          },
          "description": {
            "type": "string",
            "example": "Description"
          },
          "unit": {
            "$ref": "#/components/schemas/Unit"
          }
        }
      },
      "ExpenseInvoice": {
        "required": [
          "code",
          "currency",
          "date",
          "finalTotal",
          "fixedCurrency",
          "fixedCurrencyValue",
          "generalDiscount",
          "invoiceItems",
          "subTotal",
          "totalVat",
          "unitDiscount",
          "warehouseBranch"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "code": {
            "type": "string",
            "example": "A-001"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "warehouseBranch": {
            "$ref": "#/components/schemas/WarehouseBranchEnum"
          },
          "specialCode": {
            "type": "string",
            "example": "SP-001"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyEnum"
          },
          "fixedCurrency": {
            "type": "boolean",
            "example": true
          },
          "fixedCurrencyValue": {
            "type": "number",
            "example": 257.6
          },
          "invoiceItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpenseInvoiceItem"
            }
          },
          "generalDiscount": {
            "type": "number",
            "example": 3567.5
          },
          "unitDiscount": {
            "type": "number",
            "example": 3000
          },
          "totalVat": {
            "type": "number",
            "example": 200
          },
          "subTotal": {
            "type": "number",
            "example": 15000
          },
          "finalTotal": {
            "type": "number",
            "example": 259
          }
        }
      },
      "ExpenseInvoiceItem": {
        "required": [
          "discount",
          "expenseCard",
          "price",
          "quantity",
          "rowTotal",
          "tax",
          "unit"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "expenseCard": {
            "$ref": "#/components/schemas/ExpenseCard"
          },
          "unit": {
            "$ref": "#/components/schemas/UnitEnum"
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "price": {
            "type": "number",
            "example": 1
          },
          "discount": {
            "type": "number",
            "example": 1
          },
          "tax": {
            "type": "number",
            "example": 1
          },
          "rowTotal": {
            "type": "number",
            "example": 1
          }
        }
      },
      "CashAccount": {
        "required": [
          "code",
          "currency",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "code": {
            "type": "string",
            "example": "M-1"
          },
          "name": {
            "type": "string",
            "example": "M-1"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyEnum"
          }
        }
      },
      "CashAccountTransaction": {
        "required": [
          "balance",
          "date",
          "description",
          "total"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "date": {
            "type": "string",
            "format": "date",
            "example": "2024-06-28"
          },
          "cashAccount": {
            "$ref": "#/components/schemas/CashAccount"
          },
          "currentAccount": {
            "$ref": "#/components/schemas/CurrentAccount"
          },
          "description": {
            "type": "string",
            "example": "Description"
          },
          "debtStatus": {
            "type": "boolean"
          },
          "total": {
            "type": "number",
            "example": 50
          },
          "balance": {
            "type": "number",
            "example": 50
          }
        }
      },
      "FilteringRequest": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "externalDocs": {
              "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#rsql-syntax-reference"
            },
            "default": ""
          },
          "sort": {
            "type": "string",
            "example": "id,asc",
            "externalDocs": {
              "url": "https://github.com/perplexhub/rsql-jpa-specification?tab=readme-ov-file#sort-syntax"
            }
          },
          "page": {
            "type": "integer",
            "description": "0-index page",
            "format": "int32",
            "example": 0,
            "default": 0
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "example": 50,
            "default": 50
          },
          "namedFilters": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "show_passives"
              ]
            }
          }
        },
        "description": "Filtering request via RSQL. Empty filter returns everything. \n\nExample filter: (endDate\u003E2023-05-05 and endDate\u003C2024-05-08) and name==Jon \n\nExample sort: id,asc;company.id,desc"
      },
      "User": {
        "required": [
          "email",
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 13
          },
          "email": {
            "type": "string",
            "example": "erpuser@sdmail.com"
          },
          "role": {
            "type": "string",
            "example": "USER",
            "enum": [
              "USER",
              "ADMIN"
            ]
          }
        }
      },
      "Users": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ResponseBase": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "RefreshResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "Units": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Unit"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Shelves": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shelf"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ServiceGroups": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceGroup"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ServiceCards": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceCards"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ProductGroups": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductGroup"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ProductCards": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCard"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MaterialGroups": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MaterialGroup"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MaterialCards": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MaterialCards"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "FixtureGroups": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FixtureGroup"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "FixtureCards": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FixtureCard"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AssignmentTransactions": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssignmentTransaction"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AssignmentCards": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssignmentCard"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Proposals": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Proposal"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PurchaseOrders": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrder"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Invoices": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "InvoiceCalculationResult": {
        "required": [
          "total",
          "totalDiscount",
          "totalVAT"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "example": 3900.66
          },
          "totalVAT": {
            "type": "number",
            "example": 3500.66
          },
          "totalDiscount": {
            "type": "number",
            "example": 3120.66
          }
        }
      },
      "CurrentAccounts": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrentAccount"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CurrentAccountTransactions": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrentAccountTransaction"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CurrentAccountBankAccounts": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrentAccountBankAccount"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AdditionalCosts": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalCost"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Projects": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TimeKeepings": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeKeeping"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TimeKeepingCalculationResult": {
        "required": [
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "example": 3900.66
          }
        }
      },
      "Employees": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Employee"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TimeOffStatus": {
        "required": [
          "allTimeUsed",
          "employee",
          "entitled",
          "profession",
          "transferred",
          "usable",
          "usedCurrentYear",
          "workingDays"
        ],
        "type": "object",
        "properties": {
          "entitled": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "allTimeUsed": {
            "type": "number",
            "example": 15
          },
          "employee": {
            "$ref": "#/components/schemas/EmployeeRef"
          },
          "transferred": {
            "type": "number",
            "example": 5
          },
          "usedCurrentYear": {
            "type": "number",
            "description": "For display only, no id returned",
            "example": 5
          },
          "usable": {
            "type": "number",
            "example": 5
          },
          "profession": {
            "type": "string",
            "example": "Engineer"
          },
          "startDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "workingDays": {
            "type": "number",
            "example": 5
          }
        },
        "description": "Represents calculated time off status (izin durumu) for an employee."
      },
      "TimeOffStatuses": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeOffStatus"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TimeOffs": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeOff"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EmployeePayments": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeePayment"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EmployeeOvertimes": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeOvertime"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Banks": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Bank"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BankBranches": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankBranch"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BankAccounts": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccount"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Departments": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Department"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Branches": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Branch"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Sections": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Section"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Roles": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PublicHolidays": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicHoliday"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PaymentMethods": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethod"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Machines": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Machine"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Depots": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Depot"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Companies": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Company"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ExpenseInvoices": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpenseInvoice"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ExpenseInvoiceCalculationResult": {
        "required": [
          "total",
          "totalDiscount",
          "totalVAT"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "example": 3900.66
          },
          "totalVAT": {
            "type": "number",
            "example": 3500.66
          },
          "totalDiscount": {
            "type": "number",
            "example": 3120.66
          }
        }
      },
      "ExpenseCards": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpenseCard"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CashAccounts": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CashAccount"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CashAccountTransactions": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CashAccountTransaction"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BankAccountEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "branch": {
            "$ref": "#/components/schemas/BankBranchEntity"
          },
          "accountNumber": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "iban": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "currency": {
            "type": "object",
            "properties": {
              "currencyCode": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "symbol": {
                "type": "string"
              },
              "defaultFractionDigits": {
                "type": "integer",
                "format": "int32"
              },
              "numericCode": {
                "type": "integer",
                "format": "int32"
              },
              "numericCodeAsString": {
                "type": "string"
              }
            }
          }
        }
      },
      "BankBranchEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "bank": {
            "$ref": "#/components/schemas/BankEntity"
          },
          "name": {
            "type": "string"
          },
          "relatedEmployee": {
            "type": "string"
          }
        }
      },
      "BankEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "bankName": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "bankShortName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "swiftCode": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "CashAccountEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "TRY",
              "USD",
              "EUR",
              "AUD",
              "GBP"
            ]
          }
        }
      },
      "CashAccountTransactionEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "cashAccount": {
            "$ref": "#/components/schemas/CashAccountEntity"
          },
          "currentAccount": {
            "$ref": "#/components/schemas/CurrentAccountEntity"
          },
          "description": {
            "type": "string"
          },
          "debtStatus": {
            "type": "boolean"
          },
          "total": {
            "type": "number"
          },
          "balance": {
            "type": "number"
          }
        }
      },
      "CurrentAccountBankAccountEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "currentAccount": {
            "$ref": "#/components/schemas/CurrentAccountEntity"
          },
          "bank": {
            "$ref": "#/components/schemas/BankEntity"
          },
          "branch": {
            "type": "string"
          },
          "accountNumber": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "iban": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "currency": {
            "type": "string",
            "enum": [
              "TRY",
              "USD",
              "EUR",
              "AUD",
              "GBP"
            ]
          }
        }
      },
      "CurrentAccountEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "code": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "sector": {
            "type": "string",
            "enum": [
              "METAL",
              "YACHTING",
              "ALUMINIUM",
              "IT",
              "FOOD"
            ]
          },
          "contactInformation": {
            "$ref": "#/components/schemas/CurrentContactInformationEntity"
          },
          "bankAccount": {
            "$ref": "#/components/schemas/BankAccountEntity"
          },
          "currentAccountBankAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrentAccountBankAccountEntity"
            }
          }
        }
      },
      "CurrentContactInformationEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "address": {
            "type": "string"
          },
          "authorizedPerson": {
            "type": "string"
          },
          "faxNo": {
            "type": "string"
          },
          "webAddress": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "specialCode": {
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "backupNumber": {
            "type": "string"
          },
          "taxAdmin": {
            "type": "string"
          },
          "taxNo": {
            "type": "integer",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "enum": [
              "TRY",
              "USD",
              "EUR",
              "AUD",
              "GBP"
            ]
          },
          "invoicedWithCurrency": {
            "type": "boolean"
          },
          "accountType": {
            "type": "string",
            "enum": [
              "CUSTOMER",
              "SELLER",
              "OFFICIAL",
              "RUNNING"
            ]
          }
        }
      },
      "UserEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "USER",
              "ADMIN"
            ]
          }
        }
      },
      "CashAccountBalanceResult": {
        "required": [
          "balance"
        ],
        "type": "object",
        "properties": {
          "balance": {
            "type": "number",
            "example": 3900.66
          }
        }
      },
      "ServiceGroupTree": {
        "type": "object",
        "properties": {
          "serviceGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceGroupTreeItem"
            }
          }
        }
      },
      "ServiceGroupTreeItem": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 13
          },
          "name": {
            "type": "string",
            "example": "metal"
          },
          "code": {
            "type": "string",
            "example": "m.01"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceGroupTreeItem"
            }
          }
        }
      },
      "ProductGroupTree": {
        "type": "object",
        "properties": {
          "productGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductGroupTreeItem"
            }
          }
        }
      },
      "ProductGroupTreeItem": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 13
          },
          "name": {
            "type": "string",
            "example": "metal"
          },
          "code": {
            "type": "string",
            "example": "m.01"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductGroupTreeItem"
            }
          }
        }
      },
      "MaterialGroupTreeDataResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MaterialGroupTreeItem"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MaterialGroupTreeItem": {
        "required": [
          "children",
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 13
          },
          "name": {
            "type": "string",
            "example": "metal"
          },
          "code": {
            "type": "string",
            "example": "m.01"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MaterialGroupTreeItem"
            }
          }
        }
      },
      "FixtureGroupTree": {
        "type": "object",
        "properties": {
          "fixtureGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FixtureGroupTreeItem"
            }
          }
        }
      },
      "FixtureGroupTreeItem": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 13
          },
          "name": {
            "type": "string",
            "example": "metal"
          },
          "code": {
            "type": "string",
            "example": "m.01"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FixtureGroupTreeItem"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Authorization": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}