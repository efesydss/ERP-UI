/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import {
  AssignmentStatusEnum,
  CurrencyEnum,
  CurrentAccountType,
  DebtTypeEnum,
  EmployeePaymentType,
  FixtureTypeEnum,
  InvoiceItemTypeEnum,
  InvoiceTypeEnum,
  MaintenancePeriodEnum,
  MaterialTypeEnum,
  OverTimePercentage,
  PaymentTypeEnum,
  ProductTypeEnum,
  ProposalStateEnum,
  SectionTypeEnum,
  SectorEnum,
  TimeOffType,
  TransactionTypeEnum,
  UnitEnum,
  WarehouseBranchEnum,
  WarrantyPeriodEnum
} from './model'
import type {
  AdditionalCosts,
  AssignmentCards,
  AssignmentTransactions,
  BankAccounts,
  BankBranches,
  Banks,
  Branches,
  CashAccountTransactions,
  CashAccounts,
  Companies,
  CurrentAccountBankAccounts,
  CurrentAccountTransactions,
  CurrentAccounts,
  Departments,
  Depots,
  EmployeeOvertimes,
  EmployeePayments,
  Employees,
  ExpenseCards,
  ExpenseInvoices,
  FixtureCards,
  FixtureGroups,
  Invoices,
  Machines,
  MaterialCards,
  MaterialGroups,
  PaymentMethods,
  ProductCards,
  ProductGroups,
  Projects,
  Proposals,
  PublicHolidays,
  PurchaseOrders,
  Roles,
  Sections,
  ServiceCards,
  ServiceGroups,
  Shelves,
  TimeKeepings,
  TimeOffStatuses,
  TimeOffs,
  Units,
  Users
} from './model'

export const getUsersResponseMock = (overrideResponse: Partial< Users > = {}): Users => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), email: faker.string.alpha(20), role: faker.helpers.arrayElement(['USER','ADMIN'] as const)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getUnitsResponseMock = (overrideResponse: Partial< Units > = {}): Units => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getShelvesResponseMock = (overrideResponse: Partial< Shelves > = {}): Shelves => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), description: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getServiceGroupsResponseMock = (overrideResponse: Partial< ServiceGroups > = {}): ServiceGroups => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getServiceCardsResponseMock = (overrideResponse: Partial< ServiceCards > = {}): ServiceCards => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([[], undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getProductGroupsResponseMock = (overrideResponse: Partial< ProductGroups > = {}): ProductGroups => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getProductCardsResponseMock = (overrideResponse: Partial< ProductCards > = {}): ProductCards => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), productCode: faker.string.alpha(20), productName: faker.string.alpha(20), productGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), productType: faker.helpers.arrayElement(Object.values(ProductTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), productCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), productCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getMaterialGroupsResponseMock = (overrideResponse: Partial< MaterialGroups > = {}): MaterialGroups => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getMaterialCardsResponseMock = (overrideResponse: Partial< MaterialCards > = {}): MaterialCards => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCode: faker.string.alpha(20), materialName: faker.string.alpha(20), materialGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), materialType: faker.helpers.arrayElement(Object.values(MaterialTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), materialCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getFixtureGroupsResponseMock = (overrideResponse: Partial< FixtureGroups > = {}): FixtureGroups => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getFixtureCardsResponseMock = (overrideResponse: Partial< FixtureCards > = {}): FixtureCards => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), fixtureCode: faker.string.alpha(20), fixtureName: faker.string.alpha(20), fixtureGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), fixtureType: faker.helpers.arrayElement(Object.values(FixtureTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fixtureCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAssignmentTransactionsResponseMock = (overrideResponse: Partial< AssignmentTransactions > = {}): AssignmentTransactions => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), assignmentCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), assignmentStatusEnum: faker.helpers.arrayElement(Object.values(AssignmentStatusEnum)), code: faker.string.alpha(20), name: faker.string.alpha(20), fixtureCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), fixtureCode: faker.string.alpha(20), fixtureName: faker.string.alpha(20), fixtureGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), fixtureType: faker.helpers.arrayElement(Object.values(FixtureTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fixtureCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])}, insuranceCompany: faker.string.alpha(20), insurance: faker.datatype.boolean(), insurancePolicyNo: faker.string.alpha(20), insuranceDuration: faker.number.int({min: undefined, max: undefined}), info: faker.string.alpha(20), invoice: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), invoiceItemType: faker.helpers.arrayElement(Object.values(InvoiceItemTypeEnum)), invoiceItemTypeEntityId: faker.string.alpha(20), code: faker.string.alpha(20), name: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), totalAdditionalCosts: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), invoiceTypeEnum: faker.helpers.arrayElement(Object.values(InvoiceTypeEnum))}, warrantyPeriodEnum: faker.helpers.arrayElement(Object.values(WarrantyPeriodEnum)), warrantyDay: faker.number.int({min: undefined, max: undefined}), underMaintenance: faker.datatype.boolean(), maintenanceDuration: faker.number.int({min: undefined, max: undefined}), maintenancePeriodEnum: faker.helpers.arrayElement(Object.values(MaintenancePeriodEnum))}, employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}, transactionDate: faker.date.past().toISOString().split('T')[0], assignmentStatusEnum: faker.helpers.arrayElement(Object.values(AssignmentStatusEnum))})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAssignmentCardsResponseMock = (overrideResponse: Partial< AssignmentCards > = {}): AssignmentCards => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), assignmentStatusEnum: faker.helpers.arrayElement(Object.values(AssignmentStatusEnum)), code: faker.string.alpha(20), name: faker.string.alpha(20), fixtureCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), fixtureCode: faker.string.alpha(20), fixtureName: faker.string.alpha(20), fixtureGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), fixtureType: faker.helpers.arrayElement(Object.values(FixtureTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fixtureCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])}, insuranceCompany: faker.string.alpha(20), insurance: faker.datatype.boolean(), insurancePolicyNo: faker.string.alpha(20), insuranceDuration: faker.number.int({min: undefined, max: undefined}), info: faker.string.alpha(20), invoice: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), invoiceItemType: faker.helpers.arrayElement(Object.values(InvoiceItemTypeEnum)), invoiceItemTypeEntityId: faker.string.alpha(20), code: faker.string.alpha(20), name: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), totalAdditionalCosts: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), invoiceTypeEnum: faker.helpers.arrayElement(Object.values(InvoiceTypeEnum))}, warrantyPeriodEnum: faker.helpers.arrayElement(Object.values(WarrantyPeriodEnum)), warrantyDay: faker.number.int({min: undefined, max: undefined}), underMaintenance: faker.datatype.boolean(), maintenanceDuration: faker.number.int({min: undefined, max: undefined}), maintenancePeriodEnum: faker.helpers.arrayElement(Object.values(MaintenancePeriodEnum))})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getProposalsResponseMock = (overrideResponse: Partial< Proposals > = {}): Proposals => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), date: faker.date.past().toISOString().split('T')[0], proposalState: faker.helpers.arrayElement(Object.values(ProposalStateEnum)), proposalNo: faker.string.alpha(20), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, discount: faker.number.int({min: undefined, max: undefined}), expense: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), total: faker.number.int({min: undefined, max: undefined}), description: faker.string.alpha(20), products: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), productCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, discount: faker.number.int({min: undefined, max: undefined}), expense: faker.number.int({min: undefined, max: undefined}), profit: faker.number.int({min: undefined, max: undefined}), profitMargin: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), laborCosts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), manHour: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manHourCost: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cost: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), materialCards: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCode: faker.string.alpha(20), materialName: faker.string.alpha(20), materialGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), materialType: faker.helpers.arrayElement(Object.values(MaterialTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), materialCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])})), undefined]), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalTax: faker.number.int({min: undefined, max: undefined}), additionalCosts: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), extras: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deliveryDate: faker.date.past().toISOString().split('T')[0], paymentMethod: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, bankAccounts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}})), undefined]), technicalDetails: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), designFileRequired: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), materialRequestRequired: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getPurchaseOrdersResponseMock = (overrideResponse: Partial< PurchaseOrders > = {}): PurchaseOrders => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), date: faker.date.past().toISOString().split('T')[0], name: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, description: faker.string.alpha(20), project: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, code: faker.string.alpha(20), name: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}}, currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, purchaseOrderItems: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCode: faker.string.alpha(20), materialName: faker.string.alpha(20), materialGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), materialType: faker.helpers.arrayElement(Object.values(MaterialTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), materialCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])}, quantity: faker.number.int({min: undefined, max: undefined}), unit: faker.helpers.arrayElement(['KG','GR','METER','M2','M3','LITRE','PIECE','PACKAGE','PAIR','PLATE','MM'] as const)})), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetInvoicesResponseMock = (overrideResponse: Partial< Invoices > = {}): Invoices => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), invoiceItemType: faker.helpers.arrayElement(Object.values(InvoiceItemTypeEnum)), invoiceItemTypeEntityId: faker.string.alpha(20), code: faker.string.alpha(20), name: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), totalAdditionalCosts: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), invoiceTypeEnum: faker.helpers.arrayElement(Object.values(InvoiceTypeEnum))})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getCurrentAccountsResponseMock = (overrideResponse: Partial< CurrentAccounts > = {}): CurrentAccounts => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetCurrentAccountTransactionsResponseMock = (overrideResponse: Partial< CurrentAccountTransactions > = {}): CurrentAccountTransactions => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), date: faker.date.past().toISOString().split('T')[0], currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, description: faker.helpers.arrayElement([faker.string.alpha(20), null]), transactionType: faker.helpers.arrayElement(Object.values(TransactionTypeEnum)), paymentType: faker.helpers.arrayElement(Object.values(PaymentTypeEnum)), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}}, transactionFee: faker.number.int({min: undefined, max: undefined}), debtType: faker.helpers.arrayElement(Object.values(DebtTypeEnum)), amount: faker.number.int({min: undefined, max: undefined}), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getCurrentAccountBankAccountsResponseMock = (overrideResponse: Partial< CurrentAccountBankAccounts > = {}): CurrentAccountBankAccounts => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAdditionalCostsResponseMock = (overrideResponse: Partial< AdditionalCosts > = {}): AdditionalCosts => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getProjectsResponseMock = (overrideResponse: Partial< Projects > = {}): Projects => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, code: faker.string.alpha(20), name: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getTimeKeepingsResponseMock = (overrideResponse: Partial< TimeKeepings > = {}): TimeKeepings => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, year: faker.number.int({min: undefined, max: undefined}), month: faker.number.int({min: undefined, max: undefined}), netSalary: faker.number.int({min: undefined, max: undefined}), normalWorkingDays: faker.number.int({min: undefined, max: undefined}), weekendWorkingHours: faker.number.int({min: undefined, max: undefined}), unpaidTimeOffHours: faker.number.int({min: undefined, max: undefined}), timeOffs: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), startDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, endDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, workingDays: faker.number.int({min: undefined, max: undefined}), workingHours: faker.number.int({min: undefined, max: undefined}), timeOffType: faker.helpers.arrayElement(Object.values(TimeOffType)), unPaid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), total: faker.number.int({min: undefined, max: undefined}), title: faker.string.alpha(20), deductions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), additionalPayments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), overtimes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), overtimeDate: faker.date.past().toISOString().split('T')[0], workingHours: faker.number.int({min: undefined, max: undefined}), overTimePercentage: faker.helpers.arrayElement(Object.values(OverTimePercentage)), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])}))})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getEmployeesResponseMock = (overrideResponse: Partial< Employees > = {}): Employees => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getEmployeeTimeOffStatusesResponseMock = (overrideResponse: Partial< TimeOffStatuses > = {}): TimeOffStatuses => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({entitled: faker.number.int({min: undefined, max: undefined}), allTimeUsed: faker.number.int({min: undefined, max: undefined}), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, transferred: faker.number.int({min: undefined, max: undefined}), usedCurrentYear: faker.number.int({min: undefined, max: undefined}), usable: faker.number.int({min: undefined, max: undefined}), profession: faker.string.alpha(20), startDateTime: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), workingDays: faker.number.int({min: undefined, max: undefined})})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getTimeoffsResponseMock = (overrideResponse: Partial< TimeOffs > = {}): TimeOffs => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), startDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, endDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, workingDays: faker.number.int({min: undefined, max: undefined}), workingHours: faker.number.int({min: undefined, max: undefined}), timeOffType: faker.helpers.arrayElement(Object.values(TimeOffType)), unPaid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getEmployeePaymentsResponseMock = (overrideResponse: Partial< EmployeePayments > = {}): EmployeePayments => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getEmployeeOvertimesResponseMock = (overrideResponse: Partial< EmployeeOvertimes > = {}): EmployeeOvertimes => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), overtimeDate: faker.date.past().toISOString().split('T')[0], workingHours: faker.number.int({min: undefined, max: undefined}), overTimePercentage: faker.helpers.arrayElement(Object.values(OverTimePercentage)), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getBanksResponseMock = (overrideResponse: Partial< Banks > = {}): Banks => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getBankBranchesResponseMock = (overrideResponse: Partial< BankBranches > = {}): BankBranches => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getBankAccountsResponseMock = (overrideResponse: Partial< BankAccounts > = {}): BankAccounts => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getDepartmentsResponseMock = (overrideResponse: Partial< Departments > = {}): Departments => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getBranchesResponseMock = (overrideResponse: Partial< Branches > = {}): Branches => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getSectionsResponseMock = (overrideResponse: Partial< Sections > = {}): Sections => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), sectionType: faker.helpers.arrayElement(Object.values(SectionTypeEnum)), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getRolesResponseMock = (overrideResponse: Partial< Roles > = {}): Roles => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getPublicHolidaysResponseMock = (overrideResponse: Partial< PublicHolidays > = {}): PublicHolidays => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), year: faker.number.int({min: undefined, max: undefined}), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.date.past().toISOString().split('T')[0], description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getPaymentMethodsResponseMock = (overrideResponse: Partial< PaymentMethods > = {}): PaymentMethods => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), name: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getMachinesResponseMock = (overrideResponse: Partial< Machines > = {}): Machines => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getDepotsResponseMock = (overrideResponse: Partial< Depots > = {}): Depots => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getCompaniesResponseMock = (overrideResponse: Partial< Companies > = {}): Companies => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), address: faker.string.alpha(20), phone: faker.string.alpha(20), phoneBackup: faker.string.alpha(20), taxAdmin: faker.string.alpha(20), taxNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getExpenseInvoicesResponseMock = (overrideResponse: Partial< ExpenseInvoices > = {}): ExpenseInvoices => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), expenseCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), unit: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}}, unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined})})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getExpenseCardsResponseMock = (overrideResponse: Partial< ExpenseCards > = {}): ExpenseCards => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), unit: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getCashAccountsResponseMock = (overrideResponse: Partial< CashAccounts > = {}): CashAccounts => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), name: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getCashAccountTransactionsResponseMock = (overrideResponse: Partial< CashAccountTransactions > = {}): CashAccountTransactions => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), date: faker.date.past().toISOString().split('T')[0], cashAccount: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), name: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}, undefined]), currentAccount: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, undefined]), description: faker.string.alpha(20), debtStatus: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), total: faker.number.int({min: undefined, max: undefined}), balance: faker.number.int({min: undefined, max: undefined})})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})


export const getUsersMockHandler = (overrideResponse?: Users | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Users> | Users)) => {
  return http.post('*/api/user/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUsersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUnitsMockHandler = (overrideResponse?: Units | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Units> | Units)) => {
  return http.post('*/api/storage/units', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUnitsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getShelvesMockHandler = (overrideResponse?: Shelves | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Shelves> | Shelves)) => {
  return http.post('*/api/storage/shelves', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getShelvesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getServiceGroupsMockHandler = (overrideResponse?: ServiceGroups | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ServiceGroups> | ServiceGroups)) => {
  return http.post('*/api/storage/serviceGroups', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getServiceGroupsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getServiceCardsMockHandler = (overrideResponse?: ServiceCards | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ServiceCards> | ServiceCards)) => {
  return http.post('*/api/storage/serviceCards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getServiceCardsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProductGroupsMockHandler = (overrideResponse?: ProductGroups | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ProductGroups> | ProductGroups)) => {
  return http.post('*/api/storage/productGroups', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProductGroupsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProductCardsMockHandler = (overrideResponse?: ProductCards | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ProductCards> | ProductCards)) => {
  return http.post('*/api/storage/productCards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProductCardsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getMaterialGroupsMockHandler = (overrideResponse?: MaterialGroups | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<MaterialGroups> | MaterialGroups)) => {
  return http.post('*/api/storage/materialGroups', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getMaterialGroupsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getMaterialCardsMockHandler = (overrideResponse?: MaterialCards | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<MaterialCards> | MaterialCards)) => {
  return http.post('*/api/storage/materialCards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getMaterialCardsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getFixtureGroupsMockHandler = (overrideResponse?: FixtureGroups | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<FixtureGroups> | FixtureGroups)) => {
  return http.post('*/api/storage/fixtureGroups', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getFixtureGroupsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getFixtureCardsMockHandler = (overrideResponse?: FixtureCards | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<FixtureCards> | FixtureCards)) => {
  return http.post('*/api/storage/fixtureCards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getFixtureCardsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAssignmentTransactionsMockHandler = (overrideResponse?: AssignmentTransactions | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AssignmentTransactions> | AssignmentTransactions)) => {
  return http.post('*/api/storage/assignmentTransactions', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAssignmentTransactionsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAssignmentCardsMockHandler = (overrideResponse?: AssignmentCards | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AssignmentCards> | AssignmentCards)) => {
  return http.post('*/api/storage/assignmentCards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAssignmentCardsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProposalsMockHandler = (overrideResponse?: Proposals | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Proposals> | Proposals)) => {
  return http.post('*/api/sales/proposals', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProposalsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPurchaseOrdersMockHandler = (overrideResponse?: PurchaseOrders | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PurchaseOrders> | PurchaseOrders)) => {
  return http.post('*/api/purchasing/purchaseOrders', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPurchaseOrdersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetInvoicesMockHandler = (overrideResponse?: Invoices | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Invoices> | Invoices)) => {
  return http.post('*/api/purchasing/invoices', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetInvoicesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCurrentAccountsMockHandler = (overrideResponse?: CurrentAccounts | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CurrentAccounts> | CurrentAccounts)) => {
  return http.post('*/api/purchasing/currentAccounts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCurrentAccountsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetCurrentAccountTransactionsMockHandler = (overrideResponse?: CurrentAccountTransactions | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CurrentAccountTransactions> | CurrentAccountTransactions)) => {
  return http.post('*/api/purchasing/currentAccountTransactions', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetCurrentAccountTransactionsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCurrentAccountBankAccountsMockHandler = (overrideResponse?: CurrentAccountBankAccounts | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CurrentAccountBankAccounts> | CurrentAccountBankAccounts)) => {
  return http.post('*/api/purchasing/currentAccountBankAccounts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCurrentAccountBankAccountsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAdditionalCostsMockHandler = (overrideResponse?: AdditionalCosts | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AdditionalCosts> | AdditionalCosts)) => {
  return http.post('*/api/purchasing/additionalCosts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAdditionalCostsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProjectsMockHandler = (overrideResponse?: Projects | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Projects> | Projects)) => {
  return http.post('*/api/production/projects', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProjectsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTimeKeepingsMockHandler = (overrideResponse?: TimeKeepings | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TimeKeepings> | TimeKeepings)) => {
  return http.post('*/api/hr/timekeepings', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTimeKeepingsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEmployeesMockHandler = (overrideResponse?: Employees | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Employees> | Employees)) => {
  return http.post('*/api/hr/employees', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEmployeesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEmployeeTimeOffStatusesMockHandler = (overrideResponse?: TimeOffStatuses | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TimeOffStatuses> | TimeOffStatuses)) => {
  return http.post('*/api/hr/employees/timeoffstatuses', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEmployeeTimeOffStatusesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTimeoffsMockHandler = (overrideResponse?: TimeOffs | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TimeOffs> | TimeOffs)) => {
  return http.post('*/api/hr/employee/:id/timeoffs', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTimeoffsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEmployeePaymentsMockHandler = (overrideResponse?: EmployeePayments | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EmployeePayments> | EmployeePayments)) => {
  return http.post('*/api/hr/employee/:id/payments', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEmployeePaymentsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEmployeeOvertimesMockHandler = (overrideResponse?: EmployeeOvertimes | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EmployeeOvertimes> | EmployeeOvertimes)) => {
  return http.post('*/api/hr/employee/:id/overtimes', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEmployeeOvertimesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getBanksMockHandler = (overrideResponse?: Banks | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Banks> | Banks)) => {
  return http.post('*/api/finance/banks', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getBanksResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getBankBranchesMockHandler = (overrideResponse?: BankBranches | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<BankBranches> | BankBranches)) => {
  return http.post('*/api/finance/bankBranches', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getBankBranchesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getBankAccountsMockHandler = (overrideResponse?: BankAccounts | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<BankAccounts> | BankAccounts)) => {
  return http.post('*/api/finance/bankAccounts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getBankAccountsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDepartmentsMockHandler = (overrideResponse?: Departments | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Departments> | Departments)) => {
  return http.post('*/api/company/departments', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDepartmentsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getBranchesMockHandler = (overrideResponse?: Branches | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Branches> | Branches)) => {
  return http.post('*/api/company/branches', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getBranchesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getSectionsMockHandler = (overrideResponse?: Sections | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Sections> | Sections)) => {
  return http.post('*/api/admin/sections', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getSectionsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getRolesMockHandler = (overrideResponse?: Roles | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Roles> | Roles)) => {
  return http.post('*/api/admin/roles', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRolesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPublicHolidaysMockHandler = (overrideResponse?: PublicHolidays | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PublicHolidays> | PublicHolidays)) => {
  return http.post('*/api/admin/publicHolidays', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPublicHolidaysResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPaymentMethodsMockHandler = (overrideResponse?: PaymentMethods | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PaymentMethods> | PaymentMethods)) => {
  return http.post('*/api/admin/paymentMethods', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPaymentMethodsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getMachinesMockHandler = (overrideResponse?: Machines | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Machines> | Machines)) => {
  return http.post('*/api/admin/machines', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getMachinesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDepotsMockHandler = (overrideResponse?: Depots | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Depots> | Depots)) => {
  return http.post('*/api/admin/depots', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDepotsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesMockHandler = (overrideResponse?: Companies | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Companies> | Companies)) => {
  return http.post('*/api/admin/companies', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompaniesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getExpenseInvoicesMockHandler = (overrideResponse?: ExpenseInvoices | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ExpenseInvoices> | ExpenseInvoices)) => {
  return http.post('*/api/accounting/expenseInvoices', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getExpenseInvoicesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getExpenseCardsMockHandler = (overrideResponse?: ExpenseCards | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ExpenseCards> | ExpenseCards)) => {
  return http.post('*/api/accounting/expenseCards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getExpenseCardsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCashAccountsMockHandler = (overrideResponse?: CashAccounts | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CashAccounts> | CashAccounts)) => {
  return http.post('*/api/accounting/cashAccounts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCashAccountsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCashAccountTransactionsMockHandler = (overrideResponse?: CashAccountTransactions | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CashAccountTransactions> | CashAccountTransactions)) => {
  return http.post('*/api/accounting/cashAccountTransactions', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCashAccountTransactionsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getOpenAPIDefinitionMock = () => [
  getUsersMockHandler(),
  getUnitsMockHandler(),
  getShelvesMockHandler(),
  getServiceGroupsMockHandler(),
  getServiceCardsMockHandler(),
  getProductGroupsMockHandler(),
  getProductCardsMockHandler(),
  getMaterialGroupsMockHandler(),
  getMaterialCardsMockHandler(),
  getFixtureGroupsMockHandler(),
  getFixtureCardsMockHandler(),
  getAssignmentTransactionsMockHandler(),
  getAssignmentCardsMockHandler(),
  getProposalsMockHandler(),
  getPurchaseOrdersMockHandler(),
  getGetInvoicesMockHandler(),
  getCurrentAccountsMockHandler(),
  getGetCurrentAccountTransactionsMockHandler(),
  getCurrentAccountBankAccountsMockHandler(),
  getAdditionalCostsMockHandler(),
  getProjectsMockHandler(),
  getTimeKeepingsMockHandler(),
  getEmployeesMockHandler(),
  getEmployeeTimeOffStatusesMockHandler(),
  getTimeoffsMockHandler(),
  getEmployeePaymentsMockHandler(),
  getEmployeeOvertimesMockHandler(),
  getBanksMockHandler(),
  getBankBranchesMockHandler(),
  getBankAccountsMockHandler(),
  getDepartmentsMockHandler(),
  getBranchesMockHandler(),
  getSectionsMockHandler(),
  getRolesMockHandler(),
  getPublicHolidaysMockHandler(),
  getPaymentMethodsMockHandler(),
  getMachinesMockHandler(),
  getDepotsMockHandler(),
  getCompaniesMockHandler(),
  getExpenseInvoicesMockHandler(),
  getExpenseCardsMockHandler(),
  getCashAccountsMockHandler(),
  getCashAccountTransactionsMockHandler()
]
