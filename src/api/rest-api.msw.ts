/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import {
  AssignmentStatusEnum,
  CurrencyEnum,
  CurrentAccountType,
  DebtTypeEnum,
  EmployeePaymentType,
  FixtureTypeEnum,
  InvoiceItemTypeEnum,
  InvoiceTypeEnum,
  MaintenancePeriodEnum,
  MaterialTypeEnum,
  OverTimePercentage,
  PaymentTypeEnum,
  ProductTypeEnum,
  ProposalStateEnum,
  SectionTypeEnum,
  SectorEnum,
  ServiceTypeEnum,
  TimeOffType,
  TransactionTypeEnum,
  UnitEnum,
  WarehouseBranchEnum,
  WarrantyPeriodEnum
} from './model';
import type {
  AdditionalCost,
  AdditionalCosts,
  AssignmentCard,
  AssignmentCards,
  AssignmentTransaction,
  AssignmentTransactions,
  Bank,
  BankAccount,
  BankAccounts,
  BankBranch,
  BankBranches,
  Banks,
  Branch,
  Branches,
  CashAccount,
  CashAccountBalanceResult,
  CashAccountTransaction,
  CashAccountTransactions,
  Companies,
  Company,
  CurrentAccount,
  CurrentAccountBankAccount,
  CurrentAccountBankAccounts,
  CurrentAccountTransaction,
  CurrentAccountTransactions,
  CurrentAccounts,
  Department,
  Departments,
  Depot,
  Depots,
  Employee,
  EmployeeOvertime,
  EmployeeOvertimes,
  EmployeePayment,
  EmployeePayments,
  Employees,
  ExpenseCard,
  ExpenseCards,
  ExpenseInvoice,
  ExpenseInvoiceCalculationResult,
  ExpenseInvoices,
  FixtureCard,
  FixtureCards,
  FixtureGroup,
  FixtureGroupTreeDataResponse,
  FixtureGroups,
  Invoice,
  InvoiceCalculationResult,
  Invoices,
  LoginResponse,
  Logout200,
  Machine,
  Machines,
  MaterialCard,
  MaterialCards,
  MaterialGroup,
  MaterialGroupTreeDataResponse,
  MaterialGroups,
  PaymentMethod,
  PaymentMethods,
  ProductCard,
  ProductCards,
  ProductGroup,
  ProductGroupTreeDataResponse,
  ProductGroups,
  Project,
  Projects,
  Proposal,
  Proposals,
  PublicHoliday,
  PublicHolidays,
  PurchaseOrder,
  PurchaseOrders,
  RefreshResponse,
  Role,
  Roles,
  Section,
  Sections,
  ServiceCard,
  ServiceCards,
  ServiceGroup,
  ServiceGroupTreeDataResponse,
  ServiceGroups,
  Shelf,
  Shelves,
  TimeKeeping,
  TimeKeepingCalculationResult,
  TimeKeepings,
  TimeOff,
  TimeOffStatus,
  TimeOffStatuses,
  TimeOffs,
  Unit,
  Units,
  Users
} from './model';


export const getGetUnitResponseMock = (overrideResponse: Partial< Unit > = {}): Unit => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getUpdateUnitResponseMock = (overrideResponse: Partial< Unit > = {}): Unit => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getDeleteUnitResponseMock = (overrideResponse: Partial< Unit > = {}): Unit => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getGetShelfResponseMock = (overrideResponse: Partial< Shelf > = {}): Shelf => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), description: faker.string.alpha(20), ...overrideResponse})

export const getUpdateShelfResponseMock = (overrideResponse: Partial< Shelf > = {}): Shelf => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), description: faker.string.alpha(20), ...overrideResponse})

export const getDeleteShelfResponseMock = (overrideResponse: Partial< Shelf > = {}): Shelf => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), description: faker.string.alpha(20), ...overrideResponse})

export const getGetServiceGroupResponseMock = (overrideResponse: Partial< ServiceGroup > = {}): ServiceGroup => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), parent: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)}, undefined]), ...overrideResponse})

export const getUpdateServiceGroupResponseMock = (overrideResponse: Partial< ServiceGroup > = {}): ServiceGroup => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), parent: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)}, undefined]), ...overrideResponse})

export const getDeleteServiceGroupResponseMock = (overrideResponse: Partial< ServiceGroup > = {}): ServiceGroup => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), parent: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)}, undefined]), ...overrideResponse})

export const getGetServiceCardResponseMock = (): string => (faker.word.sample())

export const getUpdateServiceCardResponseMock = (overrideResponse: Partial< ServiceCard > = {}): ServiceCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), serviceCode: faker.string.alpha(20), serviceName: faker.string.alpha(20), serviceGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), serviceType: faker.helpers.arrayElement(Object.values(ServiceTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serviceCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined]), ...overrideResponse})

export const getDeleteServiceCardResponseMock = (overrideResponse: Partial< ServiceCard > = {}): ServiceCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), serviceCode: faker.string.alpha(20), serviceName: faker.string.alpha(20), serviceGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), serviceType: faker.helpers.arrayElement(Object.values(ServiceTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serviceCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined]), ...overrideResponse})

export const getGetProductGroupResponseMock = (overrideResponse: Partial< ProductGroup > = {}): ProductGroup => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), parent: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)}, undefined]), ...overrideResponse})

export const getUpdateProductGroupResponseMock = (overrideResponse: Partial< ProductGroup > = {}): ProductGroup => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), parent: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)}, undefined]), ...overrideResponse})

export const getDeleteProductGroupResponseMock = (overrideResponse: Partial< ProductGroup > = {}): ProductGroup => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), parent: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)}, undefined]), ...overrideResponse})

export const getGetProductCardResponseMock = (overrideResponse: Partial< ProductCard > = {}): ProductCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), productCode: faker.string.alpha(20), productName: faker.string.alpha(20), productGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), productType: faker.helpers.arrayElement(Object.values(ProductTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), productCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), productCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, multiplier: faker.number.int({min: undefined, max: undefined})})), undefined]), ...overrideResponse})

export const getUpdateProductCardResponseMock = (overrideResponse: Partial< ProductCard > = {}): ProductCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), productCode: faker.string.alpha(20), productName: faker.string.alpha(20), productGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), productType: faker.helpers.arrayElement(Object.values(ProductTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), productCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), productCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, multiplier: faker.number.int({min: undefined, max: undefined})})), undefined]), ...overrideResponse})

export const getDeleteProductCardResponseMock = (overrideResponse: Partial< ProductCard > = {}): ProductCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), productCode: faker.string.alpha(20), productName: faker.string.alpha(20), productGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), productType: faker.helpers.arrayElement(Object.values(ProductTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), productCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), productCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, multiplier: faker.number.int({min: undefined, max: undefined})})), undefined]), ...overrideResponse})

export const getGetMaterialGroupResponseMock = (overrideResponse: Partial< MaterialGroup > = {}): MaterialGroup => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), parent: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)}, undefined]), ...overrideResponse})

export const getUpdateMaterialGroupResponseMock = (overrideResponse: Partial< MaterialGroup > = {}): MaterialGroup => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), parent: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)}, undefined]), ...overrideResponse})

export const getDeleteMaterialGroupResponseMock = (overrideResponse: Partial< MaterialGroup > = {}): MaterialGroup => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), parent: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)}, undefined]), ...overrideResponse})

export const getGetMaterialCardResponseMock = (overrideResponse: Partial< MaterialCard > = {}): MaterialCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCode: faker.string.alpha(20), materialName: faker.string.alpha(20), materialGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), materialType: faker.helpers.arrayElement(Object.values(MaterialTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), materialCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined]), ...overrideResponse})

export const getUpdateMaterialCardResponseMock = (overrideResponse: Partial< MaterialCard > = {}): MaterialCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCode: faker.string.alpha(20), materialName: faker.string.alpha(20), materialGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), materialType: faker.helpers.arrayElement(Object.values(MaterialTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), materialCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined]), ...overrideResponse})

export const getDeleteMaterialCardResponseMock = (overrideResponse: Partial< MaterialCard > = {}): MaterialCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCode: faker.string.alpha(20), materialName: faker.string.alpha(20), materialGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), materialType: faker.helpers.arrayElement(Object.values(MaterialTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), materialCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined]), ...overrideResponse})

export const getGetFixtureGroupResponseMock = (overrideResponse: Partial< FixtureGroup > = {}): FixtureGroup => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), parent: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)}, undefined]), ...overrideResponse})

export const getUpdateFixtureGroupResponseMock = (overrideResponse: Partial< FixtureGroup > = {}): FixtureGroup => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), parent: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)}, undefined]), ...overrideResponse})

export const getDeleteFixtureGroupResponseMock = (overrideResponse: Partial< FixtureGroup > = {}): FixtureGroup => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), parent: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)}, undefined]), ...overrideResponse})

export const getGetFixtureCardResponseMock = (): string => (faker.word.sample())

export const getUpdateFixtureCardResponseMock = (overrideResponse: Partial< FixtureCard > = {}): FixtureCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), fixtureCode: faker.string.alpha(20), fixtureName: faker.string.alpha(20), fixtureGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), fixtureType: faker.helpers.arrayElement(Object.values(FixtureTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fixtureCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined]), ...overrideResponse})

export const getDeleteFixtureCardResponseMock = (overrideResponse: Partial< FixtureCard > = {}): FixtureCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), fixtureCode: faker.string.alpha(20), fixtureName: faker.string.alpha(20), fixtureGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), fixtureType: faker.helpers.arrayElement(Object.values(FixtureTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fixtureCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined]), ...overrideResponse})

export const getGetAssignmentTransactionResponseMock = (overrideResponse: Partial< AssignmentTransaction > = {}): AssignmentTransaction => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), assignmentCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), assignmentStatusEnum: faker.helpers.arrayElement(Object.values(AssignmentStatusEnum)), code: faker.string.alpha(20), name: faker.string.alpha(20), fixtureCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), fixtureCode: faker.string.alpha(20), fixtureName: faker.string.alpha(20), fixtureGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), fixtureType: faker.helpers.arrayElement(Object.values(FixtureTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fixtureCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])}, insuranceCompany: faker.string.alpha(20), insurance: faker.datatype.boolean(), insurancePolicyNo: faker.string.alpha(20), insuranceDuration: faker.number.int({min: undefined, max: undefined}), info: faker.string.alpha(20), invoice: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), invoiceItemType: faker.helpers.arrayElement(Object.values(InvoiceItemTypeEnum)), invoiceItemTypeEntityId: faker.string.alpha(20), code: faker.string.alpha(20), name: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), totalAdditionalCosts: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), invoiceTypeEnum: faker.helpers.arrayElement(Object.values(InvoiceTypeEnum))}, warrantyPeriodEnum: faker.helpers.arrayElement(Object.values(WarrantyPeriodEnum)), warrantyDay: faker.number.int({min: undefined, max: undefined}), underMaintenance: faker.datatype.boolean(), maintenanceDuration: faker.number.int({min: undefined, max: undefined}), maintenancePeriodEnum: faker.helpers.arrayElement(Object.values(MaintenancePeriodEnum))}, employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}, transactionDate: faker.date.past().toISOString().split('T')[0], assignmentStatusEnum: faker.helpers.arrayElement(Object.values(AssignmentStatusEnum)), ...overrideResponse})

export const getUpdateAssignmentTransactionResponseMock = (overrideResponse: Partial< AssignmentTransaction > = {}): AssignmentTransaction => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), assignmentCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), assignmentStatusEnum: faker.helpers.arrayElement(Object.values(AssignmentStatusEnum)), code: faker.string.alpha(20), name: faker.string.alpha(20), fixtureCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), fixtureCode: faker.string.alpha(20), fixtureName: faker.string.alpha(20), fixtureGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), fixtureType: faker.helpers.arrayElement(Object.values(FixtureTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fixtureCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])}, insuranceCompany: faker.string.alpha(20), insurance: faker.datatype.boolean(), insurancePolicyNo: faker.string.alpha(20), insuranceDuration: faker.number.int({min: undefined, max: undefined}), info: faker.string.alpha(20), invoice: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), invoiceItemType: faker.helpers.arrayElement(Object.values(InvoiceItemTypeEnum)), invoiceItemTypeEntityId: faker.string.alpha(20), code: faker.string.alpha(20), name: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), totalAdditionalCosts: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), invoiceTypeEnum: faker.helpers.arrayElement(Object.values(InvoiceTypeEnum))}, warrantyPeriodEnum: faker.helpers.arrayElement(Object.values(WarrantyPeriodEnum)), warrantyDay: faker.number.int({min: undefined, max: undefined}), underMaintenance: faker.datatype.boolean(), maintenanceDuration: faker.number.int({min: undefined, max: undefined}), maintenancePeriodEnum: faker.helpers.arrayElement(Object.values(MaintenancePeriodEnum))}, employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}, transactionDate: faker.date.past().toISOString().split('T')[0], assignmentStatusEnum: faker.helpers.arrayElement(Object.values(AssignmentStatusEnum)), ...overrideResponse})

export const getDeleteAssignmentTransactionResponseMock = (overrideResponse: Partial< AssignmentTransaction > = {}): AssignmentTransaction => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), assignmentCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), assignmentStatusEnum: faker.helpers.arrayElement(Object.values(AssignmentStatusEnum)), code: faker.string.alpha(20), name: faker.string.alpha(20), fixtureCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), fixtureCode: faker.string.alpha(20), fixtureName: faker.string.alpha(20), fixtureGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), fixtureType: faker.helpers.arrayElement(Object.values(FixtureTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fixtureCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])}, insuranceCompany: faker.string.alpha(20), insurance: faker.datatype.boolean(), insurancePolicyNo: faker.string.alpha(20), insuranceDuration: faker.number.int({min: undefined, max: undefined}), info: faker.string.alpha(20), invoice: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), invoiceItemType: faker.helpers.arrayElement(Object.values(InvoiceItemTypeEnum)), invoiceItemTypeEntityId: faker.string.alpha(20), code: faker.string.alpha(20), name: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), totalAdditionalCosts: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), invoiceTypeEnum: faker.helpers.arrayElement(Object.values(InvoiceTypeEnum))}, warrantyPeriodEnum: faker.helpers.arrayElement(Object.values(WarrantyPeriodEnum)), warrantyDay: faker.number.int({min: undefined, max: undefined}), underMaintenance: faker.datatype.boolean(), maintenanceDuration: faker.number.int({min: undefined, max: undefined}), maintenancePeriodEnum: faker.helpers.arrayElement(Object.values(MaintenancePeriodEnum))}, employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}, transactionDate: faker.date.past().toISOString().split('T')[0], assignmentStatusEnum: faker.helpers.arrayElement(Object.values(AssignmentStatusEnum)), ...overrideResponse})

export const getGetAssignmentCardResponseMock = (overrideResponse: Partial< AssignmentCard > = {}): AssignmentCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), assignmentStatusEnum: faker.helpers.arrayElement(Object.values(AssignmentStatusEnum)), code: faker.string.alpha(20), name: faker.string.alpha(20), fixtureCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), fixtureCode: faker.string.alpha(20), fixtureName: faker.string.alpha(20), fixtureGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), fixtureType: faker.helpers.arrayElement(Object.values(FixtureTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fixtureCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])}, insuranceCompany: faker.string.alpha(20), insurance: faker.datatype.boolean(), insurancePolicyNo: faker.string.alpha(20), insuranceDuration: faker.number.int({min: undefined, max: undefined}), info: faker.string.alpha(20), invoice: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), invoiceItemType: faker.helpers.arrayElement(Object.values(InvoiceItemTypeEnum)), invoiceItemTypeEntityId: faker.string.alpha(20), code: faker.string.alpha(20), name: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), totalAdditionalCosts: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), invoiceTypeEnum: faker.helpers.arrayElement(Object.values(InvoiceTypeEnum))}, warrantyPeriodEnum: faker.helpers.arrayElement(Object.values(WarrantyPeriodEnum)), warrantyDay: faker.number.int({min: undefined, max: undefined}), underMaintenance: faker.datatype.boolean(), maintenanceDuration: faker.number.int({min: undefined, max: undefined}), maintenancePeriodEnum: faker.helpers.arrayElement(Object.values(MaintenancePeriodEnum)), ...overrideResponse})

export const getUpdateAssignmentCardResponseMock = (overrideResponse: Partial< AssignmentCard > = {}): AssignmentCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), assignmentStatusEnum: faker.helpers.arrayElement(Object.values(AssignmentStatusEnum)), code: faker.string.alpha(20), name: faker.string.alpha(20), fixtureCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), fixtureCode: faker.string.alpha(20), fixtureName: faker.string.alpha(20), fixtureGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), fixtureType: faker.helpers.arrayElement(Object.values(FixtureTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fixtureCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])}, insuranceCompany: faker.string.alpha(20), insurance: faker.datatype.boolean(), insurancePolicyNo: faker.string.alpha(20), insuranceDuration: faker.number.int({min: undefined, max: undefined}), info: faker.string.alpha(20), invoice: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), invoiceItemType: faker.helpers.arrayElement(Object.values(InvoiceItemTypeEnum)), invoiceItemTypeEntityId: faker.string.alpha(20), code: faker.string.alpha(20), name: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), totalAdditionalCosts: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), invoiceTypeEnum: faker.helpers.arrayElement(Object.values(InvoiceTypeEnum))}, warrantyPeriodEnum: faker.helpers.arrayElement(Object.values(WarrantyPeriodEnum)), warrantyDay: faker.number.int({min: undefined, max: undefined}), underMaintenance: faker.datatype.boolean(), maintenanceDuration: faker.number.int({min: undefined, max: undefined}), maintenancePeriodEnum: faker.helpers.arrayElement(Object.values(MaintenancePeriodEnum)), ...overrideResponse})

export const getDeleteAssignmentCardResponseMock = (overrideResponse: Partial< AssignmentCard > = {}): AssignmentCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), assignmentStatusEnum: faker.helpers.arrayElement(Object.values(AssignmentStatusEnum)), code: faker.string.alpha(20), name: faker.string.alpha(20), fixtureCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), fixtureCode: faker.string.alpha(20), fixtureName: faker.string.alpha(20), fixtureGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), fixtureType: faker.helpers.arrayElement(Object.values(FixtureTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fixtureCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])}, insuranceCompany: faker.string.alpha(20), insurance: faker.datatype.boolean(), insurancePolicyNo: faker.string.alpha(20), insuranceDuration: faker.number.int({min: undefined, max: undefined}), info: faker.string.alpha(20), invoice: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), invoiceItemType: faker.helpers.arrayElement(Object.values(InvoiceItemTypeEnum)), invoiceItemTypeEntityId: faker.string.alpha(20), code: faker.string.alpha(20), name: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), totalAdditionalCosts: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), invoiceTypeEnum: faker.helpers.arrayElement(Object.values(InvoiceTypeEnum))}, warrantyPeriodEnum: faker.helpers.arrayElement(Object.values(WarrantyPeriodEnum)), warrantyDay: faker.number.int({min: undefined, max: undefined}), underMaintenance: faker.datatype.boolean(), maintenanceDuration: faker.number.int({min: undefined, max: undefined}), maintenancePeriodEnum: faker.helpers.arrayElement(Object.values(MaintenancePeriodEnum)), ...overrideResponse})

export const getGetProposalResponseMock = (overrideResponse: Partial< Proposal > = {}): Proposal => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), date: faker.date.past().toISOString().split('T')[0], proposalState: faker.helpers.arrayElement(Object.values(ProposalStateEnum)), proposalNo: faker.string.alpha(20), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, discount: faker.number.int({min: undefined, max: undefined}), expense: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), total: faker.number.int({min: undefined, max: undefined}), description: faker.string.alpha(20), products: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), productCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, discount: faker.number.int({min: undefined, max: undefined}), expense: faker.number.int({min: undefined, max: undefined}), profit: faker.number.int({min: undefined, max: undefined}), profitMargin: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), laborCosts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), manHour: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manHourCost: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cost: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), materialCards: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCode: faker.string.alpha(20), materialName: faker.string.alpha(20), materialGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), materialType: faker.helpers.arrayElement(Object.values(MaterialTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), materialCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])})), undefined]), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalTax: faker.number.int({min: undefined, max: undefined}), additionalCosts: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), extras: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deliveryDate: faker.date.past().toISOString().split('T')[0], paymentMethod: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, bankAccounts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}})), undefined]), technicalDetails: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), designFileRequired: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), materialRequestRequired: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, ...overrideResponse})

export const getUpdateProposalResponseMock = (overrideResponse: Partial< Proposal > = {}): Proposal => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), date: faker.date.past().toISOString().split('T')[0], proposalState: faker.helpers.arrayElement(Object.values(ProposalStateEnum)), proposalNo: faker.string.alpha(20), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, discount: faker.number.int({min: undefined, max: undefined}), expense: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), total: faker.number.int({min: undefined, max: undefined}), description: faker.string.alpha(20), products: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), productCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, discount: faker.number.int({min: undefined, max: undefined}), expense: faker.number.int({min: undefined, max: undefined}), profit: faker.number.int({min: undefined, max: undefined}), profitMargin: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), laborCosts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), manHour: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manHourCost: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cost: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), materialCards: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCode: faker.string.alpha(20), materialName: faker.string.alpha(20), materialGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), materialType: faker.helpers.arrayElement(Object.values(MaterialTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), materialCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])})), undefined]), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalTax: faker.number.int({min: undefined, max: undefined}), additionalCosts: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), extras: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deliveryDate: faker.date.past().toISOString().split('T')[0], paymentMethod: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, bankAccounts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}})), undefined]), technicalDetails: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), designFileRequired: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), materialRequestRequired: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, ...overrideResponse})

export const getDeleteProposalResponseMock = (overrideResponse: Partial< Proposal > = {}): Proposal => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), date: faker.date.past().toISOString().split('T')[0], proposalState: faker.helpers.arrayElement(Object.values(ProposalStateEnum)), proposalNo: faker.string.alpha(20), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, discount: faker.number.int({min: undefined, max: undefined}), expense: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), total: faker.number.int({min: undefined, max: undefined}), description: faker.string.alpha(20), products: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), productCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, discount: faker.number.int({min: undefined, max: undefined}), expense: faker.number.int({min: undefined, max: undefined}), profit: faker.number.int({min: undefined, max: undefined}), profitMargin: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), laborCosts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), manHour: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manHourCost: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cost: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), materialCards: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCode: faker.string.alpha(20), materialName: faker.string.alpha(20), materialGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), materialType: faker.helpers.arrayElement(Object.values(MaterialTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), materialCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])})), undefined]), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalTax: faker.number.int({min: undefined, max: undefined}), additionalCosts: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), extras: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deliveryDate: faker.date.past().toISOString().split('T')[0], paymentMethod: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, bankAccounts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}})), undefined]), technicalDetails: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), designFileRequired: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), materialRequestRequired: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, ...overrideResponse})

export const getGetPurchaseOrderResponseMock = (overrideResponse: Partial< PurchaseOrder > = {}): PurchaseOrder => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), date: faker.date.past().toISOString().split('T')[0], name: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, description: faker.string.alpha(20), project: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, code: faker.string.alpha(20), name: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}}, currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, purchaseOrderItems: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCode: faker.string.alpha(20), materialName: faker.string.alpha(20), materialGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), materialType: faker.helpers.arrayElement(Object.values(MaterialTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), materialCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])}, quantity: faker.number.int({min: undefined, max: undefined}), unit: faker.helpers.arrayElement(['KG','GR','METER','M2','M3','LITRE','PIECE','PACKAGE','PAIR','PLATE','MM'] as const)})), undefined]), ...overrideResponse})

export const getUpdatePurchaseOrderResponseMock = (overrideResponse: Partial< PurchaseOrder > = {}): PurchaseOrder => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), date: faker.date.past().toISOString().split('T')[0], name: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, description: faker.string.alpha(20), project: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, code: faker.string.alpha(20), name: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}}, currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, purchaseOrderItems: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCode: faker.string.alpha(20), materialName: faker.string.alpha(20), materialGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), materialType: faker.helpers.arrayElement(Object.values(MaterialTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), materialCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])}, quantity: faker.number.int({min: undefined, max: undefined}), unit: faker.helpers.arrayElement(['KG','GR','METER','M2','M3','LITRE','PIECE','PACKAGE','PAIR','PLATE','MM'] as const)})), undefined]), ...overrideResponse})

export const getDeletePurchaseOrderResponseMock = (overrideResponse: Partial< PurchaseOrder > = {}): PurchaseOrder => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), date: faker.date.past().toISOString().split('T')[0], name: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, description: faker.string.alpha(20), project: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, code: faker.string.alpha(20), name: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}}, currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, purchaseOrderItems: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCode: faker.string.alpha(20), materialName: faker.string.alpha(20), materialGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), materialType: faker.helpers.arrayElement(Object.values(MaterialTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), materialCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])}, quantity: faker.number.int({min: undefined, max: undefined}), unit: faker.helpers.arrayElement(['KG','GR','METER','M2','M3','LITRE','PIECE','PACKAGE','PAIR','PLATE','MM'] as const)})), undefined]), ...overrideResponse})

export const getGetInvoiceResponseMock = (overrideResponse: Partial< Invoice > = {}): Invoice => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), invoiceItemType: faker.helpers.arrayElement(Object.values(InvoiceItemTypeEnum)), invoiceItemTypeEntityId: faker.string.alpha(20), code: faker.string.alpha(20), name: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), totalAdditionalCosts: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), invoiceTypeEnum: faker.helpers.arrayElement(Object.values(InvoiceTypeEnum)), ...overrideResponse})

export const getUpdateInvoiceResponseMock = (overrideResponse: Partial< Invoice > = {}): Invoice => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), invoiceItemType: faker.helpers.arrayElement(Object.values(InvoiceItemTypeEnum)), invoiceItemTypeEntityId: faker.string.alpha(20), code: faker.string.alpha(20), name: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), totalAdditionalCosts: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), invoiceTypeEnum: faker.helpers.arrayElement(Object.values(InvoiceTypeEnum)), ...overrideResponse})

export const getDeleteInvoiceResponseMock = (overrideResponse: Partial< Invoice > = {}): Invoice => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), invoiceItemType: faker.helpers.arrayElement(Object.values(InvoiceItemTypeEnum)), invoiceItemTypeEntityId: faker.string.alpha(20), code: faker.string.alpha(20), name: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), totalAdditionalCosts: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), invoiceTypeEnum: faker.helpers.arrayElement(Object.values(InvoiceTypeEnum)), ...overrideResponse})

export const getGetCurrentAccountTransactionResponseMock = (overrideResponse: Partial< CurrentAccountTransaction > = {}): CurrentAccountTransaction => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), date: faker.date.past().toISOString().split('T')[0], currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, description: faker.helpers.arrayElement([faker.string.alpha(20), null]), transactionType: faker.helpers.arrayElement(Object.values(TransactionTypeEnum)), paymentType: faker.helpers.arrayElement(Object.values(PaymentTypeEnum)), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionFee: faker.number.int({min: undefined, max: undefined}), debtType: faker.helpers.arrayElement(Object.values(DebtTypeEnum)), amount: faker.number.int({min: undefined, max: undefined}), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), ...overrideResponse})

export const getUpdateCurrentAccountTransactionResponseMock = (overrideResponse: Partial< CurrentAccountTransaction > = {}): CurrentAccountTransaction => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), date: faker.date.past().toISOString().split('T')[0], currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, description: faker.helpers.arrayElement([faker.string.alpha(20), null]), transactionType: faker.helpers.arrayElement(Object.values(TransactionTypeEnum)), paymentType: faker.helpers.arrayElement(Object.values(PaymentTypeEnum)), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionFee: faker.number.int({min: undefined, max: undefined}), debtType: faker.helpers.arrayElement(Object.values(DebtTypeEnum)), amount: faker.number.int({min: undefined, max: undefined}), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), ...overrideResponse})

export const getDeleteCurrentAccountTransactionResponseMock = (overrideResponse: Partial< CurrentAccountTransaction > = {}): CurrentAccountTransaction => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), date: faker.date.past().toISOString().split('T')[0], currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, description: faker.helpers.arrayElement([faker.string.alpha(20), null]), transactionType: faker.helpers.arrayElement(Object.values(TransactionTypeEnum)), paymentType: faker.helpers.arrayElement(Object.values(PaymentTypeEnum)), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionFee: faker.number.int({min: undefined, max: undefined}), debtType: faker.helpers.arrayElement(Object.values(DebtTypeEnum)), amount: faker.number.int({min: undefined, max: undefined}), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), ...overrideResponse})

export const getGetCurrentAccountBankAccountResponseMock = (overrideResponse: Partial< CurrentAccountBankAccount > = {}): CurrentAccountBankAccount => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), ...overrideResponse})

export const getUpdateCurrentAccountBankAccountResponseMock = (overrideResponse: Partial< CurrentAccountBankAccount > = {}): CurrentAccountBankAccount => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), ...overrideResponse})

export const getDeleteCurrentAccountBankAccountResponseMock = (overrideResponse: Partial< CurrentAccountBankAccount > = {}): CurrentAccountBankAccount => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), ...overrideResponse})

export const getGetCurrentAccountResponseMock = (overrideResponse: Partial< CurrentAccount > = {}): CurrentAccount => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))})), ...overrideResponse})

export const getUpdateCurrentAccountResponseMock = (overrideResponse: Partial< CurrentAccount > = {}): CurrentAccount => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))})), ...overrideResponse})

export const getDeleteCurrentAccountResponseMock = (overrideResponse: Partial< CurrentAccount > = {}): CurrentAccount => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))})), ...overrideResponse})

export const getGetAdditionalCostResponseMock = (overrideResponse: Partial< AdditionalCost > = {}): AdditionalCost => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getUpdateAdditionalCostResponseMock = (overrideResponse: Partial< AdditionalCost > = {}): AdditionalCost => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getDeleteAdditionalCostResponseMock = (overrideResponse: Partial< AdditionalCost > = {}): AdditionalCost => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getGetProjectResponseMock = (overrideResponse: Partial< Project > = {}): Project => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, code: faker.string.alpha(20), name: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}, ...overrideResponse})

export const getUpdateProjectResponseMock = (overrideResponse: Partial< Project > = {}): Project => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, code: faker.string.alpha(20), name: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}, ...overrideResponse})

export const getDeleteProjectResponseMock = (overrideResponse: Partial< Project > = {}): Project => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, code: faker.string.alpha(20), name: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}, ...overrideResponse})

export const getGetTimeKeepingResponseMock = (overrideResponse: Partial< TimeKeeping > = {}): TimeKeeping => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, year: faker.number.int({min: undefined, max: undefined}), month: faker.number.int({min: undefined, max: undefined}), netSalary: faker.number.int({min: undefined, max: undefined}), normalWorkingDays: faker.number.int({min: undefined, max: undefined}), weekendWorkingHours: faker.number.int({min: undefined, max: undefined}), unpaidTimeOffHours: faker.number.int({min: undefined, max: undefined}), timeOffs: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), startDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, endDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, workingDays: faker.number.int({min: undefined, max: undefined}), workingHours: faker.number.int({min: undefined, max: undefined}), timeOffType: faker.helpers.arrayElement(Object.values(TimeOffType)), unPaid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), total: faker.number.int({min: undefined, max: undefined}), title: faker.string.alpha(20), deductions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), additionalPayments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), overtimes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), overtimeDate: faker.date.past().toISOString().split('T')[0], workingHours: faker.number.int({min: undefined, max: undefined}), overTimePercentage: faker.helpers.arrayElement(Object.values(OverTimePercentage)), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), ...overrideResponse})

export const getUpdateTimeKeepingResponseMock = (overrideResponse: Partial< TimeKeeping > = {}): TimeKeeping => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, year: faker.number.int({min: undefined, max: undefined}), month: faker.number.int({min: undefined, max: undefined}), netSalary: faker.number.int({min: undefined, max: undefined}), normalWorkingDays: faker.number.int({min: undefined, max: undefined}), weekendWorkingHours: faker.number.int({min: undefined, max: undefined}), unpaidTimeOffHours: faker.number.int({min: undefined, max: undefined}), timeOffs: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), startDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, endDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, workingDays: faker.number.int({min: undefined, max: undefined}), workingHours: faker.number.int({min: undefined, max: undefined}), timeOffType: faker.helpers.arrayElement(Object.values(TimeOffType)), unPaid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), total: faker.number.int({min: undefined, max: undefined}), title: faker.string.alpha(20), deductions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), additionalPayments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), overtimes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), overtimeDate: faker.date.past().toISOString().split('T')[0], workingHours: faker.number.int({min: undefined, max: undefined}), overTimePercentage: faker.helpers.arrayElement(Object.values(OverTimePercentage)), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), ...overrideResponse})

export const getDeleteTimeKeepingResponseMock = (overrideResponse: Partial< TimeKeeping > = {}): TimeKeeping => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, year: faker.number.int({min: undefined, max: undefined}), month: faker.number.int({min: undefined, max: undefined}), netSalary: faker.number.int({min: undefined, max: undefined}), normalWorkingDays: faker.number.int({min: undefined, max: undefined}), weekendWorkingHours: faker.number.int({min: undefined, max: undefined}), unpaidTimeOffHours: faker.number.int({min: undefined, max: undefined}), timeOffs: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), startDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, endDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, workingDays: faker.number.int({min: undefined, max: undefined}), workingHours: faker.number.int({min: undefined, max: undefined}), timeOffType: faker.helpers.arrayElement(Object.values(TimeOffType)), unPaid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), total: faker.number.int({min: undefined, max: undefined}), title: faker.string.alpha(20), deductions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), additionalPayments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), overtimes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), overtimeDate: faker.date.past().toISOString().split('T')[0], workingHours: faker.number.int({min: undefined, max: undefined}), overTimePercentage: faker.helpers.arrayElement(Object.values(OverTimePercentage)), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), ...overrideResponse})

export const getGetEmployeeResponseMock = (overrideResponse: Partial< Employee > = {}): Employee => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), ...overrideResponse})

export const getUpdateEmployeeResponseMock = (overrideResponse: Partial< Employee > = {}): Employee => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), ...overrideResponse})

export const getDeleteEmployeeResponseMock = (overrideResponse: Partial< Employee > = {}): Employee => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), ...overrideResponse})

export const getGetTimeOffResponseMock = (overrideResponse: Partial< TimeOff > = {}): TimeOff => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), startDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, endDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, workingDays: faker.number.int({min: undefined, max: undefined}), workingHours: faker.number.int({min: undefined, max: undefined}), timeOffType: faker.helpers.arrayElement(Object.values(TimeOffType)), unPaid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse})

export const getUpdateTimeoffResponseMock = (overrideResponse: Partial< TimeOff > = {}): TimeOff => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), startDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, endDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, workingDays: faker.number.int({min: undefined, max: undefined}), workingHours: faker.number.int({min: undefined, max: undefined}), timeOffType: faker.helpers.arrayElement(Object.values(TimeOffType)), unPaid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse})

export const getDeleteTimeOffResponseMock = (overrideResponse: Partial< TimeOff > = {}): TimeOff => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), startDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, endDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, workingDays: faker.number.int({min: undefined, max: undefined}), workingHours: faker.number.int({min: undefined, max: undefined}), timeOffType: faker.helpers.arrayElement(Object.values(TimeOffType)), unPaid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse})

export const getUpdateEmployeePaymentsResponseMock = (): EmployeePayment[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})))

export const getAddEmployeePaymentResponseMock = (): EmployeePayment[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})))

export const getUpdateEmployeeOvertimesResponseMock = (): EmployeeOvertime[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), overtimeDate: faker.date.past().toISOString().split('T')[0], workingHours: faker.number.int({min: undefined, max: undefined}), overTimePercentage: faker.helpers.arrayElement(Object.values(OverTimePercentage)), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})))

export const getAddEmployeeOvertimesResponseMock = (): EmployeeOvertime[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), overtimeDate: faker.date.past().toISOString().split('T')[0], workingHours: faker.number.int({min: undefined, max: undefined}), overTimePercentage: faker.helpers.arrayElement(Object.values(OverTimePercentage)), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})))

export const getGetBankBranchResponseMock = (overrideResponse: Partial< BankBranch > = {}): BankBranch => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20), ...overrideResponse})

export const getUpdateBankbranchResponseMock = (overrideResponse: Partial< BankBranch > = {}): BankBranch => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20), ...overrideResponse})

export const getDeleteBankBranchResponseMock = (overrideResponse: Partial< BankBranch > = {}): BankBranch => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20), ...overrideResponse})

export const getGetBankAccountResponseMock = (overrideResponse: Partial< BankAccount > = {}): BankAccount => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, ...overrideResponse})

export const getUpdateBankAccountResponseMock = (overrideResponse: Partial< BankAccount > = {}): BankAccount => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, ...overrideResponse})

export const getDeleteBankAccountResponseMock = (overrideResponse: Partial< BankAccount > = {}): BankAccount => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, ...overrideResponse})

export const getGetDepartmentResponseMock = (overrideResponse: Partial< Bank > = {}): Bank => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getUpdateBankResponseMock = (overrideResponse: Partial< Bank > = {}): Bank => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getDeleteBankResponseMock = (overrideResponse: Partial< Bank > = {}): Bank => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getGetDepartment1ResponseMock = (overrideResponse: Partial< Department > = {}): Department => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getUpdateDepartmentResponseMock = (overrideResponse: Partial< Department > = {}): Department => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getDeleteDepartmentResponseMock = (overrideResponse: Partial< Department > = {}): Department => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getGetBranchResponseMock = (overrideResponse: Partial< Branch > = {}): Branch => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getUpdateBranchResponseMock = (overrideResponse: Partial< Branch > = {}): Branch => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getDeleteBranchResponseMock = (overrideResponse: Partial< Branch > = {}): Branch => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getGetSectionResponseMock = (overrideResponse: Partial< Section > = {}): Section => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), sectionType: faker.helpers.arrayElement(Object.values(SectionTypeEnum)), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, ...overrideResponse})

export const getUpdateSectionResponseMock = (overrideResponse: Partial< Section > = {}): Section => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), sectionType: faker.helpers.arrayElement(Object.values(SectionTypeEnum)), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, ...overrideResponse})

export const getDeleteSectionResponseMock = (overrideResponse: Partial< Section > = {}): Section => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), sectionType: faker.helpers.arrayElement(Object.values(SectionTypeEnum)), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, ...overrideResponse})

export const getGetRoleResponseMock = (overrideResponse: Partial< Role > = {}): Role => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getUpdateRoleResponseMock = (overrideResponse: Partial< Role > = {}): Role => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getDeleteRoleResponseMock = (overrideResponse: Partial< Role > = {}): Role => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getGetPublicHolidayResponseMock = (overrideResponse: Partial< PublicHoliday > = {}): PublicHoliday => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), year: faker.number.int({min: undefined, max: undefined}), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.date.past().toISOString().split('T')[0], description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), ...overrideResponse})

export const getUpdatePublicHolidayResponseMock = (overrideResponse: Partial< PublicHoliday > = {}): PublicHoliday => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), year: faker.number.int({min: undefined, max: undefined}), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.date.past().toISOString().split('T')[0], description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), ...overrideResponse})

export const getDeletePublicHolidayResponseMock = (overrideResponse: Partial< PublicHoliday > = {}): PublicHoliday => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), year: faker.number.int({min: undefined, max: undefined}), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.date.past().toISOString().split('T')[0], description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), ...overrideResponse})

export const getGetPaymentMethodResponseMock = (overrideResponse: Partial< PaymentMethod > = {}): PaymentMethod => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), name: faker.string.alpha(20), ...overrideResponse})

export const getUpdatePaymentMethodResponseMock = (overrideResponse: Partial< PaymentMethod > = {}): PaymentMethod => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), name: faker.string.alpha(20), ...overrideResponse})

export const getDeletePaymentMethodResponseMock = (overrideResponse: Partial< PaymentMethod > = {}): PaymentMethod => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), name: faker.string.alpha(20), ...overrideResponse})

export const getGetMachineResponseMock = (overrideResponse: Partial< Machine > = {}): Machine => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}, ...overrideResponse})

export const getUpdateMachineResponseMock = (overrideResponse: Partial< Machine > = {}): Machine => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}, ...overrideResponse})

export const getDeleteMachineResponseMock = (overrideResponse: Partial< Machine > = {}): Machine => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}, ...overrideResponse})

export const getGetDepotResponseMock = (overrideResponse: Partial< Depot > = {}): Depot => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getUpdateDepotResponseMock = (overrideResponse: Partial< Depot > = {}): Depot => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getDeleteDepotResponseMock = (overrideResponse: Partial< Depot > = {}): Depot => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getGetCompanyResponseMock = (overrideResponse: Partial< Company > = {}): Company => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), address: faker.string.alpha(20), phone: faker.string.alpha(20), phoneBackup: faker.string.alpha(20), taxAdmin: faker.string.alpha(20), taxNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, ...overrideResponse})

export const getUpdateCompanyResponseMock = (overrideResponse: Partial< Company > = {}): Company => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), address: faker.string.alpha(20), phone: faker.string.alpha(20), phoneBackup: faker.string.alpha(20), taxAdmin: faker.string.alpha(20), taxNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, ...overrideResponse})

export const getDeleteCompanyResponseMock = (overrideResponse: Partial< Company > = {}): Company => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), address: faker.string.alpha(20), phone: faker.string.alpha(20), phoneBackup: faker.string.alpha(20), taxAdmin: faker.string.alpha(20), taxNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, ...overrideResponse})

export const getGetExpenseInvoiceResponseMock = (overrideResponse: Partial< ExpenseInvoice > = {}): ExpenseInvoice => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), expenseCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), unit: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}}, unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getUpdateExpenseInvoiceResponseMock = (overrideResponse: Partial< ExpenseInvoice > = {}): ExpenseInvoice => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), expenseCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), unit: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}}, unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getDeleteExpenseInvoiceResponseMock = (overrideResponse: Partial< ExpenseInvoice > = {}): ExpenseInvoice => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), expenseCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), unit: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}}, unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getGetExpenseCardResponseMock = (overrideResponse: Partial< ExpenseCard > = {}): ExpenseCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), unit: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, ...overrideResponse})

export const getUpdateExpenseCardResponseMock = (overrideResponse: Partial< ExpenseCard > = {}): ExpenseCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), unit: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, ...overrideResponse})

export const getDeleteExpenseCardResponseMock = (overrideResponse: Partial< ExpenseCard > = {}): ExpenseCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), unit: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, ...overrideResponse})

export const getGetCashAccountTransactionResponseMock = (overrideResponse: Partial< CashAccountTransaction > = {}): CashAccountTransaction => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), date: faker.date.past().toISOString().split('T')[0], cashAccount: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), name: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}, undefined]), currentAccount: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, undefined]), description: faker.string.alpha(20), debtStatus: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), total: faker.number.int({min: undefined, max: undefined}), balance: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getUpdateCashAccountTransactionResponseMock = (overrideResponse: Partial< CashAccountTransaction > = {}): CashAccountTransaction => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), date: faker.date.past().toISOString().split('T')[0], cashAccount: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), name: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}, undefined]), currentAccount: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, undefined]), description: faker.string.alpha(20), debtStatus: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), total: faker.number.int({min: undefined, max: undefined}), balance: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getDeleteCashAccountTransactionResponseMock = (overrideResponse: Partial< CashAccountTransaction > = {}): CashAccountTransaction => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), date: faker.date.past().toISOString().split('T')[0], cashAccount: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), name: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}, undefined]), currentAccount: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, undefined]), description: faker.string.alpha(20), debtStatus: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), total: faker.number.int({min: undefined, max: undefined}), balance: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getGetCashAccountResponseMock = (overrideResponse: Partial< CashAccount > = {}): CashAccount => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), name: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), ...overrideResponse})

export const getUpdateCashAccountResponseMock = (overrideResponse: Partial< CashAccount > = {}): CashAccount => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), name: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), ...overrideResponse})

export const getDeleteCashAccountResponseMock = (overrideResponse: Partial< CashAccount > = {}): CashAccount => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), name: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), ...overrideResponse})

export const getUsersResponseMock = (overrideResponse: Partial< Users > = {}): Users => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), email: faker.string.alpha(20), role: faker.helpers.arrayElement(['USER','ADMIN'] as const)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getRefreshResponseMock = (overrideResponse: Partial< RefreshResponse > = {}): RefreshResponse => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), token: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getLogoutResponseMock = (): Logout200 => ({})

export const getLoginResponseMock = (overrideResponse: Partial< LoginResponse > = {}): LoginResponse => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), token: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), user: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), email: faker.string.alpha(20), role: faker.helpers.arrayElement(['USER','ADMIN'] as const)}, undefined]), ...overrideResponse})

export const getUnitsResponseMock = (overrideResponse: Partial< Units > = {}): Units => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddUnitResponseMock = (overrideResponse: Partial< Unit > = {}): Unit => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getShelvesResponseMock = (overrideResponse: Partial< Shelves > = {}): Shelves => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), description: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddShelfResponseMock = (overrideResponse: Partial< Shelf > = {}): Shelf => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), description: faker.string.alpha(20), ...overrideResponse})

export const getServiceGroupsResponseMock = (overrideResponse: Partial< ServiceGroups > = {}): ServiceGroups => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddServiceGroupResponseMock = (overrideResponse: Partial< ServiceGroup > = {}): ServiceGroup => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), parent: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)}, undefined]), ...overrideResponse})

export const getServiceCardsResponseMock = (overrideResponse: Partial< ServiceCards > = {}): ServiceCards => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([[], undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddServiceCardResponseMock = (overrideResponse: Partial< ServiceCard > = {}): ServiceCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), serviceCode: faker.string.alpha(20), serviceName: faker.string.alpha(20), serviceGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), serviceType: faker.helpers.arrayElement(Object.values(ServiceTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serviceCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined]), ...overrideResponse})

export const getProductGroupsResponseMock = (overrideResponse: Partial< ProductGroups > = {}): ProductGroups => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddProductGroupResponseMock = (overrideResponse: Partial< ProductGroup > = {}): ProductGroup => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), parent: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)}, undefined]), ...overrideResponse})

export const getProductCardsResponseMock = (overrideResponse: Partial< ProductCards > = {}): ProductCards => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), productCode: faker.string.alpha(20), productName: faker.string.alpha(20), productGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), productType: faker.helpers.arrayElement(Object.values(ProductTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), productCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), productCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddProductCardResponseMock = (overrideResponse: Partial< ProductCard > = {}): ProductCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), productCode: faker.string.alpha(20), productName: faker.string.alpha(20), productGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), productType: faker.helpers.arrayElement(Object.values(ProductTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), productCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), productCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, multiplier: faker.number.int({min: undefined, max: undefined})})), undefined]), ...overrideResponse})

export const getMaterialGroupsResponseMock = (overrideResponse: Partial< MaterialGroups > = {}): MaterialGroups => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddMaterialGroupResponseMock = (overrideResponse: Partial< MaterialGroup > = {}): MaterialGroup => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), parent: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)}, undefined]), ...overrideResponse})

export const getMaterialCardsResponseMock = (overrideResponse: Partial< MaterialCards > = {}): MaterialCards => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([[], undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddMaterialCardResponseMock = (overrideResponse: Partial< MaterialCard > = {}): MaterialCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCode: faker.string.alpha(20), materialName: faker.string.alpha(20), materialGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), materialType: faker.helpers.arrayElement(Object.values(MaterialTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), materialCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined]), ...overrideResponse})

export const getFixtureGroupsResponseMock = (overrideResponse: Partial< FixtureGroups > = {}): FixtureGroups => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddFixtureGroupResponseMock = (overrideResponse: Partial< FixtureGroup > = {}): FixtureGroup => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), parent: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20)}, undefined]), ...overrideResponse})

export const getFixtureCardsResponseMock = (overrideResponse: Partial< FixtureCards > = {}): FixtureCards => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), fixtureCode: faker.string.alpha(20), fixtureName: faker.string.alpha(20), fixtureGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), fixtureType: faker.helpers.arrayElement(Object.values(FixtureTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fixtureCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddFixtureCardResponseMock = (overrideResponse: Partial< FixtureCard > = {}): FixtureCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), fixtureCode: faker.string.alpha(20), fixtureName: faker.string.alpha(20), fixtureGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), fixtureType: faker.helpers.arrayElement(Object.values(FixtureTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fixtureCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined]), ...overrideResponse})

export const getAssignmentTransactionsResponseMock = (overrideResponse: Partial< AssignmentTransactions > = {}): AssignmentTransactions => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), assignmentCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), assignmentStatusEnum: faker.helpers.arrayElement(Object.values(AssignmentStatusEnum)), code: faker.string.alpha(20), name: faker.string.alpha(20), fixtureCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), fixtureCode: faker.string.alpha(20), fixtureName: faker.string.alpha(20), fixtureGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), fixtureType: faker.helpers.arrayElement(Object.values(FixtureTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fixtureCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])}, insuranceCompany: faker.string.alpha(20), insurance: faker.datatype.boolean(), insurancePolicyNo: faker.string.alpha(20), insuranceDuration: faker.number.int({min: undefined, max: undefined}), info: faker.string.alpha(20), invoice: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), invoiceItemType: faker.helpers.arrayElement(Object.values(InvoiceItemTypeEnum)), invoiceItemTypeEntityId: faker.string.alpha(20), code: faker.string.alpha(20), name: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), totalAdditionalCosts: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), invoiceTypeEnum: faker.helpers.arrayElement(Object.values(InvoiceTypeEnum))}, warrantyPeriodEnum: faker.helpers.arrayElement(Object.values(WarrantyPeriodEnum)), warrantyDay: faker.number.int({min: undefined, max: undefined}), underMaintenance: faker.datatype.boolean(), maintenanceDuration: faker.number.int({min: undefined, max: undefined}), maintenancePeriodEnum: faker.helpers.arrayElement(Object.values(MaintenancePeriodEnum))}, employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}, transactionDate: faker.date.past().toISOString().split('T')[0], assignmentStatusEnum: faker.helpers.arrayElement(Object.values(AssignmentStatusEnum))})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddAssignmentTransactionResponseMock = (overrideResponse: Partial< AssignmentTransaction > = {}): AssignmentTransaction => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), assignmentCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), assignmentStatusEnum: faker.helpers.arrayElement(Object.values(AssignmentStatusEnum)), code: faker.string.alpha(20), name: faker.string.alpha(20), fixtureCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), fixtureCode: faker.string.alpha(20), fixtureName: faker.string.alpha(20), fixtureGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), fixtureType: faker.helpers.arrayElement(Object.values(FixtureTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fixtureCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])}, insuranceCompany: faker.string.alpha(20), insurance: faker.datatype.boolean(), insurancePolicyNo: faker.string.alpha(20), insuranceDuration: faker.number.int({min: undefined, max: undefined}), info: faker.string.alpha(20), invoice: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), invoiceItemType: faker.helpers.arrayElement(Object.values(InvoiceItemTypeEnum)), invoiceItemTypeEntityId: faker.string.alpha(20), code: faker.string.alpha(20), name: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), totalAdditionalCosts: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), invoiceTypeEnum: faker.helpers.arrayElement(Object.values(InvoiceTypeEnum))}, warrantyPeriodEnum: faker.helpers.arrayElement(Object.values(WarrantyPeriodEnum)), warrantyDay: faker.number.int({min: undefined, max: undefined}), underMaintenance: faker.datatype.boolean(), maintenanceDuration: faker.number.int({min: undefined, max: undefined}), maintenancePeriodEnum: faker.helpers.arrayElement(Object.values(MaintenancePeriodEnum))}, employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}, transactionDate: faker.date.past().toISOString().split('T')[0], assignmentStatusEnum: faker.helpers.arrayElement(Object.values(AssignmentStatusEnum)), ...overrideResponse})

export const getAssignmentCardsResponseMock = (overrideResponse: Partial< AssignmentCards > = {}): AssignmentCards => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), assignmentStatusEnum: faker.helpers.arrayElement(Object.values(AssignmentStatusEnum)), code: faker.string.alpha(20), name: faker.string.alpha(20), fixtureCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), fixtureCode: faker.string.alpha(20), fixtureName: faker.string.alpha(20), fixtureGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), fixtureType: faker.helpers.arrayElement(Object.values(FixtureTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fixtureCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])}, insuranceCompany: faker.string.alpha(20), insurance: faker.datatype.boolean(), insurancePolicyNo: faker.string.alpha(20), insuranceDuration: faker.number.int({min: undefined, max: undefined}), info: faker.string.alpha(20), invoice: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), invoiceItemType: faker.helpers.arrayElement(Object.values(InvoiceItemTypeEnum)), invoiceItemTypeEntityId: faker.string.alpha(20), code: faker.string.alpha(20), name: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), totalAdditionalCosts: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), invoiceTypeEnum: faker.helpers.arrayElement(Object.values(InvoiceTypeEnum))}, warrantyPeriodEnum: faker.helpers.arrayElement(Object.values(WarrantyPeriodEnum)), warrantyDay: faker.number.int({min: undefined, max: undefined}), underMaintenance: faker.datatype.boolean(), maintenanceDuration: faker.number.int({min: undefined, max: undefined}), maintenancePeriodEnum: faker.helpers.arrayElement(Object.values(MaintenancePeriodEnum))})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddAssignmentCardResponseMock = (overrideResponse: Partial< AssignmentCard > = {}): AssignmentCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), assignmentStatusEnum: faker.helpers.arrayElement(Object.values(AssignmentStatusEnum)), code: faker.string.alpha(20), name: faker.string.alpha(20), fixtureCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), fixtureCode: faker.string.alpha(20), fixtureName: faker.string.alpha(20), fixtureGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), fixtureType: faker.helpers.arrayElement(Object.values(FixtureTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fixtureCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])}, insuranceCompany: faker.string.alpha(20), insurance: faker.datatype.boolean(), insurancePolicyNo: faker.string.alpha(20), insuranceDuration: faker.number.int({min: undefined, max: undefined}), info: faker.string.alpha(20), invoice: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), invoiceItemType: faker.helpers.arrayElement(Object.values(InvoiceItemTypeEnum)), invoiceItemTypeEntityId: faker.string.alpha(20), code: faker.string.alpha(20), name: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), totalAdditionalCosts: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), invoiceTypeEnum: faker.helpers.arrayElement(Object.values(InvoiceTypeEnum))}, warrantyPeriodEnum: faker.helpers.arrayElement(Object.values(WarrantyPeriodEnum)), warrantyDay: faker.number.int({min: undefined, max: undefined}), underMaintenance: faker.datatype.boolean(), maintenanceDuration: faker.number.int({min: undefined, max: undefined}), maintenancePeriodEnum: faker.helpers.arrayElement(Object.values(MaintenancePeriodEnum)), ...overrideResponse})

export const getProposalsResponseMock = (overrideResponse: Partial< Proposals > = {}): Proposals => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), date: faker.date.past().toISOString().split('T')[0], proposalState: faker.helpers.arrayElement(Object.values(ProposalStateEnum)), proposalNo: faker.string.alpha(20), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, discount: faker.number.int({min: undefined, max: undefined}), expense: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), total: faker.number.int({min: undefined, max: undefined}), description: faker.string.alpha(20), products: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), productCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, discount: faker.number.int({min: undefined, max: undefined}), expense: faker.number.int({min: undefined, max: undefined}), profit: faker.number.int({min: undefined, max: undefined}), profitMargin: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), laborCosts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), manHour: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manHourCost: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cost: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), materialCards: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCode: faker.string.alpha(20), materialName: faker.string.alpha(20), materialGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), materialType: faker.helpers.arrayElement(Object.values(MaterialTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), materialCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])})), undefined]), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalTax: faker.number.int({min: undefined, max: undefined}), additionalCosts: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), extras: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deliveryDate: faker.date.past().toISOString().split('T')[0], paymentMethod: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, bankAccounts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}})), undefined]), technicalDetails: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), designFileRequired: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), materialRequestRequired: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddProposalResponseMock = (overrideResponse: Partial< Proposal > = {}): Proposal => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), date: faker.date.past().toISOString().split('T')[0], proposalState: faker.helpers.arrayElement(Object.values(ProposalStateEnum)), proposalNo: faker.string.alpha(20), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, discount: faker.number.int({min: undefined, max: undefined}), expense: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), total: faker.number.int({min: undefined, max: undefined}), description: faker.string.alpha(20), products: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), productCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, discount: faker.number.int({min: undefined, max: undefined}), expense: faker.number.int({min: undefined, max: undefined}), profit: faker.number.int({min: undefined, max: undefined}), profitMargin: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), laborCosts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), manHour: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manHourCost: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cost: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), materialCards: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCode: faker.string.alpha(20), materialName: faker.string.alpha(20), materialGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), materialType: faker.helpers.arrayElement(Object.values(MaterialTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), materialCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])})), undefined]), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalTax: faker.number.int({min: undefined, max: undefined}), additionalCosts: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), extras: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deliveryDate: faker.date.past().toISOString().split('T')[0], paymentMethod: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, bankAccounts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}})), undefined]), technicalDetails: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), designFileRequired: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), materialRequestRequired: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, ...overrideResponse})

export const getPurchaseOrdersResponseMock = (overrideResponse: Partial< PurchaseOrders > = {}): PurchaseOrders => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), date: faker.date.past().toISOString().split('T')[0], name: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, description: faker.string.alpha(20), project: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, code: faker.string.alpha(20), name: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}}, currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, purchaseOrderItems: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCode: faker.string.alpha(20), materialName: faker.string.alpha(20), materialGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), materialType: faker.helpers.arrayElement(Object.values(MaterialTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), materialCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])}, quantity: faker.number.int({min: undefined, max: undefined}), unit: faker.helpers.arrayElement(['KG','GR','METER','M2','M3','LITRE','PIECE','PACKAGE','PAIR','PLATE','MM'] as const)})), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddPurchaseOrderResponseMock = (overrideResponse: Partial< PurchaseOrder > = {}): PurchaseOrder => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), date: faker.date.past().toISOString().split('T')[0], name: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, description: faker.string.alpha(20), project: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, code: faker.string.alpha(20), name: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}}, currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, purchaseOrderItems: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), materialCode: faker.string.alpha(20), materialName: faker.string.alpha(20), materialGroup: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, defaultUnit: faker.helpers.arrayElement(Object.values(UnitEnum)), materialType: faker.helpers.arrayElement(Object.values(MaterialTypeEnum)), optimalLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), minimumLevel: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), specialCode: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), shelfLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), materialCardUnits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), multiplier: faker.number.int({min: undefined, max: undefined})})), undefined])}, quantity: faker.number.int({min: undefined, max: undefined}), unit: faker.helpers.arrayElement(['KG','GR','METER','M2','M3','LITRE','PIECE','PACKAGE','PAIR','PLATE','MM'] as const)})), undefined]), ...overrideResponse})

export const getGetInvoicesResponseMock = (overrideResponse: Partial< Invoices > = {}): Invoices => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), invoiceItemType: faker.helpers.arrayElement(Object.values(InvoiceItemTypeEnum)), invoiceItemTypeEntityId: faker.string.alpha(20), code: faker.string.alpha(20), name: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), totalAdditionalCosts: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), invoiceTypeEnum: faker.helpers.arrayElement(Object.values(InvoiceTypeEnum))})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddInvoiceResponseMock = (overrideResponse: Partial< Invoice > = {}): Invoice => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), invoiceItemType: faker.helpers.arrayElement(Object.values(InvoiceItemTypeEnum)), invoiceItemTypeEntityId: faker.string.alpha(20), code: faker.string.alpha(20), name: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), totalAdditionalCosts: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), invoiceTypeEnum: faker.helpers.arrayElement(Object.values(InvoiceTypeEnum)), ...overrideResponse})

export const getCalculateInvoiceTotalResponseMock = (overrideResponse: Partial< InvoiceCalculationResult > = {}): InvoiceCalculationResult => ({total: faker.number.int({min: undefined, max: undefined}), totalVAT: faker.number.int({min: undefined, max: undefined}), totalDiscount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getCurrentAccountsResponseMock = (overrideResponse: Partial< CurrentAccounts > = {}): CurrentAccounts => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddCurrentAccountResponseMock = (overrideResponse: Partial< CurrentAccount > = {}): CurrentAccount => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))})), ...overrideResponse})

export const getGetCurrentAccountTransactionsResponseMock = (overrideResponse: Partial< CurrentAccountTransactions > = {}): CurrentAccountTransactions => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), date: faker.date.past().toISOString().split('T')[0], currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, description: faker.helpers.arrayElement([faker.string.alpha(20), null]), transactionType: faker.helpers.arrayElement(Object.values(TransactionTypeEnum)), paymentType: faker.helpers.arrayElement(Object.values(PaymentTypeEnum)), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionFee: faker.number.int({min: undefined, max: undefined}), debtType: faker.helpers.arrayElement(Object.values(DebtTypeEnum)), amount: faker.number.int({min: undefined, max: undefined}), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddCurrentAccountTransactionResponseMock = (overrideResponse: Partial< CurrentAccountTransaction > = {}): CurrentAccountTransaction => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), date: faker.date.past().toISOString().split('T')[0], currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, description: faker.helpers.arrayElement([faker.string.alpha(20), null]), transactionType: faker.helpers.arrayElement(Object.values(TransactionTypeEnum)), paymentType: faker.helpers.arrayElement(Object.values(PaymentTypeEnum)), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionFee: faker.number.int({min: undefined, max: undefined}), debtType: faker.helpers.arrayElement(Object.values(DebtTypeEnum)), amount: faker.number.int({min: undefined, max: undefined}), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), ...overrideResponse})

export const getCurrentAccountBankAccountsResponseMock = (overrideResponse: Partial< CurrentAccountBankAccounts > = {}): CurrentAccountBankAccounts => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddCurrentAccountBankAccountResponseMock = (overrideResponse: Partial< CurrentAccountBankAccount > = {}): CurrentAccountBankAccount => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), ...overrideResponse})

export const getAdditionalcostsResponseMock = (overrideResponse: Partial< AdditionalCosts > = {}): AdditionalCosts => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddAdditionalCostResponseMock = (overrideResponse: Partial< AdditionalCost > = {}): AdditionalCost => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), unit: faker.helpers.arrayElement(Object.values(UnitEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getProjectsResponseMock = (overrideResponse: Partial< Projects > = {}): Projects => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, code: faker.string.alpha(20), name: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddProjectResponseMock = (overrideResponse: Partial< Project > = {}): Project => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, code: faker.string.alpha(20), name: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}, ...overrideResponse})

export const getTimeKeepingsResponseMock = (overrideResponse: Partial< TimeKeepings > = {}): TimeKeepings => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, year: faker.number.int({min: undefined, max: undefined}), month: faker.number.int({min: undefined, max: undefined}), netSalary: faker.number.int({min: undefined, max: undefined}), normalWorkingDays: faker.number.int({min: undefined, max: undefined}), weekendWorkingHours: faker.number.int({min: undefined, max: undefined}), unpaidTimeOffHours: faker.number.int({min: undefined, max: undefined}), timeOffs: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), startDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, endDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, workingDays: faker.number.int({min: undefined, max: undefined}), workingHours: faker.number.int({min: undefined, max: undefined}), timeOffType: faker.helpers.arrayElement(Object.values(TimeOffType)), unPaid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), total: faker.number.int({min: undefined, max: undefined}), title: faker.string.alpha(20), deductions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), additionalPayments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), overtimes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), overtimeDate: faker.date.past().toISOString().split('T')[0], workingHours: faker.number.int({min: undefined, max: undefined}), overTimePercentage: faker.helpers.arrayElement(Object.values(OverTimePercentage)), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])}))})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getCreateTimeKeepingResponseMock = (overrideResponse: Partial< TimeKeeping > = {}): TimeKeeping => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, year: faker.number.int({min: undefined, max: undefined}), month: faker.number.int({min: undefined, max: undefined}), netSalary: faker.number.int({min: undefined, max: undefined}), normalWorkingDays: faker.number.int({min: undefined, max: undefined}), weekendWorkingHours: faker.number.int({min: undefined, max: undefined}), unpaidTimeOffHours: faker.number.int({min: undefined, max: undefined}), timeOffs: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), startDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, endDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, workingDays: faker.number.int({min: undefined, max: undefined}), workingHours: faker.number.int({min: undefined, max: undefined}), timeOffType: faker.helpers.arrayElement(Object.values(TimeOffType)), unPaid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), total: faker.number.int({min: undefined, max: undefined}), title: faker.string.alpha(20), deductions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), additionalPayments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), overtimes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), overtimeDate: faker.date.past().toISOString().split('T')[0], workingHours: faker.number.int({min: undefined, max: undefined}), overTimePercentage: faker.helpers.arrayElement(Object.values(OverTimePercentage)), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), ...overrideResponse})

export const getCalculateTimeKeepingTotalResponseMock = (overrideResponse: Partial< TimeKeepingCalculationResult > = {}): TimeKeepingCalculationResult => ({total: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getEmployeesResponseMock = (overrideResponse: Partial< Employees > = {}): Employees => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getEmployeeTimeOffStatusesResponseMock = (overrideResponse: Partial< TimeOffStatuses > = {}): TimeOffStatuses => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({entitled: faker.number.int({min: undefined, max: undefined}), allTimeUsed: faker.number.int({min: undefined, max: undefined}), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, transferred: faker.number.int({min: undefined, max: undefined}), usedCurrentYear: faker.number.int({min: undefined, max: undefined}), usable: faker.number.int({min: undefined, max: undefined}), profession: faker.string.alpha(20), startDateTime: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), workingDays: faker.number.int({min: undefined, max: undefined})})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddEmployeeResponseMock = (overrideResponse: Partial< Employee > = {}): Employee => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), ...overrideResponse})

export const getTimeoffsResponseMock = (overrideResponse: Partial< TimeOffs > = {}): TimeOffs => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), startDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, endDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, workingDays: faker.number.int({min: undefined, max: undefined}), workingHours: faker.number.int({min: undefined, max: undefined}), timeOffType: faker.helpers.arrayElement(Object.values(TimeOffType)), unPaid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddTimeOffResponseMock = (overrideResponse: Partial< TimeOff > = {}): TimeOff => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), startDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, endDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, workingDays: faker.number.int({min: undefined, max: undefined}), workingHours: faker.number.int({min: undefined, max: undefined}), timeOffType: faker.helpers.arrayElement(Object.values(TimeOffType)), unPaid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse})

export const getEmployeePaymentsResponseMock = (overrideResponse: Partial< EmployeePayments > = {}): EmployeePayments => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getEmployeeOvertimesResponseMock = (overrideResponse: Partial< EmployeeOvertimes > = {}): EmployeeOvertimes => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), overtimeDate: faker.date.past().toISOString().split('T')[0], workingHours: faker.number.int({min: undefined, max: undefined}), overTimePercentage: faker.helpers.arrayElement(Object.values(OverTimePercentage)), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getEmployeePaymentsStatusViewResponseMock = (overrideResponse: Partial< EmployeePayments > = {}): EmployeePayments => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getEmployeeOvertimesStatusViewResponseMock = (overrideResponse: Partial< EmployeeOvertimes > = {}): EmployeeOvertimes => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), overtimeDate: faker.date.past().toISOString().split('T')[0], workingHours: faker.number.int({min: undefined, max: undefined}), overTimePercentage: faker.helpers.arrayElement(Object.values(OverTimePercentage)), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getBanksResponseMock = (overrideResponse: Partial< Banks > = {}): Banks => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddBankResponseMock = (overrideResponse: Partial< Bank > = {}): Bank => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getBankBranchesResponseMock = (overrideResponse: Partial< BankBranches > = {}): BankBranches => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddBankBranchResponseMock = (overrideResponse: Partial< BankBranch > = {}): BankBranch => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20), ...overrideResponse})

export const getBankAccountsResponseMock = (overrideResponse: Partial< BankAccounts > = {}): BankAccounts => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddBankBranch1ResponseMock = (overrideResponse: Partial< BankAccount > = {}): BankAccount => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, ...overrideResponse})

export const getDepartmentsResponseMock = (overrideResponse: Partial< Departments > = {}): Departments => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddDepartmentResponseMock = (overrideResponse: Partial< Department > = {}): Department => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getBranchesResponseMock = (overrideResponse: Partial< Branches > = {}): Branches => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddBranchResponseMock = (overrideResponse: Partial< Branch > = {}): Branch => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getSectionsResponseMock = (overrideResponse: Partial< Sections > = {}): Sections => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), sectionType: faker.helpers.arrayElement(Object.values(SectionTypeEnum)), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddSectionResponseMock = (overrideResponse: Partial< Section > = {}): Section => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), sectionType: faker.helpers.arrayElement(Object.values(SectionTypeEnum)), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), email: faker.string.alpha(20)}, ...overrideResponse})

export const getRolesResponseMock = (overrideResponse: Partial< Roles > = {}): Roles => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddRoleResponseMock = (overrideResponse: Partial< Role > = {}): Role => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getPublicHolidaysResponseMock = (overrideResponse: Partial< PublicHolidays > = {}): PublicHolidays => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), year: faker.number.int({min: undefined, max: undefined}), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.date.past().toISOString().split('T')[0], description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddPublicHolidayResponseMock = (overrideResponse: Partial< PublicHoliday > = {}): PublicHoliday => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), year: faker.number.int({min: undefined, max: undefined}), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.date.past().toISOString().split('T')[0], description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), ...overrideResponse})

export const getPaymentMethodsResponseMock = (overrideResponse: Partial< PaymentMethods > = {}): PaymentMethods => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), name: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddPaymentMethodResponseMock = (overrideResponse: Partial< PaymentMethod > = {}): PaymentMethod => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), name: faker.string.alpha(20), ...overrideResponse})

export const getMachinesResponseMock = (overrideResponse: Partial< Machines > = {}): Machines => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddMachineResponseMock = (overrideResponse: Partial< Machine > = {}): Machine => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), passive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), identificationNumber: faker.string.alpha(20), name: faker.string.alpha(20), surname: faker.string.alpha(20), companyBranch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, department: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, profession: faker.string.alpha(20), emergencyPhone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emergencyName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), startDate: faker.date.past().toISOString().split('T')[0], endDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), phone: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), serialNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), fathersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), mothersName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthPlace: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), birthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), civilStatus: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), city: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), province: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), state: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), street: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), volumeNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), familySerial: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), payrollData: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currency: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), salary: faker.number.int({min: undefined, max: undefined}), includedInCost: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), monthlyProgress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), monthlyHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), iban: faker.string.alpha(20), children: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), spouseWorking: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined])}, ...overrideResponse})

export const getDepotsResponseMock = (overrideResponse: Partial< Depots > = {}): Depots => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddDepotResponseMock = (overrideResponse: Partial< Depot > = {}): Depot => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), ...overrideResponse})

export const getAddCompanyResponseMock = (overrideResponse: Partial< Company > = {}): Company => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), address: faker.string.alpha(20), phone: faker.string.alpha(20), phoneBackup: faker.string.alpha(20), taxAdmin: faker.string.alpha(20), taxNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, ...overrideResponse})

export const getCompaniesResponseMock = (overrideResponse: Partial< Companies > = {}): Companies => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), address: faker.string.alpha(20), phone: faker.string.alpha(20), phoneBackup: faker.string.alpha(20), taxAdmin: faker.string.alpha(20), taxNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getExpenseInvoicesResponseMock = (overrideResponse: Partial< ExpenseInvoices > = {}): ExpenseInvoices => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), expenseCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), unit: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}}, unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined})})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddExpenseInvoiceResponseMock = (overrideResponse: Partial< ExpenseInvoice > = {}): ExpenseInvoice => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), date: faker.date.past().toISOString().split('T')[0], warehouseBranch: faker.helpers.arrayElement(Object.values(WarehouseBranchEnum)), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), fixedCurrency: faker.datatype.boolean(), fixedCurrencyValue: faker.number.int({min: undefined, max: undefined}), invoiceItems: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), expenseCard: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), unit: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}}, unit: faker.helpers.arrayElement(Object.values(UnitEnum)), quantity: faker.number.int({min: undefined, max: undefined}), price: faker.number.int({min: undefined, max: undefined}), discount: faker.number.int({min: undefined, max: undefined}), tax: faker.number.int({min: undefined, max: undefined}), rowTotal: faker.number.int({min: undefined, max: undefined})})), generalDiscount: faker.number.int({min: undefined, max: undefined}), unitDiscount: faker.number.int({min: undefined, max: undefined}), totalVat: faker.number.int({min: undefined, max: undefined}), subTotal: faker.number.int({min: undefined, max: undefined}), finalTotal: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getCalculateInvoiceTotal1ResponseMock = (overrideResponse: Partial< ExpenseInvoiceCalculationResult > = {}): ExpenseInvoiceCalculationResult => ({total: faker.number.int({min: undefined, max: undefined}), totalVAT: faker.number.int({min: undefined, max: undefined}), totalDiscount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getExpenseCardsResponseMock = (overrideResponse: Partial< ExpenseCards > = {}): ExpenseCards => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), unit: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddExpenseCardResponseMock = (overrideResponse: Partial< ExpenseCard > = {}): ExpenseCard => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), description: faker.string.alpha(20), unit: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, ...overrideResponse})

export const getAddCashAccountResponseMock = (overrideResponse: Partial< CashAccount > = {}): CashAccount => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), name: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), ...overrideResponse})

export const getCashAccountTransactionsResponseMock = (overrideResponse: Partial< CashAccountTransactions > = {}): CashAccountTransactions => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), date: faker.date.past().toISOString().split('T')[0], cashAccount: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), name: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}, undefined]), currentAccount: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, undefined]), description: faker.string.alpha(20), debtStatus: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), total: faker.number.int({min: undefined, max: undefined}), balance: faker.number.int({min: undefined, max: undefined})})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getAddCashAccountTransactionResponseMock = (overrideResponse: Partial< CashAccountTransaction > = {}): CashAccountTransaction => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), date: faker.date.past().toISOString().split('T')[0], cashAccount: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), name: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}, undefined]), currentAccount: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), code: faker.string.alpha(20), title: faker.string.alpha(20), active: faker.datatype.boolean(), sector: faker.helpers.arrayElement(Object.values(SectorEnum)), contactInformation: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), address: faker.string.alpha(20), authorizedPerson: faker.string.alpha(20), faxNo: faker.string.alpha(20), webAddress: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.string.alpha(20), specialCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), number: faker.string.alpha(20), backupNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), taxAdmin: faker.string.alpha(20), taxNo: faker.number.int({min: undefined, max: undefined}), invoicedWithCurrency: faker.datatype.boolean(), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum)), accountType: faker.helpers.arrayElement(Object.values(CurrentAccountType))}, bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, currentAccountBankAccounts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), currentAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, branch: faker.string.alpha(20), accountNumber: faker.string.alpha(20), iban: faker.string.alpha(20), currency: faker.helpers.arrayElement(Object.values(CurrencyEnum))}))}, undefined]), description: faker.string.alpha(20), debtStatus: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), total: faker.number.int({min: undefined, max: undefined}), balance: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getCalculateBalanceResponseMock = (overrideResponse: Partial< CashAccountBalanceResult > = {}): CashAccountBalanceResult => ({balance: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getGetServiceGroupTreeResponseMock = (overrideResponse: Partial< ServiceGroupTreeDataResponse > = {}): ServiceGroupTreeDataResponse => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), children: []})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetServiceGroupFlatListResponseMock = (overrideResponse: Partial< ServiceGroupTreeDataResponse > = {}): ServiceGroupTreeDataResponse => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), children: []})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetProductGroupTreeResponseMock = (overrideResponse: Partial< ProductGroupTreeDataResponse > = {}): ProductGroupTreeDataResponse => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), children: []})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetProductGroupFlatListResponseMock = (overrideResponse: Partial< ProductGroupTreeDataResponse > = {}): ProductGroupTreeDataResponse => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), children: []})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetMaterialGroupTreeResponseMock = (overrideResponse: Partial< MaterialGroupTreeDataResponse > = {}): MaterialGroupTreeDataResponse => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), children: []})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetMaterialGroupFlatListResponseMock = (overrideResponse: Partial< MaterialGroupTreeDataResponse > = {}): MaterialGroupTreeDataResponse => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), children: []})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetFixtureGroupTreeResponseMock = (overrideResponse: Partial< FixtureGroupTreeDataResponse > = {}): FixtureGroupTreeDataResponse => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), children: []})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetFixtureGroupFlatListResponseMock = (overrideResponse: Partial< FixtureGroupTreeDataResponse > = {}): FixtureGroupTreeDataResponse => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20), code: faker.string.alpha(20), children: []})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetTimeKeepingDraftResponseMock = (overrideResponse: Partial< TimeKeeping > = {}): TimeKeeping => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, year: faker.number.int({min: undefined, max: undefined}), month: faker.number.int({min: undefined, max: undefined}), netSalary: faker.number.int({min: undefined, max: undefined}), normalWorkingDays: faker.number.int({min: undefined, max: undefined}), weekendWorkingHours: faker.number.int({min: undefined, max: undefined}), unpaidTimeOffHours: faker.number.int({min: undefined, max: undefined}), timeOffs: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), startDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, endDateTime: `${faker.date.past().toISOString().split('.')[0]}Z`, workingDays: faker.number.int({min: undefined, max: undefined}), workingHours: faker.number.int({min: undefined, max: undefined}), timeOffType: faker.helpers.arrayElement(Object.values(TimeOffType)), unPaid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), total: faker.number.int({min: undefined, max: undefined}), title: faker.string.alpha(20), deductions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), additionalPayments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), overtimes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), overtimeDate: faker.date.past().toISOString().split('T')[0], workingHours: faker.number.int({min: undefined, max: undefined}), overTimePercentage: faker.helpers.arrayElement(Object.values(OverTimePercentage)), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined])})), ...overrideResponse})

export const getGetTimeOffStatusResponseMock = (overrideResponse: Partial< TimeOffStatus > = {}): TimeOffStatus => ({entitled: faker.number.int({min: undefined, max: undefined}), allTimeUsed: faker.number.int({min: undefined, max: undefined}), employee: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, transferred: faker.number.int({min: undefined, max: undefined}), usedCurrentYear: faker.number.int({min: undefined, max: undefined}), usable: faker.number.int({min: undefined, max: undefined}), profession: faker.string.alpha(20), startDateTime: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), workingDays: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getGetEmployeePaymentResponseMock = (overrideResponse: Partial< EmployeePayment > = {}): EmployeePayment => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined]), ...overrideResponse})

export const getDeleteEmployeePaymentResponseMock = (overrideResponse: Partial< EmployeePayment > = {}): EmployeePayment => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), paymentDate: faker.date.past().toISOString().split('T')[0], paymentType: faker.helpers.arrayElement(Object.values(EmployeePaymentType)), description: faker.string.alpha(20), bankAccount: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), accountNumber: faker.string.alpha(20), branch: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bank: {id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), bankName: faker.string.alpha(20), bankShortName: faker.string.alpha(20), swiftCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, name: faker.string.alpha(20), relatedEmployee: faker.string.alpha(20)}, iban: faker.string.alpha(20), currency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}}, transactionCost: faker.number.int({min: undefined, max: undefined}), amount: faker.number.int({min: undefined, max: undefined}), amountCurrency: {currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), symbol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), defaultFractionDigits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numericCodeAsString: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined]), ...overrideResponse})

export const getGetEmployeeOvertimeResponseMock = (overrideResponse: Partial< EmployeeOvertime > = {}): EmployeeOvertime => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), overtimeDate: faker.date.past().toISOString().split('T')[0], workingHours: faker.number.int({min: undefined, max: undefined}), overTimePercentage: faker.helpers.arrayElement(Object.values(OverTimePercentage)), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined]), ...overrideResponse})

export const getDeleteEmployeeOvertimeResponseMock = (overrideResponse: Partial< EmployeeOvertime > = {}): EmployeeOvertime => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), overtimeDate: faker.date.past().toISOString().split('T')[0], workingHours: faker.number.int({min: undefined, max: undefined}), overTimePercentage: faker.helpers.arrayElement(Object.values(OverTimePercentage)), employee: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), surname: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), companyBranch: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined]), department: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), name: faker.string.alpha(20)}, undefined])}, undefined]), ...overrideResponse})


export const getGetUnitMockHandler = (overrideResponse?: Unit | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Unit> | Unit)) => {
  return http.get('*/api/storage/unit/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetUnitResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateUnitMockHandler = (overrideResponse?: Unit | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Unit> | Unit)) => {
  return http.put('*/api/storage/unit/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateUnitResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteUnitMockHandler = (overrideResponse?: Unit | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Unit> | Unit)) => {
  return http.delete('*/api/storage/unit/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteUnitResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetShelfMockHandler = (overrideResponse?: Shelf | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Shelf> | Shelf)) => {
  return http.get('*/api/storage/shelf/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetShelfResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateShelfMockHandler = (overrideResponse?: Shelf | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Shelf> | Shelf)) => {
  return http.put('*/api/storage/shelf/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateShelfResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteShelfMockHandler = (overrideResponse?: Shelf | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Shelf> | Shelf)) => {
  return http.delete('*/api/storage/shelf/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteShelfResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetServiceGroupMockHandler = (overrideResponse?: ServiceGroup | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ServiceGroup> | ServiceGroup)) => {
  return http.get('*/api/storage/serviceGroup/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetServiceGroupResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateServiceGroupMockHandler = (overrideResponse?: ServiceGroup | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<ServiceGroup> | ServiceGroup)) => {
  return http.put('*/api/storage/serviceGroup/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateServiceGroupResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteServiceGroupMockHandler = (overrideResponse?: ServiceGroup | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<ServiceGroup> | ServiceGroup)) => {
  return http.delete('*/api/storage/serviceGroup/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteServiceGroupResponseMock()),
      { status: 204,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetServiceCardMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<string> | string)) => {
  return http.get('*/api/storage/serviceCard/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetServiceCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateServiceCardMockHandler = (overrideResponse?: ServiceCard | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<ServiceCard> | ServiceCard)) => {
  return http.put('*/api/storage/serviceCard/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateServiceCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteServiceCardMockHandler = (overrideResponse?: ServiceCard | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<ServiceCard> | ServiceCard)) => {
  return http.delete('*/api/storage/serviceCard/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteServiceCardResponseMock()),
      { status: 204,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetProductGroupMockHandler = (overrideResponse?: ProductGroup | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProductGroup> | ProductGroup)) => {
  return http.get('*/api/storage/productGroup/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetProductGroupResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateProductGroupMockHandler = (overrideResponse?: ProductGroup | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<ProductGroup> | ProductGroup)) => {
  return http.put('*/api/storage/productGroup/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateProductGroupResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteProductGroupMockHandler = (overrideResponse?: ProductGroup | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<ProductGroup> | ProductGroup)) => {
  return http.delete('*/api/storage/productGroup/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteProductGroupResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetProductCardMockHandler = (overrideResponse?: ProductCard | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProductCard> | ProductCard)) => {
  return http.get('*/api/storage/productCard/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetProductCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateProductCardMockHandler = (overrideResponse?: ProductCard | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<ProductCard> | ProductCard)) => {
  return http.put('*/api/storage/productCard/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateProductCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteProductCardMockHandler = (overrideResponse?: ProductCard | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<ProductCard> | ProductCard)) => {
  return http.delete('*/api/storage/productCard/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteProductCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetMaterialGroupMockHandler = (overrideResponse?: MaterialGroup | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MaterialGroup> | MaterialGroup)) => {
  return http.get('*/api/storage/materialGroup/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetMaterialGroupResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateMaterialGroupMockHandler = (overrideResponse?: MaterialGroup | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<MaterialGroup> | MaterialGroup)) => {
  return http.put('*/api/storage/materialGroup/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateMaterialGroupResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteMaterialGroupMockHandler = (overrideResponse?: MaterialGroup | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<MaterialGroup> | MaterialGroup)) => {
  return http.delete('*/api/storage/materialGroup/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteMaterialGroupResponseMock()),
      { status: 204,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetMaterialCardMockHandler = (overrideResponse?: MaterialCard | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MaterialCard> | MaterialCard)) => {
  return http.get('*/api/storage/materialCard/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetMaterialCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateMaterialCardMockHandler = (overrideResponse?: MaterialCard | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<MaterialCard> | MaterialCard)) => {
  return http.put('*/api/storage/materialCard/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateMaterialCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteMaterialCardMockHandler = (overrideResponse?: MaterialCard | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<MaterialCard> | MaterialCard)) => {
  return http.delete('*/api/storage/materialCard/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteMaterialCardResponseMock()),
      { status: 204,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetFixtureGroupMockHandler = (overrideResponse?: FixtureGroup | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<FixtureGroup> | FixtureGroup)) => {
  return http.get('*/api/storage/fixtureGroup/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetFixtureGroupResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateFixtureGroupMockHandler = (overrideResponse?: FixtureGroup | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<FixtureGroup> | FixtureGroup)) => {
  return http.put('*/api/storage/fixtureGroup/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateFixtureGroupResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteFixtureGroupMockHandler = (overrideResponse?: FixtureGroup | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<FixtureGroup> | FixtureGroup)) => {
  return http.delete('*/api/storage/fixtureGroup/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteFixtureGroupResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetFixtureCardMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<string> | string)) => {
  return http.get('*/api/storage/fixtureCard/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetFixtureCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateFixtureCardMockHandler = (overrideResponse?: FixtureCard | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<FixtureCard> | FixtureCard)) => {
  return http.put('*/api/storage/fixtureCard/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateFixtureCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteFixtureCardMockHandler = (overrideResponse?: FixtureCard | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<FixtureCard> | FixtureCard)) => {
  return http.delete('*/api/storage/fixtureCard/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteFixtureCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetAssignmentTransactionMockHandler = (overrideResponse?: AssignmentTransaction | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<AssignmentTransaction> | AssignmentTransaction)) => {
  return http.get('*/api/storage/assignmentTransaction/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAssignmentTransactionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateAssignmentTransactionMockHandler = (overrideResponse?: AssignmentTransaction | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<AssignmentTransaction> | AssignmentTransaction)) => {
  return http.put('*/api/storage/assignmentTransaction/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateAssignmentTransactionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteAssignmentTransactionMockHandler = (overrideResponse?: AssignmentTransaction | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<AssignmentTransaction> | AssignmentTransaction)) => {
  return http.delete('*/api/storage/assignmentTransaction/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteAssignmentTransactionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetAssignmentCardMockHandler = (overrideResponse?: AssignmentCard | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<AssignmentCard> | AssignmentCard)) => {
  return http.get('*/api/storage/assignmentCard/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAssignmentCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateAssignmentCardMockHandler = (overrideResponse?: AssignmentCard | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<AssignmentCard> | AssignmentCard)) => {
  return http.put('*/api/storage/assignmentCard/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateAssignmentCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteAssignmentCardMockHandler = (overrideResponse?: AssignmentCard | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<AssignmentCard> | AssignmentCard)) => {
  return http.delete('*/api/storage/assignmentCard/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteAssignmentCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetProposalMockHandler = (overrideResponse?: Proposal | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Proposal> | Proposal)) => {
  return http.get('*/api/sales/proposal/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetProposalResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateProposalMockHandler = (overrideResponse?: Proposal | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Proposal> | Proposal)) => {
  return http.put('*/api/sales/proposal/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateProposalResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteProposalMockHandler = (overrideResponse?: Proposal | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Proposal> | Proposal)) => {
  return http.delete('*/api/sales/proposal/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteProposalResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetPurchaseOrderMockHandler = (overrideResponse?: PurchaseOrder | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PurchaseOrder> | PurchaseOrder)) => {
  return http.get('*/api/purchasing/purchaseOrder/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetPurchaseOrderResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdatePurchaseOrderMockHandler = (overrideResponse?: PurchaseOrder | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<PurchaseOrder> | PurchaseOrder)) => {
  return http.put('*/api/purchasing/purchaseOrder/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdatePurchaseOrderResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeletePurchaseOrderMockHandler = (overrideResponse?: PurchaseOrder | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<PurchaseOrder> | PurchaseOrder)) => {
  return http.delete('*/api/purchasing/purchaseOrder/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeletePurchaseOrderResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetInvoiceMockHandler = (overrideResponse?: Invoice | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Invoice> | Invoice)) => {
  return http.get('*/api/purchasing/invoice/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetInvoiceResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateInvoiceMockHandler = (overrideResponse?: Invoice | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Invoice> | Invoice)) => {
  return http.put('*/api/purchasing/invoice/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateInvoiceResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteInvoiceMockHandler = (overrideResponse?: Invoice | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Invoice> | Invoice)) => {
  return http.delete('*/api/purchasing/invoice/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteInvoiceResponseMock()),
      { status: 204,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetCurrentAccountTransactionMockHandler = (overrideResponse?: CurrentAccountTransaction | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CurrentAccountTransaction> | CurrentAccountTransaction)) => {
  return http.get('*/api/purchasing/currentAccountTransaction/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetCurrentAccountTransactionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateCurrentAccountTransactionMockHandler = (overrideResponse?: CurrentAccountTransaction | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<CurrentAccountTransaction> | CurrentAccountTransaction)) => {
  return http.put('*/api/purchasing/currentAccountTransaction/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateCurrentAccountTransactionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteCurrentAccountTransactionMockHandler = (overrideResponse?: CurrentAccountTransaction | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<CurrentAccountTransaction> | CurrentAccountTransaction)) => {
  return http.delete('*/api/purchasing/currentAccountTransaction/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteCurrentAccountTransactionResponseMock()),
      { status: 204,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetCurrentAccountBankAccountMockHandler = (overrideResponse?: CurrentAccountBankAccount | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CurrentAccountBankAccount> | CurrentAccountBankAccount)) => {
  return http.get('*/api/purchasing/currentAccountBankAccount/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetCurrentAccountBankAccountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateCurrentAccountBankAccountMockHandler = (overrideResponse?: CurrentAccountBankAccount | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<CurrentAccountBankAccount> | CurrentAccountBankAccount)) => {
  return http.put('*/api/purchasing/currentAccountBankAccount/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateCurrentAccountBankAccountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteCurrentAccountBankAccountMockHandler = (overrideResponse?: CurrentAccountBankAccount | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<CurrentAccountBankAccount> | CurrentAccountBankAccount)) => {
  return http.delete('*/api/purchasing/currentAccountBankAccount/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteCurrentAccountBankAccountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetCurrentAccountMockHandler = (overrideResponse?: CurrentAccount | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CurrentAccount> | CurrentAccount)) => {
  return http.get('*/api/purchasing/currentAccount/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetCurrentAccountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateCurrentAccountMockHandler = (overrideResponse?: CurrentAccount | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<CurrentAccount> | CurrentAccount)) => {
  return http.put('*/api/purchasing/currentAccount/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateCurrentAccountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteCurrentAccountMockHandler = (overrideResponse?: CurrentAccount | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<CurrentAccount> | CurrentAccount)) => {
  return http.delete('*/api/purchasing/currentAccount/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteCurrentAccountResponseMock()),
      { status: 204,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetAdditionalCostMockHandler = (overrideResponse?: AdditionalCost | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<AdditionalCost> | AdditionalCost)) => {
  return http.get('*/api/purchasing/additionalcost/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAdditionalCostResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateAdditionalCostMockHandler = (overrideResponse?: AdditionalCost | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<AdditionalCost> | AdditionalCost)) => {
  return http.put('*/api/purchasing/additionalcost/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateAdditionalCostResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteAdditionalCostMockHandler = (overrideResponse?: AdditionalCost | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<AdditionalCost> | AdditionalCost)) => {
  return http.delete('*/api/purchasing/additionalcost/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteAdditionalCostResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetProjectMockHandler = (overrideResponse?: Project | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Project> | Project)) => {
  return http.get('*/api/production/project/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetProjectResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateProjectMockHandler = (overrideResponse?: Project | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Project> | Project)) => {
  return http.put('*/api/production/project/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateProjectResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteProjectMockHandler = (overrideResponse?: Project | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Project> | Project)) => {
  return http.delete('*/api/production/project/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteProjectResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetTimeKeepingMockHandler = (overrideResponse?: TimeKeeping | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TimeKeeping> | TimeKeeping)) => {
  return http.get('*/api/hr/timekeeping/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetTimeKeepingResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateTimeKeepingMockHandler = (overrideResponse?: TimeKeeping | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<TimeKeeping> | TimeKeeping)) => {
  return http.put('*/api/hr/timekeeping/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateTimeKeepingResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteTimeKeepingMockHandler = (overrideResponse?: TimeKeeping | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<TimeKeeping> | TimeKeeping)) => {
  return http.delete('*/api/hr/timekeeping/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteTimeKeepingResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetEmployeeMockHandler = (overrideResponse?: Employee | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Employee> | Employee)) => {
  return http.get('*/api/hr/employee/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetEmployeeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateEmployeeMockHandler = (overrideResponse?: Employee | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Employee> | Employee)) => {
  return http.put('*/api/hr/employee/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateEmployeeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteEmployeeMockHandler = (overrideResponse?: Employee | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Employee> | Employee)) => {
  return http.delete('*/api/hr/employee/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteEmployeeResponseMock()),
      { status: 204,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetTimeOffMockHandler = (overrideResponse?: TimeOff | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TimeOff> | TimeOff)) => {
  return http.get('*/api/hr/employee/:id/timeoff/:timeOffId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetTimeOffResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateTimeoffMockHandler = (overrideResponse?: TimeOff | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<TimeOff> | TimeOff)) => {
  return http.put('*/api/hr/employee/:id/timeoff/:timeOffId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateTimeoffResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteTimeOffMockHandler = (overrideResponse?: TimeOff | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<TimeOff> | TimeOff)) => {
  return http.delete('*/api/hr/employee/:id/timeoff/:timeOffId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteTimeOffResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateEmployeePaymentsMockHandler = (overrideResponse?: EmployeePayment[] | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<EmployeePayment[]> | EmployeePayment[])) => {
  return http.put('*/api/hr/employee/:id/payment', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateEmployeePaymentsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddEmployeePaymentMockHandler = (overrideResponse?: EmployeePayment[] | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EmployeePayment[]> | EmployeePayment[])) => {
  return http.post('*/api/hr/employee/:id/payment', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddEmployeePaymentResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateEmployeeOvertimesMockHandler = (overrideResponse?: EmployeeOvertime[] | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<EmployeeOvertime[]> | EmployeeOvertime[])) => {
  return http.put('*/api/hr/employee/:id/overtime', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateEmployeeOvertimesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddEmployeeOvertimesMockHandler = (overrideResponse?: EmployeeOvertime[] | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EmployeeOvertime[]> | EmployeeOvertime[])) => {
  return http.post('*/api/hr/employee/:id/overtime', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddEmployeeOvertimesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetBankBranchMockHandler = (overrideResponse?: BankBranch | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<BankBranch> | BankBranch)) => {
  return http.get('*/api/finance/bankBranch/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetBankBranchResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateBankbranchMockHandler = (overrideResponse?: BankBranch | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<BankBranch> | BankBranch)) => {
  return http.put('*/api/finance/bankBranch/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateBankbranchResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteBankBranchMockHandler = (overrideResponse?: BankBranch | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<BankBranch> | BankBranch)) => {
  return http.delete('*/api/finance/bankBranch/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteBankBranchResponseMock()),
      { status: 204,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetBankAccountMockHandler = (overrideResponse?: BankAccount | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<BankAccount> | BankAccount)) => {
  return http.get('*/api/finance/bankAccount/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetBankAccountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateBankAccountMockHandler = (overrideResponse?: BankAccount | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<BankAccount> | BankAccount)) => {
  return http.put('*/api/finance/bankAccount/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateBankAccountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteBankAccountMockHandler = (overrideResponse?: BankAccount | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<BankAccount> | BankAccount)) => {
  return http.delete('*/api/finance/bankAccount/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteBankAccountResponseMock()),
      { status: 204,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetDepartmentMockHandler = (overrideResponse?: Bank | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Bank> | Bank)) => {
  return http.get('*/api/finance/bank/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetDepartmentResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateBankMockHandler = (overrideResponse?: Bank | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Bank> | Bank)) => {
  return http.put('*/api/finance/bank/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateBankResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteBankMockHandler = (overrideResponse?: Bank | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Bank> | Bank)) => {
  return http.delete('*/api/finance/bank/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteBankResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetDepartment1MockHandler = (overrideResponse?: Department | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Department> | Department)) => {
  return http.get('*/api/company/department/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetDepartment1ResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateDepartmentMockHandler = (overrideResponse?: Department | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Department> | Department)) => {
  return http.put('*/api/company/department/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateDepartmentResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteDepartmentMockHandler = (overrideResponse?: Department | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Department> | Department)) => {
  return http.delete('*/api/company/department/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteDepartmentResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetBranchMockHandler = (overrideResponse?: Branch | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Branch> | Branch)) => {
  return http.get('*/api/company/branch/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetBranchResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateBranchMockHandler = (overrideResponse?: Branch | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Branch> | Branch)) => {
  return http.put('*/api/company/branch/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateBranchResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteBranchMockHandler = (overrideResponse?: Branch | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Branch> | Branch)) => {
  return http.delete('*/api/company/branch/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteBranchResponseMock()),
      { status: 204,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetSectionMockHandler = (overrideResponse?: Section | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Section> | Section)) => {
  return http.get('*/api/admin/section/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetSectionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateSectionMockHandler = (overrideResponse?: Section | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Section> | Section)) => {
  return http.put('*/api/admin/section/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateSectionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteSectionMockHandler = (overrideResponse?: Section | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Section> | Section)) => {
  return http.delete('*/api/admin/section/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteSectionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetRoleMockHandler = (overrideResponse?: Role | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Role> | Role)) => {
  return http.get('*/api/admin/role/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetRoleResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateRoleMockHandler = (overrideResponse?: Role | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Role> | Role)) => {
  return http.put('*/api/admin/role/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateRoleResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteRoleMockHandler = (overrideResponse?: Role | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Role> | Role)) => {
  return http.delete('*/api/admin/role/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteRoleResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetPublicHolidayMockHandler = (overrideResponse?: PublicHoliday | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PublicHoliday> | PublicHoliday)) => {
  return http.get('*/api/admin/publicHoliday/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetPublicHolidayResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdatePublicHolidayMockHandler = (overrideResponse?: PublicHoliday | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<PublicHoliday> | PublicHoliday)) => {
  return http.put('*/api/admin/publicHoliday/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdatePublicHolidayResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeletePublicHolidayMockHandler = (overrideResponse?: PublicHoliday | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<PublicHoliday> | PublicHoliday)) => {
  return http.delete('*/api/admin/publicHoliday/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeletePublicHolidayResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetPaymentMethodMockHandler = (overrideResponse?: PaymentMethod | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PaymentMethod> | PaymentMethod)) => {
  return http.get('*/api/admin/paymentMethod/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetPaymentMethodResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdatePaymentMethodMockHandler = (overrideResponse?: PaymentMethod | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<PaymentMethod> | PaymentMethod)) => {
  return http.put('*/api/admin/paymentMethod/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdatePaymentMethodResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeletePaymentMethodMockHandler = (overrideResponse?: PaymentMethod | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<PaymentMethod> | PaymentMethod)) => {
  return http.delete('*/api/admin/paymentMethod/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeletePaymentMethodResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetMachineMockHandler = (overrideResponse?: Machine | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Machine> | Machine)) => {
  return http.get('*/api/admin/machine/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetMachineResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateMachineMockHandler = (overrideResponse?: Machine | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Machine> | Machine)) => {
  return http.put('*/api/admin/machine/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateMachineResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteMachineMockHandler = (overrideResponse?: Machine | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Machine> | Machine)) => {
  return http.delete('*/api/admin/machine/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteMachineResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetDepotMockHandler = (overrideResponse?: Depot | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Depot> | Depot)) => {
  return http.get('*/api/admin/depot/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetDepotResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateDepotMockHandler = (overrideResponse?: Depot | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Depot> | Depot)) => {
  return http.put('*/api/admin/depot/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateDepotResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteDepotMockHandler = (overrideResponse?: Depot | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Depot> | Depot)) => {
  return http.delete('*/api/admin/depot/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteDepotResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetCompanyMockHandler = (overrideResponse?: Company | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Company> | Company)) => {
  return http.get('*/api/admin/company/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetCompanyResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateCompanyMockHandler = (overrideResponse?: Company | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Company> | Company)) => {
  return http.put('*/api/admin/company/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateCompanyResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteCompanyMockHandler = (overrideResponse?: Company | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Company> | Company)) => {
  return http.delete('*/api/admin/company/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteCompanyResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetExpenseInvoiceMockHandler = (overrideResponse?: ExpenseInvoice | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ExpenseInvoice> | ExpenseInvoice)) => {
  return http.get('*/api/accounting/expenseInvoice/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetExpenseInvoiceResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateExpenseInvoiceMockHandler = (overrideResponse?: ExpenseInvoice | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<ExpenseInvoice> | ExpenseInvoice)) => {
  return http.put('*/api/accounting/expenseInvoice/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateExpenseInvoiceResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteExpenseInvoiceMockHandler = (overrideResponse?: ExpenseInvoice | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<ExpenseInvoice> | ExpenseInvoice)) => {
  return http.delete('*/api/accounting/expenseInvoice/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteExpenseInvoiceResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetExpenseCardMockHandler = (overrideResponse?: ExpenseCard | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ExpenseCard> | ExpenseCard)) => {
  return http.get('*/api/accounting/expenseCard/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetExpenseCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateExpenseCardMockHandler = (overrideResponse?: ExpenseCard | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<ExpenseCard> | ExpenseCard)) => {
  return http.put('*/api/accounting/expenseCard/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateExpenseCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteExpenseCardMockHandler = (overrideResponse?: ExpenseCard | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<ExpenseCard> | ExpenseCard)) => {
  return http.delete('*/api/accounting/expenseCard/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteExpenseCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetCashAccountTransactionMockHandler = (overrideResponse?: CashAccountTransaction | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CashAccountTransaction> | CashAccountTransaction)) => {
  return http.get('*/api/accounting/cashAccountTransaction/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetCashAccountTransactionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateCashAccountTransactionMockHandler = (overrideResponse?: CashAccountTransaction | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<CashAccountTransaction> | CashAccountTransaction)) => {
  return http.put('*/api/accounting/cashAccountTransaction/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateCashAccountTransactionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteCashAccountTransactionMockHandler = (overrideResponse?: CashAccountTransaction | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<CashAccountTransaction> | CashAccountTransaction)) => {
  return http.delete('*/api/accounting/cashAccountTransaction/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteCashAccountTransactionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetCashAccountMockHandler = (overrideResponse?: CashAccount | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CashAccount> | CashAccount)) => {
  return http.get('*/api/accounting/cashAccount/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetCashAccountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateCashAccountMockHandler = (overrideResponse?: CashAccount | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<CashAccount> | CashAccount)) => {
  return http.put('*/api/accounting/cashAccount/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateCashAccountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteCashAccountMockHandler = (overrideResponse?: CashAccount | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<CashAccount> | CashAccount)) => {
  return http.delete('*/api/accounting/cashAccount/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteCashAccountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersMockHandler = (overrideResponse?: Users | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Users> | Users)) => {
  return http.post('*/api/user/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUsersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getRefreshMockHandler = (overrideResponse?: RefreshResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<RefreshResponse> | RefreshResponse)) => {
  return http.post('*/api/user/refresh', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRefreshResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getLogoutMockHandler = (overrideResponse?: Logout200 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Logout200> | Logout200)) => {
  return http.post('*/api/user/logout', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getLogoutResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getLoginMockHandler = (overrideResponse?: LoginResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<LoginResponse> | LoginResponse)) => {
  return http.post('*/api/user/login', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getLoginResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUnitsMockHandler = (overrideResponse?: Units | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Units> | Units)) => {
  return http.post('*/api/storage/units', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUnitsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddUnitMockHandler = (overrideResponse?: Unit | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Unit> | Unit)) => {
  return http.post('*/api/storage/unit', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddUnitResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getShelvesMockHandler = (overrideResponse?: Shelves | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Shelves> | Shelves)) => {
  return http.post('*/api/storage/shelves', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getShelvesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddShelfMockHandler = (overrideResponse?: Shelf | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Shelf> | Shelf)) => {
  return http.post('*/api/storage/shelf', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddShelfResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getServiceGroupsMockHandler = (overrideResponse?: ServiceGroups | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ServiceGroups> | ServiceGroups)) => {
  return http.post('*/api/storage/serviceGroups', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getServiceGroupsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddServiceGroupMockHandler = (overrideResponse?: ServiceGroup | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ServiceGroup> | ServiceGroup)) => {
  return http.post('*/api/storage/serviceGroup', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddServiceGroupResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getServiceCardsMockHandler = (overrideResponse?: ServiceCards | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ServiceCards> | ServiceCards)) => {
  return http.post('*/api/storage/serviceCards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getServiceCardsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddServiceCardMockHandler = (overrideResponse?: ServiceCard | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ServiceCard> | ServiceCard)) => {
  return http.post('*/api/storage/serviceCard', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddServiceCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProductGroupsMockHandler = (overrideResponse?: ProductGroups | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ProductGroups> | ProductGroups)) => {
  return http.post('*/api/storage/productGroups', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProductGroupsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddProductGroupMockHandler = (overrideResponse?: ProductGroup | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ProductGroup> | ProductGroup)) => {
  return http.post('*/api/storage/productGroup', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddProductGroupResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProductCardsMockHandler = (overrideResponse?: ProductCards | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ProductCards> | ProductCards)) => {
  return http.post('*/api/storage/productCards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProductCardsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddProductCardMockHandler = (overrideResponse?: ProductCard | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ProductCard> | ProductCard)) => {
  return http.post('*/api/storage/productCard', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddProductCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getMaterialGroupsMockHandler = (overrideResponse?: MaterialGroups | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<MaterialGroups> | MaterialGroups)) => {
  return http.post('*/api/storage/materialGroups', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getMaterialGroupsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddMaterialGroupMockHandler = (overrideResponse?: MaterialGroup | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<MaterialGroup> | MaterialGroup)) => {
  return http.post('*/api/storage/materialGroup', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddMaterialGroupResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getMaterialCardsMockHandler = (overrideResponse?: MaterialCards | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<MaterialCards> | MaterialCards)) => {
  return http.post('*/api/storage/materialCards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getMaterialCardsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddMaterialCardMockHandler = (overrideResponse?: MaterialCard | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<MaterialCard> | MaterialCard)) => {
  return http.post('*/api/storage/materialCard', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddMaterialCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getFixtureGroupsMockHandler = (overrideResponse?: FixtureGroups | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<FixtureGroups> | FixtureGroups)) => {
  return http.post('*/api/storage/fixtureGroups', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getFixtureGroupsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddFixtureGroupMockHandler = (overrideResponse?: FixtureGroup | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<FixtureGroup> | FixtureGroup)) => {
  return http.post('*/api/storage/fixtureGroup', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddFixtureGroupResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getFixtureCardsMockHandler = (overrideResponse?: FixtureCards | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<FixtureCards> | FixtureCards)) => {
  return http.post('*/api/storage/fixtureCards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getFixtureCardsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddFixtureCardMockHandler = (overrideResponse?: FixtureCard | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<FixtureCard> | FixtureCard)) => {
  return http.post('*/api/storage/fixtureCard', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddFixtureCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAssignmentTransactionsMockHandler = (overrideResponse?: AssignmentTransactions | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AssignmentTransactions> | AssignmentTransactions)) => {
  return http.post('*/api/storage/assignmentTransactions', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAssignmentTransactionsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddAssignmentTransactionMockHandler = (overrideResponse?: AssignmentTransaction | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AssignmentTransaction> | AssignmentTransaction)) => {
  return http.post('*/api/storage/assignmentTransaction', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddAssignmentTransactionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAssignmentCardsMockHandler = (overrideResponse?: AssignmentCards | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AssignmentCards> | AssignmentCards)) => {
  return http.post('*/api/storage/assignmentCards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAssignmentCardsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddAssignmentCardMockHandler = (overrideResponse?: AssignmentCard | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AssignmentCard> | AssignmentCard)) => {
  return http.post('*/api/storage/assignmentCard', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddAssignmentCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProposalsMockHandler = (overrideResponse?: Proposals | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Proposals> | Proposals)) => {
  return http.post('*/api/sales/proposals', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProposalsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddProposalMockHandler = (overrideResponse?: Proposal | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Proposal> | Proposal)) => {
  return http.post('*/api/sales/proposal', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddProposalResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPurchaseOrdersMockHandler = (overrideResponse?: PurchaseOrders | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PurchaseOrders> | PurchaseOrders)) => {
  return http.post('*/api/purchasing/purchaseOrders', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPurchaseOrdersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddPurchaseOrderMockHandler = (overrideResponse?: PurchaseOrder | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PurchaseOrder> | PurchaseOrder)) => {
  return http.post('*/api/purchasing/purchaseOrder', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddPurchaseOrderResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetInvoicesMockHandler = (overrideResponse?: Invoices | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Invoices> | Invoices)) => {
  return http.post('*/api/purchasing/invoices', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetInvoicesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddInvoiceMockHandler = (overrideResponse?: Invoice | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Invoice> | Invoice)) => {
  return http.post('*/api/purchasing/invoice', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddInvoiceResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCalculateInvoiceTotalMockHandler = (overrideResponse?: InvoiceCalculationResult | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<InvoiceCalculationResult> | InvoiceCalculationResult)) => {
  return http.post('*/api/purchasing/invoice/calculateTotal', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCalculateInvoiceTotalResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCurrentAccountsMockHandler = (overrideResponse?: CurrentAccounts | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CurrentAccounts> | CurrentAccounts)) => {
  return http.post('*/api/purchasing/currentAccounts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCurrentAccountsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddCurrentAccountMockHandler = (overrideResponse?: CurrentAccount | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CurrentAccount> | CurrentAccount)) => {
  return http.post('*/api/purchasing/currentAccount', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddCurrentAccountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetCurrentAccountTransactionsMockHandler = (overrideResponse?: CurrentAccountTransactions | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CurrentAccountTransactions> | CurrentAccountTransactions)) => {
  return http.post('*/api/purchasing/currentAccountTransactions', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetCurrentAccountTransactionsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddCurrentAccountTransactionMockHandler = (overrideResponse?: CurrentAccountTransaction | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CurrentAccountTransaction> | CurrentAccountTransaction)) => {
  return http.post('*/api/purchasing/currentAccountTransaction', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddCurrentAccountTransactionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCurrentAccountBankAccountsMockHandler = (overrideResponse?: CurrentAccountBankAccounts | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CurrentAccountBankAccounts> | CurrentAccountBankAccounts)) => {
  return http.post('*/api/purchasing/currentAccountBankAccounts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCurrentAccountBankAccountsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddCurrentAccountBankAccountMockHandler = (overrideResponse?: CurrentAccountBankAccount | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CurrentAccountBankAccount> | CurrentAccountBankAccount)) => {
  return http.post('*/api/purchasing/currentAccountBankAccount', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddCurrentAccountBankAccountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAdditionalcostsMockHandler = (overrideResponse?: AdditionalCosts | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AdditionalCosts> | AdditionalCosts)) => {
  return http.post('*/api/purchasing/additionalcosts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAdditionalcostsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddAdditionalCostMockHandler = (overrideResponse?: AdditionalCost | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AdditionalCost> | AdditionalCost)) => {
  return http.post('*/api/purchasing/additionalcost', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddAdditionalCostResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProjectsMockHandler = (overrideResponse?: Projects | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Projects> | Projects)) => {
  return http.post('*/api/production/projects', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProjectsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddProjectMockHandler = (overrideResponse?: Project | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Project> | Project)) => {
  return http.post('*/api/production/project', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddProjectResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTimeKeepingsMockHandler = (overrideResponse?: TimeKeepings | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TimeKeepings> | TimeKeepings)) => {
  return http.post('*/api/hr/timekeepings', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTimeKeepingsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateTimeKeepingMockHandler = (overrideResponse?: TimeKeeping | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TimeKeeping> | TimeKeeping)) => {
  return http.post('*/api/hr/timekeeping', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateTimeKeepingResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCalculateTimeKeepingTotalMockHandler = (overrideResponse?: TimeKeepingCalculationResult | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TimeKeepingCalculationResult> | TimeKeepingCalculationResult)) => {
  return http.post('*/api/hr/timekeeping/calculateTotal', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCalculateTimeKeepingTotalResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEmployeesMockHandler = (overrideResponse?: Employees | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Employees> | Employees)) => {
  return http.post('*/api/hr/employees', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEmployeesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEmployeeTimeOffStatusesMockHandler = (overrideResponse?: TimeOffStatuses | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TimeOffStatuses> | TimeOffStatuses)) => {
  return http.post('*/api/hr/employees/timeoffstatuses', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEmployeeTimeOffStatusesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddEmployeeMockHandler = (overrideResponse?: Employee | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Employee> | Employee)) => {
  return http.post('*/api/hr/employee', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddEmployeeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTimeoffsMockHandler = (overrideResponse?: TimeOffs | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TimeOffs> | TimeOffs)) => {
  return http.post('*/api/hr/employee/:id/timeoffs', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTimeoffsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddTimeOffMockHandler = (overrideResponse?: TimeOff | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TimeOff> | TimeOff)) => {
  return http.post('*/api/hr/employee/:id/timeoff', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddTimeOffResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEmployeePaymentsMockHandler = (overrideResponse?: EmployeePayments | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EmployeePayments> | EmployeePayments)) => {
  return http.post('*/api/hr/employee/:id/payments', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEmployeePaymentsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEmployeeOvertimesMockHandler = (overrideResponse?: EmployeeOvertimes | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EmployeeOvertimes> | EmployeeOvertimes)) => {
  return http.post('*/api/hr/employee/:id/overtimes', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEmployeeOvertimesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEmployeePaymentsStatusViewMockHandler = (overrideResponse?: EmployeePayments | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EmployeePayments> | EmployeePayments)) => {
  return http.post('*/api/hr/employee/payments', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEmployeePaymentsStatusViewResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEmployeeOvertimesStatusViewMockHandler = (overrideResponse?: EmployeeOvertimes | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EmployeeOvertimes> | EmployeeOvertimes)) => {
  return http.post('*/api/hr/employee/overtimes', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEmployeeOvertimesStatusViewResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getBanksMockHandler = (overrideResponse?: Banks | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Banks> | Banks)) => {
  return http.post('*/api/finance/banks', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getBanksResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddBankMockHandler = (overrideResponse?: Bank | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Bank> | Bank)) => {
  return http.post('*/api/finance/bank', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddBankResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getBankBranchesMockHandler = (overrideResponse?: BankBranches | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<BankBranches> | BankBranches)) => {
  return http.post('*/api/finance/bankBranches', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getBankBranchesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddBankBranchMockHandler = (overrideResponse?: BankBranch | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<BankBranch> | BankBranch)) => {
  return http.post('*/api/finance/bankBranch', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddBankBranchResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getBankAccountsMockHandler = (overrideResponse?: BankAccounts | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<BankAccounts> | BankAccounts)) => {
  return http.post('*/api/finance/bankAccounts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getBankAccountsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddBankBranch1MockHandler = (overrideResponse?: BankAccount | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<BankAccount> | BankAccount)) => {
  return http.post('*/api/finance/bankAccount', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddBankBranch1ResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDepartmentsMockHandler = (overrideResponse?: Departments | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Departments> | Departments)) => {
  return http.post('*/api/company/departments', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDepartmentsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddDepartmentMockHandler = (overrideResponse?: Department | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Department> | Department)) => {
  return http.post('*/api/company/department', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddDepartmentResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getBranchesMockHandler = (overrideResponse?: Branches | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Branches> | Branches)) => {
  return http.post('*/api/company/branches', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getBranchesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddBranchMockHandler = (overrideResponse?: Branch | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Branch> | Branch)) => {
  return http.post('*/api/company/branch', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddBranchResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getSectionsMockHandler = (overrideResponse?: Sections | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Sections> | Sections)) => {
  return http.post('*/api/admin/sections', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getSectionsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddSectionMockHandler = (overrideResponse?: Section | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Section> | Section)) => {
  return http.post('*/api/admin/section', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddSectionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getRolesMockHandler = (overrideResponse?: Roles | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Roles> | Roles)) => {
  return http.post('*/api/admin/roles', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRolesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddRoleMockHandler = (overrideResponse?: Role | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Role> | Role)) => {
  return http.post('*/api/admin/role', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddRoleResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPublicHolidaysMockHandler = (overrideResponse?: PublicHolidays | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PublicHolidays> | PublicHolidays)) => {
  return http.post('*/api/admin/publicHolidays', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPublicHolidaysResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddPublicHolidayMockHandler = (overrideResponse?: PublicHoliday | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PublicHoliday> | PublicHoliday)) => {
  return http.post('*/api/admin/publicHoliday', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddPublicHolidayResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPaymentMethodsMockHandler = (overrideResponse?: PaymentMethods | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PaymentMethods> | PaymentMethods)) => {
  return http.post('*/api/admin/paymentMethods', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPaymentMethodsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddPaymentMethodMockHandler = (overrideResponse?: PaymentMethod | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PaymentMethod> | PaymentMethod)) => {
  return http.post('*/api/admin/paymentMethod', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddPaymentMethodResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getMachinesMockHandler = (overrideResponse?: Machines | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Machines> | Machines)) => {
  return http.post('*/api/admin/machines', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getMachinesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddMachineMockHandler = (overrideResponse?: Machine | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Machine> | Machine)) => {
  return http.post('*/api/admin/machine', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddMachineResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDepotsMockHandler = (overrideResponse?: Depots | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Depots> | Depots)) => {
  return http.post('*/api/admin/depots', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDepotsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddDepotMockHandler = (overrideResponse?: Depot | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Depot> | Depot)) => {
  return http.post('*/api/admin/depot', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddDepotResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddCompanyMockHandler = (overrideResponse?: Company | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Company> | Company)) => {
  return http.post('*/api/admin/company', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddCompanyResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompaniesMockHandler = (overrideResponse?: Companies | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Companies> | Companies)) => {
  return http.post('*/api/admin/companies', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompaniesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getExpenseInvoicesMockHandler = (overrideResponse?: ExpenseInvoices | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ExpenseInvoices> | ExpenseInvoices)) => {
  return http.post('*/api/accounting/expenseInvoices', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getExpenseInvoicesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddExpenseInvoiceMockHandler = (overrideResponse?: ExpenseInvoice | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ExpenseInvoice> | ExpenseInvoice)) => {
  return http.post('*/api/accounting/expenseInvoice', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddExpenseInvoiceResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCalculateInvoiceTotal1MockHandler = (overrideResponse?: ExpenseInvoiceCalculationResult | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ExpenseInvoiceCalculationResult> | ExpenseInvoiceCalculationResult)) => {
  return http.post('*/api/accounting/expenseInvoice/calculateTotal', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCalculateInvoiceTotal1ResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getExpenseCardsMockHandler = (overrideResponse?: ExpenseCards | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ExpenseCards> | ExpenseCards)) => {
  return http.post('*/api/accounting/expenseCards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getExpenseCardsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddExpenseCardMockHandler = (overrideResponse?: ExpenseCard | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ExpenseCard> | ExpenseCard)) => {
  return http.post('*/api/accounting/expenseCard', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddExpenseCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddCashAccountMockHandler = (overrideResponse?: CashAccount | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CashAccount> | CashAccount)) => {
  return http.post('*/api/accounting/cashAccount', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddCashAccountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCashAccountTransactionsMockHandler = (overrideResponse?: CashAccountTransactions | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CashAccountTransactions> | CashAccountTransactions)) => {
  return http.post('*/api/accounting/cashAccountTransactions', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCashAccountTransactionsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddCashAccountTransactionMockHandler = (overrideResponse?: CashAccountTransaction | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CashAccountTransaction> | CashAccountTransaction)) => {
  return http.post('*/api/accounting/cashAccountTransaction', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddCashAccountTransactionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCalculateBalanceMockHandler = (overrideResponse?: CashAccountBalanceResult | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CashAccountBalanceResult> | CashAccountBalanceResult)) => {
  return http.post('*/api/accounting/accounting/calculateBalance', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCalculateBalanceResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetServiceGroupTreeMockHandler = (overrideResponse?: ServiceGroupTreeDataResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ServiceGroupTreeDataResponse> | ServiceGroupTreeDataResponse)) => {
  return http.get('*/api/storage/serviceGroup/tree', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetServiceGroupTreeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetServiceGroupFlatListMockHandler = (overrideResponse?: ServiceGroupTreeDataResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ServiceGroupTreeDataResponse> | ServiceGroupTreeDataResponse)) => {
  return http.get('*/api/storage/serviceGroup/flatList', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetServiceGroupFlatListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetProductGroupTreeMockHandler = (overrideResponse?: ProductGroupTreeDataResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProductGroupTreeDataResponse> | ProductGroupTreeDataResponse)) => {
  return http.get('*/api/storage/productGroup/tree', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetProductGroupTreeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetProductGroupFlatListMockHandler = (overrideResponse?: ProductGroupTreeDataResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProductGroupTreeDataResponse> | ProductGroupTreeDataResponse)) => {
  return http.get('*/api/storage/productGroup/flatList', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetProductGroupFlatListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetMaterialGroupTreeMockHandler = (overrideResponse?: MaterialGroupTreeDataResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MaterialGroupTreeDataResponse> | MaterialGroupTreeDataResponse)) => {
  return http.get('*/api/storage/materialGroup/tree', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetMaterialGroupTreeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetMaterialGroupFlatListMockHandler = (overrideResponse?: MaterialGroupTreeDataResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MaterialGroupTreeDataResponse> | MaterialGroupTreeDataResponse)) => {
  return http.get('*/api/storage/materialGroup/flatList', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetMaterialGroupFlatListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetFixtureGroupTreeMockHandler = (overrideResponse?: FixtureGroupTreeDataResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<FixtureGroupTreeDataResponse> | FixtureGroupTreeDataResponse)) => {
  return http.get('*/api/storage/fixtureGroup/tree', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetFixtureGroupTreeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetFixtureGroupFlatListMockHandler = (overrideResponse?: FixtureGroupTreeDataResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<FixtureGroupTreeDataResponse> | FixtureGroupTreeDataResponse)) => {
  return http.get('*/api/storage/fixtureGroup/flatList', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetFixtureGroupFlatListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetTimeKeepingDraftMockHandler = (overrideResponse?: TimeKeeping | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TimeKeeping> | TimeKeeping)) => {
  return http.get('*/api/hr/timekeeping/draft/employee/:id/year/:year/month/:month', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetTimeKeepingDraftResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetTimeOffStatusMockHandler = (overrideResponse?: TimeOffStatus | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TimeOffStatus> | TimeOffStatus)) => {
  return http.get('*/api/hr/employee/:id/timeoffstatus', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetTimeOffStatusResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetEmployeePaymentMockHandler = (overrideResponse?: EmployeePayment | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<EmployeePayment> | EmployeePayment)) => {
  return http.get('*/api/hr/employee/:id/payment/:employeePaymentId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetEmployeePaymentResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteEmployeePaymentMockHandler = (overrideResponse?: EmployeePayment | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<EmployeePayment> | EmployeePayment)) => {
  return http.delete('*/api/hr/employee/:id/payment/:employeePaymentId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteEmployeePaymentResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetEmployeeOvertimeMockHandler = (overrideResponse?: EmployeeOvertime | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<EmployeeOvertime> | EmployeeOvertime)) => {
  return http.get('*/api/hr/employee/:id/overtime/:overtimeId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetEmployeeOvertimeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteEmployeeOvertimeMockHandler = (overrideResponse?: EmployeeOvertime | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<EmployeeOvertime> | EmployeeOvertime)) => {
  return http.delete('*/api/hr/employee/:id/overtime/:overtimeId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteEmployeeOvertimeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getOpenAPIDefinitionMock = () => [
  getGetUnitMockHandler(),
  getUpdateUnitMockHandler(),
  getDeleteUnitMockHandler(),
  getGetShelfMockHandler(),
  getUpdateShelfMockHandler(),
  getDeleteShelfMockHandler(),
  getGetServiceGroupMockHandler(),
  getUpdateServiceGroupMockHandler(),
  getDeleteServiceGroupMockHandler(),
  getGetServiceCardMockHandler(),
  getUpdateServiceCardMockHandler(),
  getDeleteServiceCardMockHandler(),
  getGetProductGroupMockHandler(),
  getUpdateProductGroupMockHandler(),
  getDeleteProductGroupMockHandler(),
  getGetProductCardMockHandler(),
  getUpdateProductCardMockHandler(),
  getDeleteProductCardMockHandler(),
  getGetMaterialGroupMockHandler(),
  getUpdateMaterialGroupMockHandler(),
  getDeleteMaterialGroupMockHandler(),
  getGetMaterialCardMockHandler(),
  getUpdateMaterialCardMockHandler(),
  getDeleteMaterialCardMockHandler(),
  getGetFixtureGroupMockHandler(),
  getUpdateFixtureGroupMockHandler(),
  getDeleteFixtureGroupMockHandler(),
  getGetFixtureCardMockHandler(),
  getUpdateFixtureCardMockHandler(),
  getDeleteFixtureCardMockHandler(),
  getGetAssignmentTransactionMockHandler(),
  getUpdateAssignmentTransactionMockHandler(),
  getDeleteAssignmentTransactionMockHandler(),
  getGetAssignmentCardMockHandler(),
  getUpdateAssignmentCardMockHandler(),
  getDeleteAssignmentCardMockHandler(),
  getGetProposalMockHandler(),
  getUpdateProposalMockHandler(),
  getDeleteProposalMockHandler(),
  getGetPurchaseOrderMockHandler(),
  getUpdatePurchaseOrderMockHandler(),
  getDeletePurchaseOrderMockHandler(),
  getGetInvoiceMockHandler(),
  getUpdateInvoiceMockHandler(),
  getDeleteInvoiceMockHandler(),
  getGetCurrentAccountTransactionMockHandler(),
  getUpdateCurrentAccountTransactionMockHandler(),
  getDeleteCurrentAccountTransactionMockHandler(),
  getGetCurrentAccountBankAccountMockHandler(),
  getUpdateCurrentAccountBankAccountMockHandler(),
  getDeleteCurrentAccountBankAccountMockHandler(),
  getGetCurrentAccountMockHandler(),
  getUpdateCurrentAccountMockHandler(),
  getDeleteCurrentAccountMockHandler(),
  getGetAdditionalCostMockHandler(),
  getUpdateAdditionalCostMockHandler(),
  getDeleteAdditionalCostMockHandler(),
  getGetProjectMockHandler(),
  getUpdateProjectMockHandler(),
  getDeleteProjectMockHandler(),
  getGetTimeKeepingMockHandler(),
  getUpdateTimeKeepingMockHandler(),
  getDeleteTimeKeepingMockHandler(),
  getGetEmployeeMockHandler(),
  getUpdateEmployeeMockHandler(),
  getDeleteEmployeeMockHandler(),
  getGetTimeOffMockHandler(),
  getUpdateTimeoffMockHandler(),
  getDeleteTimeOffMockHandler(),
  getUpdateEmployeePaymentsMockHandler(),
  getAddEmployeePaymentMockHandler(),
  getUpdateEmployeeOvertimesMockHandler(),
  getAddEmployeeOvertimesMockHandler(),
  getGetBankBranchMockHandler(),
  getUpdateBankbranchMockHandler(),
  getDeleteBankBranchMockHandler(),
  getGetBankAccountMockHandler(),
  getUpdateBankAccountMockHandler(),
  getDeleteBankAccountMockHandler(),
  getGetDepartmentMockHandler(),
  getUpdateBankMockHandler(),
  getDeleteBankMockHandler(),
  getGetDepartment1MockHandler(),
  getUpdateDepartmentMockHandler(),
  getDeleteDepartmentMockHandler(),
  getGetBranchMockHandler(),
  getUpdateBranchMockHandler(),
  getDeleteBranchMockHandler(),
  getGetSectionMockHandler(),
  getUpdateSectionMockHandler(),
  getDeleteSectionMockHandler(),
  getGetRoleMockHandler(),
  getUpdateRoleMockHandler(),
  getDeleteRoleMockHandler(),
  getGetPublicHolidayMockHandler(),
  getUpdatePublicHolidayMockHandler(),
  getDeletePublicHolidayMockHandler(),
  getGetPaymentMethodMockHandler(),
  getUpdatePaymentMethodMockHandler(),
  getDeletePaymentMethodMockHandler(),
  getGetMachineMockHandler(),
  getUpdateMachineMockHandler(),
  getDeleteMachineMockHandler(),
  getGetDepotMockHandler(),
  getUpdateDepotMockHandler(),
  getDeleteDepotMockHandler(),
  getGetCompanyMockHandler(),
  getUpdateCompanyMockHandler(),
  getDeleteCompanyMockHandler(),
  getGetExpenseInvoiceMockHandler(),
  getUpdateExpenseInvoiceMockHandler(),
  getDeleteExpenseInvoiceMockHandler(),
  getGetExpenseCardMockHandler(),
  getUpdateExpenseCardMockHandler(),
  getDeleteExpenseCardMockHandler(),
  getGetCashAccountTransactionMockHandler(),
  getUpdateCashAccountTransactionMockHandler(),
  getDeleteCashAccountTransactionMockHandler(),
  getGetCashAccountMockHandler(),
  getUpdateCashAccountMockHandler(),
  getDeleteCashAccountMockHandler(),
  getUsersMockHandler(),
  getRefreshMockHandler(),
  getLogoutMockHandler(),
  getLoginMockHandler(),
  getUnitsMockHandler(),
  getAddUnitMockHandler(),
  getShelvesMockHandler(),
  getAddShelfMockHandler(),
  getServiceGroupsMockHandler(),
  getAddServiceGroupMockHandler(),
  getServiceCardsMockHandler(),
  getAddServiceCardMockHandler(),
  getProductGroupsMockHandler(),
  getAddProductGroupMockHandler(),
  getProductCardsMockHandler(),
  getAddProductCardMockHandler(),
  getMaterialGroupsMockHandler(),
  getAddMaterialGroupMockHandler(),
  getMaterialCardsMockHandler(),
  getAddMaterialCardMockHandler(),
  getFixtureGroupsMockHandler(),
  getAddFixtureGroupMockHandler(),
  getFixtureCardsMockHandler(),
  getAddFixtureCardMockHandler(),
  getAssignmentTransactionsMockHandler(),
  getAddAssignmentTransactionMockHandler(),
  getAssignmentCardsMockHandler(),
  getAddAssignmentCardMockHandler(),
  getProposalsMockHandler(),
  getAddProposalMockHandler(),
  getPurchaseOrdersMockHandler(),
  getAddPurchaseOrderMockHandler(),
  getGetInvoicesMockHandler(),
  getAddInvoiceMockHandler(),
  getCalculateInvoiceTotalMockHandler(),
  getCurrentAccountsMockHandler(),
  getAddCurrentAccountMockHandler(),
  getGetCurrentAccountTransactionsMockHandler(),
  getAddCurrentAccountTransactionMockHandler(),
  getCurrentAccountBankAccountsMockHandler(),
  getAddCurrentAccountBankAccountMockHandler(),
  getAdditionalcostsMockHandler(),
  getAddAdditionalCostMockHandler(),
  getProjectsMockHandler(),
  getAddProjectMockHandler(),
  getTimeKeepingsMockHandler(),
  getCreateTimeKeepingMockHandler(),
  getCalculateTimeKeepingTotalMockHandler(),
  getEmployeesMockHandler(),
  getEmployeeTimeOffStatusesMockHandler(),
  getAddEmployeeMockHandler(),
  getTimeoffsMockHandler(),
  getAddTimeOffMockHandler(),
  getEmployeePaymentsMockHandler(),
  getEmployeeOvertimesMockHandler(),
  getEmployeePaymentsStatusViewMockHandler(),
  getEmployeeOvertimesStatusViewMockHandler(),
  getBanksMockHandler(),
  getAddBankMockHandler(),
  getBankBranchesMockHandler(),
  getAddBankBranchMockHandler(),
  getBankAccountsMockHandler(),
  getAddBankBranch1MockHandler(),
  getDepartmentsMockHandler(),
  getAddDepartmentMockHandler(),
  getBranchesMockHandler(),
  getAddBranchMockHandler(),
  getSectionsMockHandler(),
  getAddSectionMockHandler(),
  getRolesMockHandler(),
  getAddRoleMockHandler(),
  getPublicHolidaysMockHandler(),
  getAddPublicHolidayMockHandler(),
  getPaymentMethodsMockHandler(),
  getAddPaymentMethodMockHandler(),
  getMachinesMockHandler(),
  getAddMachineMockHandler(),
  getDepotsMockHandler(),
  getAddDepotMockHandler(),
  getAddCompanyMockHandler(),
  getCompaniesMockHandler(),
  getExpenseInvoicesMockHandler(),
  getAddExpenseInvoiceMockHandler(),
  getCalculateInvoiceTotal1MockHandler(),
  getExpenseCardsMockHandler(),
  getAddExpenseCardMockHandler(),
  getAddCashAccountMockHandler(),
  getCashAccountTransactionsMockHandler(),
  getAddCashAccountTransactionMockHandler(),
  getCalculateBalanceMockHandler(),
  getGetServiceGroupTreeMockHandler(),
  getGetServiceGroupFlatListMockHandler(),
  getGetProductGroupTreeMockHandler(),
  getGetProductGroupFlatListMockHandler(),
  getGetMaterialGroupTreeMockHandler(),
  getGetMaterialGroupFlatListMockHandler(),
  getGetFixtureGroupTreeMockHandler(),
  getGetFixtureGroupFlatListMockHandler(),
  getGetTimeKeepingDraftMockHandler(),
  getGetTimeOffStatusMockHandler(),
  getGetEmployeePaymentMockHandler(),
  getDeleteEmployeePaymentMockHandler(),
  getGetEmployeeOvertimeMockHandler(),
  getDeleteEmployeeOvertimeMockHandler()
]
